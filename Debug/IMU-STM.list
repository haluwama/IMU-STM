
IMU-STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800ac08  0800ac08  0001ac08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b014  0800b014  000209b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b014  0800b014  0001b014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b01c  0800b01c  000209b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b01c  0800b01c  0001b01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b024  0800b024  0001b024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009b8  20000000  0800b028  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  200009b8  0800b9e0  000209b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bd8  0800b9e0  00020bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012701  00000000  00000000  000209e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030cc  00000000  00000000  000330e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  000361b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00037008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000204a9  00000000  00000000  00037d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013767  00000000  00000000  000581a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4b79  00000000  00000000  0006b910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00120489  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cdc  00000000  00000000  001204dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200009b8 	.word	0x200009b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abf0 	.word	0x0800abf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200009bc 	.word	0x200009bc
 80001cc:	0800abf0 	.word	0x0800abf0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <BiasRemover_Init>:
static L3GD20_Values _gyro;
static LSM303DLHC_ACC_Values _acc;
static LSM303DLHC_MAG_Values _mag;

void BiasRemover_Init(int max_samples)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	_maxSamples = max_samples;
 8000ea8:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <BiasRemover_Init+0x64>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]

	_acc.X = 0;
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <BiasRemover_Init+0x68>)
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
	_acc.Y = 0;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <BiasRemover_Init+0x68>)
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]
	_acc.Z = 0;
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <BiasRemover_Init+0x68>)
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]

	_mag.X = 0;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <BiasRemover_Init+0x6c>)
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
	_mag.Y = 0;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <BiasRemover_Init+0x6c>)
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	605a      	str	r2, [r3, #4]
	_mag.Z = 0;
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <BiasRemover_Init+0x6c>)
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]

	_gyro.X = 0;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <BiasRemover_Init+0x70>)
 8000ee0:	f04f 0200 	mov.w	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
	_gyro.Y = 0;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <BiasRemover_Init+0x70>)
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
	_gyro.Z = 0;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <BiasRemover_Init+0x70>)
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200009d4 	.word	0x200009d4
 8000f08:	200009e8 	.word	0x200009e8
 8000f0c:	200009f4 	.word	0x200009f4
 8000f10:	200009dc 	.word	0x200009dc

08000f14 <BiasRemover_Finished>:

bool BiasRemover_Finished()
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

	if (_maxSamples == _currentSamples)
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <BiasRemover_Finished+0x20>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <BiasRemover_Finished+0x24>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d101      	bne.n	8000f28 <BiasRemover_Finished+0x14>
		return true;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <BiasRemover_Finished+0x16>
	else
		return false;
 8000f28:	2300      	movs	r3, #0

}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	200009d4 	.word	0x200009d4
 8000f38:	200009d8 	.word	0x200009d8

08000f3c <BiasRemover_Get>:

void BiasRemover_Get(LSM303DLHC_ACC_Values acc, LSM303DLHC_MAG_Values mag,
		L3GD20_Values gyro)
{
 8000f3c:	b490      	push	{r4, r7}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	eef0 4a41 	vmov.f32	s9, s2
 8000f46:	eeb0 5a61 	vmov.f32	s10, s3
 8000f4a:	eef0 5a42 	vmov.f32	s11, s4
 8000f4e:	eeb0 6a62 	vmov.f32	s12, s5
 8000f52:	eef0 6a43 	vmov.f32	s13, s6
 8000f56:	eeb0 7a63 	vmov.f32	s14, s7
 8000f5a:	eef0 7a44 	vmov.f32	s15, s8
 8000f5e:	ed87 0a07 	vstr	s0, [r7, #28]
 8000f62:	edc7 0a08 	vstr	s1, [r7, #32]
 8000f66:	edc7 4a09 	vstr	s9, [r7, #36]	; 0x24
 8000f6a:	ed87 5a04 	vstr	s10, [r7, #16]
 8000f6e:	edc7 5a05 	vstr	s11, [r7, #20]
 8000f72:	ed87 6a06 	vstr	s12, [r7, #24]
 8000f76:	edc7 6a01 	vstr	s13, [r7, #4]
 8000f7a:	ed87 7a02 	vstr	s14, [r7, #8]
 8000f7e:	edc7 7a03 	vstr	s15, [r7, #12]

	if (_currentSamples == 0)
 8000f82:	4b58      	ldr	r3, [pc, #352]	; (80010e4 <BiasRemover_Get+0x1a8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d11c      	bne.n	8000fc4 <BiasRemover_Get+0x88>
	{
		_acc = acc;
 8000f8a:	4b57      	ldr	r3, [pc, #348]	; (80010e8 <BiasRemover_Get+0x1ac>)
 8000f8c:	461c      	mov	r4, r3
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		_mag = mag;
 8000f9a:	4b54      	ldr	r3, [pc, #336]	; (80010ec <BiasRemover_Get+0x1b0>)
 8000f9c:	461c      	mov	r4, r3
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fa6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		_gyro = gyro;
 8000faa:	4b51      	ldr	r3, [pc, #324]	; (80010f0 <BiasRemover_Get+0x1b4>)
 8000fac:	461c      	mov	r4, r3
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000fb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		_currentSamples++;
 8000fb8:	4b4a      	ldr	r3, [pc, #296]	; (80010e4 <BiasRemover_Get+0x1a8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4a49      	ldr	r2, [pc, #292]	; (80010e4 <BiasRemover_Get+0x1a8>)
 8000fc0:	6013      	str	r3, [r2, #0]
		_gyro.Z = (gyro.Z + _gyro.Z) / 2;

		_currentSamples++;
	}

}
 8000fc2:	e089      	b.n	80010d8 <BiasRemover_Get+0x19c>
	} else if (_currentSamples <= _maxSamples)
 8000fc4:	4b47      	ldr	r3, [pc, #284]	; (80010e4 <BiasRemover_Get+0x1a8>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b4a      	ldr	r3, [pc, #296]	; (80010f4 <BiasRemover_Get+0x1b8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f300 8083 	bgt.w	80010d8 <BiasRemover_Get+0x19c>
		_acc.X = (acc.X + _acc.X) / 2;
 8000fd2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fd6:	4b44      	ldr	r3, [pc, #272]	; (80010e8 <BiasRemover_Get+0x1ac>)
 8000fd8:	edd3 7a00 	vldr	s15, [r3]
 8000fdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fe0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000fe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe8:	4b3f      	ldr	r3, [pc, #252]	; (80010e8 <BiasRemover_Get+0x1ac>)
 8000fea:	edc3 7a00 	vstr	s15, [r3]
		_acc.Y = (acc.Y + _acc.Y) / 2;
 8000fee:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ff2:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <BiasRemover_Get+0x1ac>)
 8000ff4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ff8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ffc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001004:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <BiasRemover_Get+0x1ac>)
 8001006:	edc3 7a01 	vstr	s15, [r3, #4]
		_acc.Z = (acc.Z + _acc.Z) / 2;
 800100a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800100e:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <BiasRemover_Get+0x1ac>)
 8001010:	edd3 7a02 	vldr	s15, [r3, #8]
 8001014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001018:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800101c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001020:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <BiasRemover_Get+0x1ac>)
 8001022:	edc3 7a02 	vstr	s15, [r3, #8]
		_mag.X = (mag.X + _mag.X) / 2;
 8001026:	ed97 7a04 	vldr	s14, [r7, #16]
 800102a:	4b30      	ldr	r3, [pc, #192]	; (80010ec <BiasRemover_Get+0x1b0>)
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001034:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001038:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103c:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <BiasRemover_Get+0x1b0>)
 800103e:	edc3 7a00 	vstr	s15, [r3]
		_mag.Y = (mag.Y + _mag.Y) / 2;
 8001042:	ed97 7a05 	vldr	s14, [r7, #20]
 8001046:	4b29      	ldr	r3, [pc, #164]	; (80010ec <BiasRemover_Get+0x1b0>)
 8001048:	edd3 7a01 	vldr	s15, [r3, #4]
 800104c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001050:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001054:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <BiasRemover_Get+0x1b0>)
 800105a:	edc3 7a01 	vstr	s15, [r3, #4]
		_mag.Z = (mag.Z + _mag.Z) / 2;
 800105e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <BiasRemover_Get+0x1b0>)
 8001064:	edd3 7a02 	vldr	s15, [r3, #8]
 8001068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800106c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001070:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <BiasRemover_Get+0x1b0>)
 8001076:	edc3 7a02 	vstr	s15, [r3, #8]
		_gyro.X = (gyro.X + _gyro.X) / 2;
 800107a:	ed97 7a01 	vldr	s14, [r7, #4]
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <BiasRemover_Get+0x1b4>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001088:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800108c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001090:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <BiasRemover_Get+0x1b4>)
 8001092:	edc3 7a00 	vstr	s15, [r3]
		_gyro.Y = (gyro.Y + _gyro.Y) / 2;
 8001096:	ed97 7a02 	vldr	s14, [r7, #8]
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <BiasRemover_Get+0x1b4>)
 800109c:	edd3 7a01 	vldr	s15, [r3, #4]
 80010a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80010a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <BiasRemover_Get+0x1b4>)
 80010ae:	edc3 7a01 	vstr	s15, [r3, #4]
		_gyro.Z = (gyro.Z + _gyro.Z) / 2;
 80010b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <BiasRemover_Get+0x1b4>)
 80010b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80010bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80010c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <BiasRemover_Get+0x1b4>)
 80010ca:	edc3 7a02 	vstr	s15, [r3, #8]
		_currentSamples++;
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <BiasRemover_Get+0x1a8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <BiasRemover_Get+0x1a8>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc90      	pop	{r4, r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	200009d8 	.word	0x200009d8
 80010e8:	200009e8 	.word	0x200009e8
 80010ec:	200009f4 	.word	0x200009f4
 80010f0:	200009dc 	.word	0x200009dc
 80010f4:	200009d4 	.word	0x200009d4

080010f8 <BiasRemover_Remove>:

void BiasRemover_Remove(LSM303DLHC_ACC_Values *acc, LSM303DLHC_MAG_Values *mag, L3GD20_Values *gyro)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]

	acc->X = acc->X - _acc.X;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	ed93 7a00 	vldr	s14, [r3]
 800110a:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <BiasRemover_Remove+0xe0>)
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	edc3 7a00 	vstr	s15, [r3]
	acc->Y = acc->Y - _acc.Y;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <BiasRemover_Remove+0xe0>)
 8001122:	edd3 7a01 	vldr	s15, [r3, #4]
 8001126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	edc3 7a01 	vstr	s15, [r3, #4]
	acc->Z = acc->Z - _acc.Z;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	ed93 7a02 	vldr	s14, [r3, #8]
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <BiasRemover_Remove+0xe0>)
 8001138:	edd3 7a02 	vldr	s15, [r3, #8]
 800113c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	edc3 7a02 	vstr	s15, [r3, #8]

	mag->X = mag->X - _mag.X;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	ed93 7a00 	vldr	s14, [r3]
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <BiasRemover_Remove+0xe4>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	edc3 7a00 	vstr	s15, [r3]
	mag->Y = mag->Y - _mag.Y;
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <BiasRemover_Remove+0xe4>)
 8001164:	edd3 7a01 	vldr	s15, [r3, #4]
 8001168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	edc3 7a01 	vstr	s15, [r3, #4]
	mag->Z = mag->Z - _mag.Z;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	ed93 7a02 	vldr	s14, [r3, #8]
 8001178:	4b18      	ldr	r3, [pc, #96]	; (80011dc <BiasRemover_Remove+0xe4>)
 800117a:	edd3 7a02 	vldr	s15, [r3, #8]
 800117e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	edc3 7a02 	vstr	s15, [r3, #8]

	gyro->X = gyro->X - _gyro.X;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	ed93 7a00 	vldr	s14, [r3]
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <BiasRemover_Remove+0xe8>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edc3 7a00 	vstr	s15, [r3]
	gyro->Y = gyro->Y - _gyro.Y;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <BiasRemover_Remove+0xe8>)
 80011a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80011aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro->Z = gyro->Z - _gyro.Z;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <BiasRemover_Remove+0xe8>)
 80011bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80011c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	edc3 7a02 	vstr	s15, [r3, #8]

}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	200009e8 	.word	0x200009e8
 80011dc:	200009f4 	.word	0x200009f4
 80011e0:	200009dc 	.word	0x200009dc

080011e4 <BiasRemover_GetValues>:

void BiasRemover_GetValues(LSM303DLHC_ACC_Values *acc, LSM303DLHC_MAG_Values *mag, L3GD20_Values *gyro)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
	(*acc) = _acc;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <BiasRemover_GetValues+0x38>)
 80011f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	(*mag) = _mag;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	4a08      	ldr	r2, [pc, #32]	; (8001220 <BiasRemover_GetValues+0x3c>)
 80011fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001200:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	(*gyro) = _gyro;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a07      	ldr	r2, [pc, #28]	; (8001224 <BiasRemover_GetValues+0x40>)
 8001208:	ca07      	ldmia	r2, {r0, r1, r2}
 800120a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	200009e8 	.word	0x200009e8
 8001220:	200009f4 	.word	0x200009f4
 8001224:	200009dc 	.word	0x200009dc

08001228 <L3GD20_Init>:
//private functions
static void L3GD20_Write(uint8_t*, uint8_t, uint16_t);
static void L3GD20_Read(uint8_t*, uint8_t, uint16_t);
static uint8_t L3GD20_WriteByte(uint8_t);

void L3GD20_Init(L3GD20_Sensitivity sensitivity, SPI_HandleTypeDef *handler) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]

	_handler = handler;
 8001234:	4a22      	ldr	r2, [pc, #136]	; (80012c0 <L3GD20_Init+0x98>)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	6013      	str	r3, [r2, #0]
	_sensitivity = sensitivity;
 800123a:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <L3GD20_Init+0x9c>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	7013      	strb	r3, [r2, #0]

	uint8_t addr = 0, value = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	2300      	movs	r3, #0
 8001246:	73bb      	strb	r3, [r7, #14]

	addr = L3GD20_CTRL_REG1_ADDR;
 8001248:	2320      	movs	r3, #32
 800124a:	73fb      	strb	r3, [r7, #15]
	value = 0x3F;
 800124c:	233f      	movs	r3, #63	; 0x3f
 800124e:	73bb      	strb	r3, [r7, #14]
	L3GD20_Write(&value, addr, 1);
 8001250:	7bf9      	ldrb	r1, [r7, #15]
 8001252:	f107 030e 	add.w	r3, r7, #14
 8001256:	2201      	movs	r2, #1
 8001258:	4618      	mov	r0, r3
 800125a:	f000 f919 	bl	8001490 <L3GD20_Write>

	addr = L3GD20_CTRL_REG2_ADDR;
 800125e:	2321      	movs	r3, #33	; 0x21
 8001260:	73fb      	strb	r3, [r7, #15]
	value = 0x00;
 8001262:	2300      	movs	r3, #0
 8001264:	73bb      	strb	r3, [r7, #14]
	L3GD20_Write(&value, addr, 1);
 8001266:	7bf9      	ldrb	r1, [r7, #15]
 8001268:	f107 030e 	add.w	r3, r7, #14
 800126c:	2201      	movs	r2, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f90e 	bl	8001490 <L3GD20_Write>

	addr = L3GD20_CTRL_REG3_ADDR;
 8001274:	2322      	movs	r3, #34	; 0x22
 8001276:	73fb      	strb	r3, [r7, #15]
	value = 0x00;
 8001278:	2300      	movs	r3, #0
 800127a:	73bb      	strb	r3, [r7, #14]
	L3GD20_Write(&value, addr, 1);
 800127c:	7bf9      	ldrb	r1, [r7, #15]
 800127e:	f107 030e 	add.w	r3, r7, #14
 8001282:	2201      	movs	r2, #1
 8001284:	4618      	mov	r0, r3
 8001286:	f000 f903 	bl	8001490 <L3GD20_Write>

	addr = L3GD20_CTRL_REG4_ADDR;
 800128a:	2323      	movs	r3, #35	; 0x23
 800128c:	73fb      	strb	r3, [r7, #15]
	value = 0x10;
 800128e:	2310      	movs	r3, #16
 8001290:	73bb      	strb	r3, [r7, #14]
	L3GD20_Write(&value, addr, 1);
 8001292:	7bf9      	ldrb	r1, [r7, #15]
 8001294:	f107 030e 	add.w	r3, r7, #14
 8001298:	2201      	movs	r2, #1
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f8f8 	bl	8001490 <L3GD20_Write>

	addr = L3GD20_CTRL_REG5_ADDR;
 80012a0:	2324      	movs	r3, #36	; 0x24
 80012a2:	73fb      	strb	r3, [r7, #15]
	value = 0x10;
 80012a4:	2310      	movs	r3, #16
 80012a6:	73bb      	strb	r3, [r7, #14]
	L3GD20_Write(&value, addr, 1);
 80012a8:	7bf9      	ldrb	r1, [r7, #15]
 80012aa:	f107 030e 	add.w	r3, r7, #14
 80012ae:	2201      	movs	r2, #1
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 f8ed 	bl	8001490 <L3GD20_Write>

}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000a00 	.word	0x20000a00
 80012c4:	20000a04 	.word	0x20000a04

080012c8 <L3GD20_Reboot>:

void L3GD20_Reboot() {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

	uint8_t tmpreg;
	L3GD20_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	2201      	movs	r2, #1
 80012d2:	2124      	movs	r1, #36	; 0x24
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 f90d 	bl	80014f4 <L3GD20_Read>

	tmpreg |= 0x80;
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	71fb      	strb	r3, [r7, #7]

	L3GD20_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80012e4:	1dfb      	adds	r3, r7, #7
 80012e6:	2201      	movs	r2, #1
 80012e8:	2124      	movs	r1, #36	; 0x24
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f8d0 	bl	8001490 <L3GD20_Write>

}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <L3GD20_ReadID>:

uint8_t L3GD20_ReadID() {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

	uint8_t read = 0, addr = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	71bb      	strb	r3, [r7, #6]
 8001302:	2300      	movs	r3, #0
 8001304:	71fb      	strb	r3, [r7, #7]

	addr = L3GD20_WHO_AM_I_ADDR;
 8001306:	230f      	movs	r3, #15
 8001308:	71fb      	strb	r3, [r7, #7]

	L3GD20_Read(&read, addr, 1);
 800130a:	79f9      	ldrb	r1, [r7, #7]
 800130c:	1dbb      	adds	r3, r7, #6
 800130e:	2201      	movs	r2, #1
 8001310:	4618      	mov	r0, r3
 8001312:	f000 f8ef 	bl	80014f4 <L3GD20_Read>

	return read;
 8001316:	79bb      	ldrb	r3, [r7, #6]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <L3GD20_ReadValues>:

void L3GD20_ReadValues(L3GD20_Values *values) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	uint8_t RawData[6];
	int16_t RawMeasurement[3];
	uint8_t tmpreg = 0, reg = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	2300      	movs	r3, #0
 800132e:	77fb      	strb	r3, [r7, #31]
	float sensitivity = 0.0f;
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]

	reg = L3GD20_OUT_X_L_ADDR;
 800133a:	2328      	movs	r3, #40	; 0x28
 800133c:	77fb      	strb	r3, [r7, #31]
	L3GD20_Read(RawData, reg, 6);
 800133e:	7ff9      	ldrb	r1, [r7, #31]
 8001340:	f107 0318 	add.w	r3, r7, #24
 8001344:	2206      	movs	r2, #6
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f8d4 	bl	80014f4 <L3GD20_Read>

	reg = L3GD20_CTRL_REG4_ADDR;
 800134c:	2323      	movs	r3, #35	; 0x23
 800134e:	77fb      	strb	r3, [r7, #31]
	L3GD20_Read(&tmpreg, reg, 1);
 8001350:	7ff9      	ldrb	r1, [r7, #31]
 8001352:	f107 030f 	add.w	r3, r7, #15
 8001356:	2201      	movs	r2, #1
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f8cb 	bl	80014f4 <L3GD20_Read>

	if (!(tmpreg & L3GD20_BLE_MSB)) {
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001364:	2b00      	cmp	r3, #0
 8001366:	d126      	bne.n	80013b6 <L3GD20_ReadValues+0x96>
		for (i = 0; i < 3; i++) {
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
 800136c:	e01f      	b.n	80013ae <L3GD20_ReadValues+0x8e>
			RawMeasurement[i] = (int16_t) (((uint16_t) RawData[2 * i + 1] << 8)
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	3301      	adds	r3, #1
 8001374:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001378:	4413      	add	r3, r2
 800137a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800137e:	b29b      	uxth	r3, r3
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	b29a      	uxth	r2, r3
					+ RawData[2 * i]);
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800138c:	440b      	add	r3, r1
 800138e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001392:	b29b      	uxth	r3, r3
 8001394:	4413      	add	r3, r2
 8001396:	b29b      	uxth	r3, r3
			RawMeasurement[i] = (int16_t) (((uint16_t) RawData[2 * i + 1] << 8)
 8001398:	b21a      	sxth	r2, r3
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013a2:	440b      	add	r3, r1
 80013a4:	f823 2c18 	strh.w	r2, [r3, #-24]
		for (i = 0; i < 3; i++) {
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	3301      	adds	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	dddc      	ble.n	800136e <L3GD20_ReadValues+0x4e>
 80013b4:	e025      	b.n	8001402 <L3GD20_ReadValues+0xe2>
		}
	} else {
		for (i = 0; i < 3; i++) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
 80013ba:	e01f      	b.n	80013fc <L3GD20_ReadValues+0xdc>
			RawMeasurement[i] = (int16_t) (((uint16_t) RawData[2 * i] << 8)
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013c4:	4413      	add	r3, r2
 80013c6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	b29a      	uxth	r2, r3
					+ RawData[2 * i + 1]);
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	3301      	adds	r3, #1
 80013d6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013da:	440b      	add	r3, r1
 80013dc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	b29b      	uxth	r3, r3
			RawMeasurement[i] = (int16_t) (((uint16_t) RawData[2 * i] << 8)
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013f0:	440b      	add	r3, r1
 80013f2:	f823 2c18 	strh.w	r2, [r3, #-24]
		for (i = 0; i < 3; i++) {
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	3301      	adds	r3, #1
 80013fa:	623b      	str	r3, [r7, #32]
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	dddc      	ble.n	80013bc <L3GD20_ReadValues+0x9c>
		}
	}


	if (_sensitivity == L3DS20_SENSITIVITY_250DPS) {
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <L3GD20_ReadValues+0x160>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d102      	bne.n	8001410 <L3GD20_ReadValues+0xf0>
		sensitivity = L3GD20_SENSITIVITY_250DPS;
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <L3GD20_ReadValues+0x164>)
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
 800140e:	e00c      	b.n	800142a <L3GD20_ReadValues+0x10a>
	} else if (_sensitivity == L3DS20_SENSITIVITY_500DPS) {
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <L3GD20_ReadValues+0x160>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d102      	bne.n	800141e <L3GD20_ReadValues+0xfe>
		sensitivity = L3GD20_SENSITIVITY_500DPS;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <L3GD20_ReadValues+0x168>)
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
 800141c:	e005      	b.n	800142a <L3GD20_ReadValues+0x10a>
	} else if (_sensitivity == L3DS20_SENSITIVITY_2000DPS) {
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <L3GD20_ReadValues+0x160>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d101      	bne.n	800142a <L3GD20_ReadValues+0x10a>
		sensitivity = L3GD20_SENSITIVITY_2000DPS;
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <L3GD20_ReadValues+0x16c>)
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
	}

	values->X = (float) (RawMeasurement[0] / sensitivity);
 800142a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800142e:	ee07 3a90 	vmov	s15, r3
 8001432:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001436:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800143a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	edc3 7a00 	vstr	s15, [r3]
	values->Y = (float) (RawMeasurement[1] / sensitivity);
 8001444:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001450:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	edc3 7a01 	vstr	s15, [r3, #4]
	values->Z = (float) (RawMeasurement[2] / sensitivity);
 800145e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001462:	ee07 3a90 	vmov	s15, r3
 8001466:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800146a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800146e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	; 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000a04 	.word	0x20000a04
 8001484:	410c0000 	.word	0x410c0000
 8001488:	418c0000 	.word	0x418c0000
 800148c:	428c0000 	.word	0x428c0000

08001490 <L3GD20_Write>:

static void L3GD20_Write(uint8_t *pBuffer, uint8_t WriteAddr,
		uint16_t NumByteToWrite) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	70fb      	strb	r3, [r7, #3]
 800149c:	4613      	mov	r3, r2
 800149e:	803b      	strh	r3, [r7, #0]

	if (NumByteToWrite > 1)
 80014a0:	883b      	ldrh	r3, [r7, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d903      	bls.n	80014ae <L3GD20_Write+0x1e>
		WriteAddr |= (uint8_t) 0x40;
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ac:	70fb      	strb	r3, [r7, #3]

	L3GD20_CS_LOW;
 80014ae:	2200      	movs	r2, #0
 80014b0:	2108      	movs	r1, #8
 80014b2:	480f      	ldr	r0, [pc, #60]	; (80014f0 <L3GD20_Write+0x60>)
 80014b4:	f001 fb2e 	bl	8002b14 <HAL_GPIO_WritePin>
	L3GD20_WriteByte(WriteAddr);
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f854 	bl	8001568 <L3GD20_WriteByte>

	while (NumByteToWrite >= 0x01) {
 80014c0:	e00a      	b.n	80014d8 <L3GD20_Write+0x48>

		//HAL_SPI_TransmitReceive(_handler, pBuffer, read, NumByteToWrite, 100);
		L3GD20_WriteByte(*pBuffer);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f84e 	bl	8001568 <L3GD20_WriteByte>
		NumByteToWrite--;
 80014cc:	883b      	ldrh	r3, [r7, #0]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3301      	adds	r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
	while (NumByteToWrite >= 0x01) {
 80014d8:	883b      	ldrh	r3, [r7, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1f1      	bne.n	80014c2 <L3GD20_Write+0x32>

	}

	L3GD20_CS_HIGH;
 80014de:	2201      	movs	r2, #1
 80014e0:	2108      	movs	r1, #8
 80014e2:	4803      	ldr	r0, [pc, #12]	; (80014f0 <L3GD20_Write+0x60>)
 80014e4:	f001 fb16 	bl	8002b14 <HAL_GPIO_WritePin>
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	48001000 	.word	0x48001000

080014f4 <L3GD20_Read>:

static void L3GD20_Read(uint8_t *pBuffer, uint8_t readAddr,
		uint16_t NumByteToWrite) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	70fb      	strb	r3, [r7, #3]
 8001500:	4613      	mov	r3, r2
 8001502:	803b      	strh	r3, [r7, #0]

	if (NumByteToWrite > 1)
 8001504:	883b      	ldrh	r3, [r7, #0]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d904      	bls.n	8001514 <L3GD20_Read+0x20>
		readAddr |= (uint8_t) ((uint8_t) 0x80 | (uint8_t) 0x40);
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001510:	70fb      	strb	r3, [r7, #3]
 8001512:	e003      	b.n	800151c <L3GD20_Read+0x28>
	else
		readAddr |= (uint8_t) 0x80;
 8001514:	78fb      	ldrb	r3, [r7, #3]
 8001516:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800151a:	70fb      	strb	r3, [r7, #3]

	L3GD20_CS_LOW;
 800151c:	2200      	movs	r2, #0
 800151e:	2108      	movs	r1, #8
 8001520:	4810      	ldr	r0, [pc, #64]	; (8001564 <L3GD20_Read+0x70>)
 8001522:	f001 faf7 	bl	8002b14 <HAL_GPIO_WritePin>
	L3GD20_WriteByte(readAddr);
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 f81d 	bl	8001568 <L3GD20_WriteByte>

	while (NumByteToWrite > 0x00) {
 800152e:	e00c      	b.n	800154a <L3GD20_Read+0x56>

		//HAL_SPI_TransmitReceive(_handler, pBuffer, read, NumByteToWrite, 100);
		*pBuffer = L3GD20_WriteByte((uint8_t) 0x00);
 8001530:	2000      	movs	r0, #0
 8001532:	f000 f819 	bl	8001568 <L3GD20_WriteByte>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	701a      	strb	r2, [r3, #0]
		NumByteToWrite--;
 800153e:	883b      	ldrh	r3, [r7, #0]
 8001540:	3b01      	subs	r3, #1
 8001542:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3301      	adds	r3, #1
 8001548:	607b      	str	r3, [r7, #4]
	while (NumByteToWrite > 0x00) {
 800154a:	883b      	ldrh	r3, [r7, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1ef      	bne.n	8001530 <L3GD20_Read+0x3c>

	}

	L3GD20_CS_HIGH;
 8001550:	2201      	movs	r2, #1
 8001552:	2108      	movs	r1, #8
 8001554:	4803      	ldr	r0, [pc, #12]	; (8001564 <L3GD20_Read+0x70>)
 8001556:	f001 fadd 	bl	8002b14 <HAL_GPIO_WritePin>

}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	48001000 	.word	0x48001000

08001568 <L3GD20_WriteByte>:

static uint8_t L3GD20_WriteByte(uint8_t reg) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af02      	add	r7, sp, #8
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]

//	L3GD20_CS_LOW;

	HAL_SPI_TransmitReceive(_handler, (uint8_t*) &reg, (uint8_t*) &data, 1,
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <L3GD20_WriteByte+0x2c>)
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	f107 020f 	add.w	r2, r7, #15
 800157e:	1df9      	adds	r1, r7, #7
 8001580:	2364      	movs	r3, #100	; 0x64
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	f003 fbe8 	bl	8004d5a <HAL_SPI_TransmitReceive>
			100);

//	L3GD20_CS_HIGH;

	return data;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000a00 	.word	0x20000a00

08001598 <LSM303DLHC_Init>:
static I2C_HandleTypeDef *_i2c;
static void LSM303DLHC_Read(bool, uint16_t, uint8_t*, uint16_t);
static void LSM303DLHC_Write(uint16_t dev, uint8_t reg, uint8_t read);
static uint8_t LSM303DLHC_ReadByte(uint16_t, uint8_t);

void LSM303DLHC_Init(I2C_HandleTypeDef *i2c) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

	_i2c = i2c;
 80015a0:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <LSM303DLHC_Init+0x78>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]

	//ACC initalization
	uint8_t settings;

	settings = LSM303DLHC_AXES_ENABLE | LSM303DLHC_ODR_100_HZ;
 80015a6:	2357      	movs	r3, #87	; 0x57
 80015a8:	73fb      	strb	r3, [r7, #15]
	LSM303DLHC_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, settings);
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	461a      	mov	r2, r3
 80015ae:	2120      	movs	r1, #32
 80015b0:	2032      	movs	r0, #50	; 0x32
 80015b2:	f000 f9dd 	bl	8001970 <LSM303DLHC_Write>

	settings = LSM303DLHC_HPM_NORMAL_MODE | LSM303DLHC_HPFCF_16;
 80015b6:	2390      	movs	r3, #144	; 0x90
 80015b8:	73fb      	strb	r3, [r7, #15]
	LSM303DLHC_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, settings);
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	461a      	mov	r2, r3
 80015be:	2121      	movs	r1, #33	; 0x21
 80015c0:	2032      	movs	r0, #50	; 0x32
 80015c2:	f000 f9d5 	bl	8001970 <LSM303DLHC_Write>

	settings = LSM303DLHC_HR_ENABLE | LSM303DLHC_CONTINUOS_CONVERSION;
 80015c6:	2308      	movs	r3, #8
 80015c8:	73fb      	strb	r3, [r7, #15]
	LSM303DLHC_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, settings);
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	461a      	mov	r2, r3
 80015ce:	2123      	movs	r1, #35	; 0x23
 80015d0:	2032      	movs	r0, #50	; 0x32
 80015d2:	f000 f9cd 	bl	8001970 <LSM303DLHC_Write>

	//MAG initalization

	settings = LSM303DLHC_TEMPSENSOR_DISABLE | LSM303DLHC_ODR_220_HZ;
 80015d6:	231c      	movs	r3, #28
 80015d8:	73fb      	strb	r3, [r7, #15]
	LSM303DLHC_Write(MAG_I2C_ADDRESS, LSM303DLHC_CRA_REG_M, settings);
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	461a      	mov	r2, r3
 80015de:	2100      	movs	r1, #0
 80015e0:	203c      	movs	r0, #60	; 0x3c
 80015e2:	f000 f9c5 	bl	8001970 <LSM303DLHC_Write>

	settings = LSM303DLHC_FS_8_1_GA;
 80015e6:	23e0      	movs	r3, #224	; 0xe0
 80015e8:	73fb      	strb	r3, [r7, #15]
	LSM303DLHC_Write(MAG_I2C_ADDRESS, LSM303DLHC_CRB_REG_M, settings);
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	461a      	mov	r2, r3
 80015ee:	2101      	movs	r1, #1
 80015f0:	203c      	movs	r0, #60	; 0x3c
 80015f2:	f000 f9bd 	bl	8001970 <LSM303DLHC_Write>

	settings = LSM303DLHC_CONTINUOS_CONVERSION;
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
	LSM303DLHC_Write(MAG_I2C_ADDRESS, LSM303DLHC_MR_REG_M, settings);
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	461a      	mov	r2, r3
 80015fe:	2102      	movs	r1, #2
 8001600:	203c      	movs	r0, #60	; 0x3c
 8001602:	f000 f9b5 	bl	8001970 <LSM303DLHC_Write>

}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000a08 	.word	0x20000a08

08001614 <LSM303DLHC_Reboot>:

void LSM303DLHC_Reboot() {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
	uint8_t settings;
	settings = LSM303DLHC_ReadByte(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800161a:	2124      	movs	r1, #36	; 0x24
 800161c:	2032      	movs	r0, #50	; 0x32
 800161e:	f000 f9c5 	bl	80019ac <LSM303DLHC_ReadByte>
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	settings |= 0x80;
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800162c:	71fb      	strb	r3, [r7, #7]

	LSM303DLHC_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, settings);
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	461a      	mov	r2, r3
 8001632:	2124      	movs	r1, #36	; 0x24
 8001634:	2032      	movs	r0, #50	; 0x32
 8001636:	f000 f99b 	bl	8001970 <LSM303DLHC_Write>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <LSM303DLHC_GetValues>:
	return arr;

}

void LSM303DLHC_GetValues(LSM303DLHC_ACC_Values *acc,
		LSM303DLHC_MAG_Values *mag) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	int16_t pnRawData[3];
	uint8_t buffer[6];
	uint8_t i = 0, ctrlmag = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	77fb      	strb	r3, [r7, #31]
 8001652:	2300      	movs	r3, #0
 8001654:	76fb      	strb	r3, [r7, #27]
	uint8_t ctrlx[2] = { 0, 0 };
 8001656:	2300      	movs	r3, #0
 8001658:	813b      	strh	r3, [r7, #8]
	uint8_t sensitivity_ACC = LSM303DLHC_ACC_SENSITIVITY_2G,
 800165a:	2301      	movs	r3, #1
 800165c:	77bb      	strb	r3, [r7, #30]
			sensitivity_MAG_XY = LSM303DLHC_M_SENSITIVITY_XY_8_1Ga,
 800165e:	23e6      	movs	r3, #230	; 0xe6
 8001660:	777b      	strb	r3, [r7, #29]
			sensitivity_MAG_Z = LSM303DLHC_M_SENSITIVITY_Z_8_1Ga;
 8001662:	23cd      	movs	r3, #205	; 0xcd
 8001664:	773b      	strb	r3, [r7, #28]

	ctrlx[0] = LSM303DLHC_ReadByte(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8001666:	2123      	movs	r1, #35	; 0x23
 8001668:	2032      	movs	r0, #50	; 0x32
 800166a:	f000 f99f 	bl	80019ac <LSM303DLHC_ReadByte>
 800166e:	4603      	mov	r3, r0
 8001670:	723b      	strb	r3, [r7, #8]
	ctrlx[1] = LSM303DLHC_ReadByte(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001672:	2124      	movs	r1, #36	; 0x24
 8001674:	2032      	movs	r0, #50	; 0x32
 8001676:	f000 f999 	bl	80019ac <LSM303DLHC_ReadByte>
 800167a:	4603      	mov	r3, r0
 800167c:	727b      	strb	r3, [r7, #9]

	buffer[0] = LSM303DLHC_ReadByte(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A);
 800167e:	2128      	movs	r1, #40	; 0x28
 8001680:	2032      	movs	r0, #50	; 0x32
 8001682:	f000 f993 	bl	80019ac <LSM303DLHC_ReadByte>
 8001686:	4603      	mov	r3, r0
 8001688:	733b      	strb	r3, [r7, #12]
	buffer[1] = LSM303DLHC_ReadByte(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800168a:	2129      	movs	r1, #41	; 0x29
 800168c:	2032      	movs	r0, #50	; 0x32
 800168e:	f000 f98d 	bl	80019ac <LSM303DLHC_ReadByte>
 8001692:	4603      	mov	r3, r0
 8001694:	737b      	strb	r3, [r7, #13]
	buffer[2] = LSM303DLHC_ReadByte(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8001696:	212a      	movs	r1, #42	; 0x2a
 8001698:	2032      	movs	r0, #50	; 0x32
 800169a:	f000 f987 	bl	80019ac <LSM303DLHC_ReadByte>
 800169e:	4603      	mov	r3, r0
 80016a0:	73bb      	strb	r3, [r7, #14]
	buffer[3] = LSM303DLHC_ReadByte(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80016a2:	212b      	movs	r1, #43	; 0x2b
 80016a4:	2032      	movs	r0, #50	; 0x32
 80016a6:	f000 f981 	bl	80019ac <LSM303DLHC_ReadByte>
 80016aa:	4603      	mov	r3, r0
 80016ac:	73fb      	strb	r3, [r7, #15]
	buffer[4] = LSM303DLHC_ReadByte(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80016ae:	212c      	movs	r1, #44	; 0x2c
 80016b0:	2032      	movs	r0, #50	; 0x32
 80016b2:	f000 f97b 	bl	80019ac <LSM303DLHC_ReadByte>
 80016b6:	4603      	mov	r3, r0
 80016b8:	743b      	strb	r3, [r7, #16]
	buffer[5] = LSM303DLHC_ReadByte(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80016ba:	212d      	movs	r1, #45	; 0x2d
 80016bc:	2032      	movs	r0, #50	; 0x32
 80016be:	f000 f975 	bl	80019ac <LSM303DLHC_ReadByte>
 80016c2:	4603      	mov	r3, r0
 80016c4:	747b      	strb	r3, [r7, #17]

	if (!(ctrlx[0] & 0x40)) {
 80016c6:	7a3b      	ldrb	r3, [r7, #8]
 80016c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d125      	bne.n	800171c <LSM303DLHC_GetValues+0xd8>
		for (i = 0; i < 3; i++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	77fb      	strb	r3, [r7, #31]
 80016d4:	e01e      	b.n	8001714 <LSM303DLHC_GetValues+0xd0>
			pnRawData[i] = ((int16_t) ((uint16_t) buffer[2 * i + 1] << 8)
 80016d6:	7ffb      	ldrb	r3, [r7, #31]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	3301      	adds	r3, #1
 80016dc:	f107 0220 	add.w	r2, r7, #32
 80016e0:	4413      	add	r3, r2
 80016e2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b29a      	uxth	r2, r3
					+ buffer[2 * i]);
 80016ea:	7ffb      	ldrb	r3, [r7, #31]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	f107 0120 	add.w	r1, r7, #32
 80016f2:	440b      	add	r3, r1
 80016f4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	b29a      	uxth	r2, r3
			pnRawData[i] = ((int16_t) ((uint16_t) buffer[2 * i + 1] << 8)
 80016fe:	7ffb      	ldrb	r3, [r7, #31]
					+ buffer[2 * i]);
 8001700:	b212      	sxth	r2, r2
			pnRawData[i] = ((int16_t) ((uint16_t) buffer[2 * i + 1] << 8)
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	f107 0120 	add.w	r1, r7, #32
 8001708:	440b      	add	r3, r1
 800170a:	f823 2c0c 	strh.w	r2, [r3, #-12]
		for (i = 0; i < 3; i++) {
 800170e:	7ffb      	ldrb	r3, [r7, #31]
 8001710:	3301      	adds	r3, #1
 8001712:	77fb      	strb	r3, [r7, #31]
 8001714:	7ffb      	ldrb	r3, [r7, #31]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d9dd      	bls.n	80016d6 <LSM303DLHC_GetValues+0x92>
 800171a:	e024      	b.n	8001766 <LSM303DLHC_GetValues+0x122>
		}
	} else {
		for (i = 0; i < 3; i++) {
 800171c:	2300      	movs	r3, #0
 800171e:	77fb      	strb	r3, [r7, #31]
 8001720:	e01e      	b.n	8001760 <LSM303DLHC_GetValues+0x11c>
			pnRawData[i] = ((int16_t) ((uint16_t) buffer[2 * i] << 8)
 8001722:	7ffb      	ldrb	r3, [r7, #31]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	f107 0220 	add.w	r2, r7, #32
 800172a:	4413      	add	r3, r2
 800172c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b29a      	uxth	r2, r3
					+ buffer[2 * i + 1]);
 8001734:	7ffb      	ldrb	r3, [r7, #31]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	3301      	adds	r3, #1
 800173a:	f107 0120 	add.w	r1, r7, #32
 800173e:	440b      	add	r3, r1
 8001740:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001744:	b29b      	uxth	r3, r3
 8001746:	4413      	add	r3, r2
 8001748:	b29a      	uxth	r2, r3
			pnRawData[i] = ((int16_t) ((uint16_t) buffer[2 * i] << 8)
 800174a:	7ffb      	ldrb	r3, [r7, #31]
					+ buffer[2 * i + 1]);
 800174c:	b212      	sxth	r2, r2
			pnRawData[i] = ((int16_t) ((uint16_t) buffer[2 * i] << 8)
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	f107 0120 	add.w	r1, r7, #32
 8001754:	440b      	add	r3, r1
 8001756:	f823 2c0c 	strh.w	r2, [r3, #-12]
		for (i = 0; i < 3; i++) {
 800175a:	7ffb      	ldrb	r3, [r7, #31]
 800175c:	3301      	adds	r3, #1
 800175e:	77fb      	strb	r3, [r7, #31]
 8001760:	7ffb      	ldrb	r3, [r7, #31]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d9dd      	bls.n	8001722 <LSM303DLHC_GetValues+0xde>
		}
	}

	switch (ctrlx[0] & LSM303DLHC_FULLSCALE_16G) {
 8001766:	7a3b      	ldrb	r3, [r7, #8]
 8001768:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800176c:	2b30      	cmp	r3, #48	; 0x30
 800176e:	d013      	beq.n	8001798 <LSM303DLHC_GetValues+0x154>
 8001770:	2b30      	cmp	r3, #48	; 0x30
 8001772:	dc14      	bgt.n	800179e <LSM303DLHC_GetValues+0x15a>
 8001774:	2b20      	cmp	r3, #32
 8001776:	d00c      	beq.n	8001792 <LSM303DLHC_GetValues+0x14e>
 8001778:	2b20      	cmp	r3, #32
 800177a:	dc10      	bgt.n	800179e <LSM303DLHC_GetValues+0x15a>
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <LSM303DLHC_GetValues+0x142>
 8001780:	2b10      	cmp	r3, #16
 8001782:	d003      	beq.n	800178c <LSM303DLHC_GetValues+0x148>
 8001784:	e00b      	b.n	800179e <LSM303DLHC_GetValues+0x15a>
	case LSM303DLHC_FULLSCALE_2G:
		sensitivity_ACC = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001786:	2301      	movs	r3, #1
 8001788:	77bb      	strb	r3, [r7, #30]
		break;
 800178a:	e008      	b.n	800179e <LSM303DLHC_GetValues+0x15a>
	case LSM303DLHC_FULLSCALE_4G:
		sensitivity_ACC = LSM303DLHC_ACC_SENSITIVITY_4G;
 800178c:	2302      	movs	r3, #2
 800178e:	77bb      	strb	r3, [r7, #30]
		break;
 8001790:	e005      	b.n	800179e <LSM303DLHC_GetValues+0x15a>
	case LSM303DLHC_FULLSCALE_8G:
		sensitivity_ACC = LSM303DLHC_ACC_SENSITIVITY_8G;
 8001792:	2304      	movs	r3, #4
 8001794:	77bb      	strb	r3, [r7, #30]
		break;
 8001796:	e002      	b.n	800179e <LSM303DLHC_GetValues+0x15a>
	case LSM303DLHC_FULLSCALE_16G:
		sensitivity_ACC = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001798:	230c      	movs	r3, #12
 800179a:	77bb      	strb	r3, [r7, #30]
		break;
 800179c:	bf00      	nop
	}

	acc->X = (float) (pnRawData[0] * sensitivity_ACC) / (float) INT16_MAX;
 800179e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017a2:	461a      	mov	r2, r3
 80017a4:	7fbb      	ldrb	r3, [r7, #30]
 80017a6:	fb03 f302 	mul.w	r3, r3, r2
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b2:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800196c <LSM303DLHC_GetValues+0x328>
 80017b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	edc3 7a00 	vstr	s15, [r3]
	acc->Y = (float) (pnRawData[1] * sensitivity_ACC) / (float) INT16_MAX;
 80017c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017c4:	461a      	mov	r2, r3
 80017c6:	7fbb      	ldrb	r3, [r7, #30]
 80017c8:	fb03 f302 	mul.w	r3, r3, r2
 80017cc:	ee07 3a90 	vmov	s15, r3
 80017d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d4:	eddf 6a65 	vldr	s13, [pc, #404]	; 800196c <LSM303DLHC_GetValues+0x328>
 80017d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	edc3 7a01 	vstr	s15, [r3, #4]
	acc->Z = (float) (pnRawData[2] * sensitivity_ACC) / (float) INT16_MAX;
 80017e2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017e6:	461a      	mov	r2, r3
 80017e8:	7fbb      	ldrb	r3, [r7, #30]
 80017ea:	fb03 f302 	mul.w	r3, r3, r2
 80017ee:	ee07 3a90 	vmov	s15, r3
 80017f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f6:	eddf 6a5d 	vldr	s13, [pc, #372]	; 800196c <LSM303DLHC_GetValues+0x328>
 80017fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	edc3 7a02 	vstr	s15, [r3, #8]

	buffer[0] = LSM303DLHC_ReadByte(MAG_I2C_ADDRESS, LSM303DLHC_OUT_X_L_M);
 8001804:	2104      	movs	r1, #4
 8001806:	203c      	movs	r0, #60	; 0x3c
 8001808:	f000 f8d0 	bl	80019ac <LSM303DLHC_ReadByte>
 800180c:	4603      	mov	r3, r0
 800180e:	733b      	strb	r3, [r7, #12]
	buffer[1] = LSM303DLHC_ReadByte(MAG_I2C_ADDRESS, LSM303DLHC_OUT_X_H_M);
 8001810:	2103      	movs	r1, #3
 8001812:	203c      	movs	r0, #60	; 0x3c
 8001814:	f000 f8ca 	bl	80019ac <LSM303DLHC_ReadByte>
 8001818:	4603      	mov	r3, r0
 800181a:	737b      	strb	r3, [r7, #13]
	buffer[2] = LSM303DLHC_ReadByte(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_M);
 800181c:	2108      	movs	r1, #8
 800181e:	203c      	movs	r0, #60	; 0x3c
 8001820:	f000 f8c4 	bl	80019ac <LSM303DLHC_ReadByte>
 8001824:	4603      	mov	r3, r0
 8001826:	73bb      	strb	r3, [r7, #14]
	buffer[3] = LSM303DLHC_ReadByte(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_M);
 8001828:	2107      	movs	r1, #7
 800182a:	203c      	movs	r0, #60	; 0x3c
 800182c:	f000 f8be 	bl	80019ac <LSM303DLHC_ReadByte>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]
	buffer[4] = LSM303DLHC_ReadByte(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_M);
 8001834:	2106      	movs	r1, #6
 8001836:	203c      	movs	r0, #60	; 0x3c
 8001838:	f000 f8b8 	bl	80019ac <LSM303DLHC_ReadByte>
 800183c:	4603      	mov	r3, r0
 800183e:	743b      	strb	r3, [r7, #16]
	buffer[5] = LSM303DLHC_ReadByte(MAG_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_M);
 8001840:	2105      	movs	r1, #5
 8001842:	203c      	movs	r0, #60	; 0x3c
 8001844:	f000 f8b2 	bl	80019ac <LSM303DLHC_ReadByte>
 8001848:	4603      	mov	r3, r0
 800184a:	747b      	strb	r3, [r7, #17]

	for (i = 0; i < 3; i++) {
 800184c:	2300      	movs	r3, #0
 800184e:	77fb      	strb	r3, [r7, #31]
 8001850:	e01e      	b.n	8001890 <LSM303DLHC_GetValues+0x24c>
		pnRawData[i] = ((int16_t) ((uint16_t) buffer[2 * i + 1] << 8)
 8001852:	7ffb      	ldrb	r3, [r7, #31]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	3301      	adds	r3, #1
 8001858:	f107 0220 	add.w	r2, r7, #32
 800185c:	4413      	add	r3, r2
 800185e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	b29a      	uxth	r2, r3
				+ buffer[2 * i]);
 8001866:	7ffb      	ldrb	r3, [r7, #31]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	f107 0120 	add.w	r1, r7, #32
 800186e:	440b      	add	r3, r1
 8001870:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001874:	b29b      	uxth	r3, r3
 8001876:	4413      	add	r3, r2
 8001878:	b29a      	uxth	r2, r3
		pnRawData[i] = ((int16_t) ((uint16_t) buffer[2 * i + 1] << 8)
 800187a:	7ffb      	ldrb	r3, [r7, #31]
				+ buffer[2 * i]);
 800187c:	b212      	sxth	r2, r2
		pnRawData[i] = ((int16_t) ((uint16_t) buffer[2 * i + 1] << 8)
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	f107 0120 	add.w	r1, r7, #32
 8001884:	440b      	add	r3, r1
 8001886:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for (i = 0; i < 3; i++) {
 800188a:	7ffb      	ldrb	r3, [r7, #31]
 800188c:	3301      	adds	r3, #1
 800188e:	77fb      	strb	r3, [r7, #31]
 8001890:	7ffb      	ldrb	r3, [r7, #31]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d9dd      	bls.n	8001852 <LSM303DLHC_GetValues+0x20e>
	}

	ctrlmag = LSM303DLHC_ReadByte(MAG_I2C_ADDRESS, LSM303DLHC_CRB_REG_M);
 8001896:	2101      	movs	r1, #1
 8001898:	203c      	movs	r0, #60	; 0x3c
 800189a:	f000 f887 	bl	80019ac <LSM303DLHC_ReadByte>
 800189e:	4603      	mov	r3, r0
 80018a0:	76fb      	strb	r3, [r7, #27]

	switch (ctrlmag & LSM303DLHC_FS_8_1_GA) {
 80018a2:	7efb      	ldrb	r3, [r7, #27]
 80018a4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80018a8:	2be0      	cmp	r3, #224	; 0xe0
 80018aa:	d022      	beq.n	80018f2 <LSM303DLHC_GetValues+0x2ae>
 80018ac:	2be0      	cmp	r3, #224	; 0xe0
 80018ae:	dc25      	bgt.n	80018fc <LSM303DLHC_GetValues+0x2b8>
 80018b0:	2bc0      	cmp	r3, #192	; 0xc0
 80018b2:	d019      	beq.n	80018e8 <LSM303DLHC_GetValues+0x2a4>
 80018b4:	2bc0      	cmp	r3, #192	; 0xc0
 80018b6:	dc21      	bgt.n	80018fc <LSM303DLHC_GetValues+0x2b8>
 80018b8:	2b80      	cmp	r3, #128	; 0x80
 80018ba:	d010      	beq.n	80018de <LSM303DLHC_GetValues+0x29a>
 80018bc:	2b80      	cmp	r3, #128	; 0x80
 80018be:	dc1d      	bgt.n	80018fc <LSM303DLHC_GetValues+0x2b8>
 80018c0:	2b20      	cmp	r3, #32
 80018c2:	d002      	beq.n	80018ca <LSM303DLHC_GetValues+0x286>
 80018c4:	2b60      	cmp	r3, #96	; 0x60
 80018c6:	d005      	beq.n	80018d4 <LSM303DLHC_GetValues+0x290>
 80018c8:	e018      	b.n	80018fc <LSM303DLHC_GetValues+0x2b8>
	case LSM303DLHC_FS_1_3_GA:
		sensitivity_MAG_XY = LSM303DLHC_M_SENSITIVITY_XY_1_3Ga;
 80018ca:	234c      	movs	r3, #76	; 0x4c
 80018cc:	777b      	strb	r3, [r7, #29]
		sensitivity_MAG_Z = LSM303DLHC_M_SENSITIVITY_Z_1_3Ga;
 80018ce:	23d4      	movs	r3, #212	; 0xd4
 80018d0:	773b      	strb	r3, [r7, #28]
		break;
 80018d2:	e013      	b.n	80018fc <LSM303DLHC_GetValues+0x2b8>
	case LSM303DLHC_FS_2_5_GA:
		sensitivity_MAG_XY = LSM303DLHC_M_SENSITIVITY_XY_2_5Ga;
 80018d4:	239e      	movs	r3, #158	; 0x9e
 80018d6:	777b      	strb	r3, [r7, #29]
		sensitivity_MAG_Z = LSM303DLHC_M_SENSITIVITY_Z_2_5Ga;
 80018d8:	2358      	movs	r3, #88	; 0x58
 80018da:	773b      	strb	r3, [r7, #28]
		break;
 80018dc:	e00e      	b.n	80018fc <LSM303DLHC_GetValues+0x2b8>
	case LSM303DLHC_FS_4_0_GA:
		sensitivity_MAG_XY = LSM303DLHC_M_SENSITIVITY_XY_4Ga;
 80018de:	23c2      	movs	r3, #194	; 0xc2
 80018e0:	777b      	strb	r3, [r7, #29]
		sensitivity_MAG_Z = LSM303DLHC_M_SENSITIVITY_Z_4Ga;
 80018e2:	2390      	movs	r3, #144	; 0x90
 80018e4:	773b      	strb	r3, [r7, #28]
		break;
 80018e6:	e009      	b.n	80018fc <LSM303DLHC_GetValues+0x2b8>
	case LSM303DLHC_FS_5_6_GA:
		sensitivity_MAG_XY = LSM303DLHC_M_SENSITIVITY_XY_5_6Ga;
 80018e8:	234a      	movs	r3, #74	; 0x4a
 80018ea:	777b      	strb	r3, [r7, #29]
		sensitivity_MAG_Z = LSM303DLHC_M_SENSITIVITY_Z_5_6Ga;
 80018ec:	2327      	movs	r3, #39	; 0x27
 80018ee:	773b      	strb	r3, [r7, #28]
		break;
 80018f0:	e004      	b.n	80018fc <LSM303DLHC_GetValues+0x2b8>
	case LSM303DLHC_FS_8_1_GA:
		sensitivity_MAG_XY = LSM303DLHC_M_SENSITIVITY_XY_8_1Ga;
 80018f2:	23e6      	movs	r3, #230	; 0xe6
 80018f4:	777b      	strb	r3, [r7, #29]
		sensitivity_MAG_Z = LSM303DLHC_M_SENSITIVITY_Z_8_1Ga;
 80018f6:	23cd      	movs	r3, #205	; 0xcd
 80018f8:	773b      	strb	r3, [r7, #28]
		break;
 80018fa:	bf00      	nop
	}

	mag->X = (float) (pnRawData[0] * sensitivity_MAG_XY) / (float) INT16_MAX;
 80018fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001900:	461a      	mov	r2, r3
 8001902:	7f7b      	ldrb	r3, [r7, #29]
 8001904:	fb03 f302 	mul.w	r3, r3, r2
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001910:	eddf 6a16 	vldr	s13, [pc, #88]	; 800196c <LSM303DLHC_GetValues+0x328>
 8001914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	edc3 7a00 	vstr	s15, [r3]
	mag->Y = (float) (pnRawData[1] * sensitivity_MAG_XY) / (float) INT16_MAX;
 800191e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001922:	461a      	mov	r2, r3
 8001924:	7f7b      	ldrb	r3, [r7, #29]
 8001926:	fb03 f302 	mul.w	r3, r3, r2
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001932:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800196c <LSM303DLHC_GetValues+0x328>
 8001936:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	edc3 7a01 	vstr	s15, [r3, #4]
	mag->Z = (float) (pnRawData[2] * sensitivity_MAG_Z) / (float) INT16_MAX;
 8001940:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001944:	461a      	mov	r2, r3
 8001946:	7f3b      	ldrb	r3, [r7, #28]
 8001948:	fb03 f302 	mul.w	r3, r3, r2
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001954:	eddf 6a05 	vldr	s13, [pc, #20]	; 800196c <LSM303DLHC_GetValues+0x328>
 8001958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001962:	bf00      	nop
 8001964:	3720      	adds	r7, #32
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	46fffe00 	.word	0x46fffe00

08001970 <LSM303DLHC_Write>:
		HAL_I2C_Mem_Read(_i2c, MAG_I2C_ADDRESS, reg, 1, read, NumByteToWrite,
				100);

}

static void LSM303DLHC_Write(uint16_t dev, uint8_t reg, uint8_t read) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af04      	add	r7, sp, #16
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
 800197a:	460b      	mov	r3, r1
 800197c:	717b      	strb	r3, [r7, #5]
 800197e:	4613      	mov	r3, r2
 8001980:	713b      	strb	r3, [r7, #4]

	HAL_I2C_Mem_Write(_i2c, dev, reg, 1, &read, 1, 100);
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <LSM303DLHC_Write+0x38>)
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	797b      	ldrb	r3, [r7, #5]
 8001988:	b29a      	uxth	r2, r3
 800198a:	88f9      	ldrh	r1, [r7, #6]
 800198c:	2364      	movs	r3, #100	; 0x64
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	2301      	movs	r3, #1
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2301      	movs	r3, #1
 800199a:	f001 f963 	bl	8002c64 <HAL_I2C_Mem_Write>

}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000a08 	.word	0x20000a08

080019ac <LSM303DLHC_ReadByte>:

static uint8_t LSM303DLHC_ReadByte(uint16_t dev, uint8_t reg) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af04      	add	r7, sp, #16
 80019b2:	4603      	mov	r3, r0
 80019b4:	460a      	mov	r2, r1
 80019b6:	80fb      	strh	r3, [r7, #6]
 80019b8:	4613      	mov	r3, r2
 80019ba:	717b      	strb	r3, [r7, #5]

	uint8_t settings = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Read(_i2c, dev, reg, 1, &settings, 1, 100);
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <LSM303DLHC_ReadByte+0x3c>)
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	797b      	ldrb	r3, [r7, #5]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	88f9      	ldrh	r1, [r7, #6]
 80019ca:	2364      	movs	r3, #100	; 0x64
 80019cc:	9302      	str	r3, [sp, #8]
 80019ce:	2301      	movs	r3, #1
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	f107 030f 	add.w	r3, r7, #15
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2301      	movs	r3, #1
 80019da:	f001 fa57 	bl	8002e8c <HAL_I2C_Mem_Read>

	return settings;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000a08 	.word	0x20000a08

080019ec <MX_GPIO_Init>:
        * EXTI
     PA11   ------> USB_DM
     PA12   ------> USB_DP
*/
void MX_GPIO_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a02:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <MX_GPIO_Init+0x118>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	4a3f      	ldr	r2, [pc, #252]	; (8001b04 <MX_GPIO_Init+0x118>)
 8001a08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a0c:	6153      	str	r3, [r2, #20]
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <MX_GPIO_Init+0x118>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	4b3a      	ldr	r3, [pc, #232]	; (8001b04 <MX_GPIO_Init+0x118>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	4a39      	ldr	r2, [pc, #228]	; (8001b04 <MX_GPIO_Init+0x118>)
 8001a20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a24:	6153      	str	r3, [r2, #20]
 8001a26:	4b37      	ldr	r3, [pc, #220]	; (8001b04 <MX_GPIO_Init+0x118>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a32:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <MX_GPIO_Init+0x118>)
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	4a33      	ldr	r2, [pc, #204]	; (8001b04 <MX_GPIO_Init+0x118>)
 8001a38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a3c:	6153      	str	r3, [r2, #20]
 8001a3e:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <MX_GPIO_Init+0x118>)
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	4b2e      	ldr	r3, [pc, #184]	; (8001b04 <MX_GPIO_Init+0x118>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	4a2d      	ldr	r2, [pc, #180]	; (8001b04 <MX_GPIO_Init+0x118>)
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	6153      	str	r3, [r2, #20]
 8001a56:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <MX_GPIO_Init+0x118>)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <MX_GPIO_Init+0x118>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	4a27      	ldr	r2, [pc, #156]	; (8001b04 <MX_GPIO_Init+0x118>)
 8001a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a6c:	6153      	str	r3, [r2, #20]
 8001a6e:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <MX_GPIO_Init+0x118>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001a80:	4821      	ldr	r0, [pc, #132]	; (8001b08 <MX_GPIO_Init+0x11c>)
 8001a82:	f001 f847 	bl	8002b14 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001a86:	2337      	movs	r3, #55	; 0x37
 8001a88:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <MX_GPIO_Init+0x120>)
 8001a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	481b      	ldr	r0, [pc, #108]	; (8001b08 <MX_GPIO_Init+0x11c>)
 8001a9a:	f000 fec1 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001a9e:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001aa2:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4814      	ldr	r0, [pc, #80]	; (8001b08 <MX_GPIO_Init+0x11c>)
 8001ab8:	f000 feb2 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001abc:	2301      	movs	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad2:	f000 fea5 	bl	8002820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001ad6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001ae8:	230e      	movs	r3, #14
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af6:	f000 fe93 	bl	8002820 <HAL_GPIO_Init>

}
 8001afa:	bf00      	nop
 8001afc:	3728      	adds	r7, #40	; 0x28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	48001000 	.word	0x48001000
 8001b0c:	10120000 	.word	0x10120000

08001b10 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b16:	4a1c      	ldr	r2, [pc, #112]	; (8001b88 <MX_I2C1_Init+0x78>)
 8001b18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <MX_I2C1_Init+0x7c>)
 8001b1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b4a:	480e      	ldr	r0, [pc, #56]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b4c:	f000 fffa 	bl	8002b44 <HAL_I2C_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b56:	f000 fa11 	bl	8001f7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4809      	ldr	r0, [pc, #36]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b5e:	f001 fccb 	bl	80034f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b68:	f000 fa08 	bl	8001f7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_I2C1_Init+0x74>)
 8001b70:	f001 fd0d 	bl	800358e <HAL_I2CEx_ConfigDigitalFilter>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b7a:	f000 f9ff 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000a48 	.word	0x20000a48
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	2000090e 	.word	0x2000090e

08001b90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_I2C_MspInit+0x7c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d127      	bne.n	8001c02 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_I2C_MspInit+0x80>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	4a16      	ldr	r2, [pc, #88]	; (8001c10 <HAL_I2C_MspInit+0x80>)
 8001bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bbc:	6153      	str	r3, [r2, #20]
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <HAL_I2C_MspInit+0x80>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001bca:	23c0      	movs	r3, #192	; 0xc0
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bce:	2312      	movs	r3, #18
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	480b      	ldr	r0, [pc, #44]	; (8001c14 <HAL_I2C_MspInit+0x84>)
 8001be6:	f000 fe1b 	bl	8002820 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_I2C_MspInit+0x80>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a08      	ldr	r2, [pc, #32]	; (8001c10 <HAL_I2C_MspInit+0x80>)
 8001bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf4:	61d3      	str	r3, [r2, #28]
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_I2C_MspInit+0x80>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	; 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40005400 	.word	0x40005400
 8001c10:	40021000 	.word	0x40021000
 8001c14:	48000400 	.word	0x48000400

08001c18 <PrintData>:
LSM303DLHC_ACC_Values acc, accBias;
LSM303DLHC_MAG_Values mag, magBias;
uint32_t dt = 0;

void PrintData(L3GD20_Values *gyroBias,
		LSM303DLHC_ACC_Values *acc, LSM303DLHC_MAG_Values *mag) {
 8001c18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c1c:	b0cc      	sub	sp, #304	; 0x130
 8001c1e:	af06      	add	r7, sp, #24
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	6018      	str	r0, [r3, #0]
 8001c26:	f107 0308 	add.w	r3, r7, #8
 8001c2a:	6019      	str	r1, [r3, #0]
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	601a      	str	r2, [r3, #0]
	char buff[256];

	int i = snprintf(buff, 120, "%.2f\t%.2f\t%.2f\t", gyroBias->X, gyroBias->Y,
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc85 	bl	8000548 <__aeabi_f2d>
 8001c3e:	4604      	mov	r4, r0
 8001c40:	460d      	mov	r5, r1
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fc7c 	bl	8000548 <__aeabi_f2d>
 8001c50:	4680      	mov	r8, r0
 8001c52:	4689      	mov	r9, r1
			gyroBias->Z);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
	int i = snprintf(buff, 120, "%.2f\t%.2f\t%.2f\t", gyroBias->X, gyroBias->Y,
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc73 	bl	8000548 <__aeabi_f2d>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	f107 0014 	add.w	r0, r7, #20
 8001c6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c6e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c72:	e9cd 4500 	strd	r4, r5, [sp]
 8001c76:	4a3b      	ldr	r2, [pc, #236]	; (8001d64 <PrintData+0x14c>)
 8001c78:	2178      	movs	r1, #120	; 0x78
 8001c7a:	f004 faab 	bl	80061d4 <snprintf>
 8001c7e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	HAL_UART_Transmit(&huart2, (uint8_t*) &buff, i, 100);
 8001c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	f107 0114 	add.w	r1, r7, #20
 8001c8c:	2364      	movs	r3, #100	; 0x64
 8001c8e:	4836      	ldr	r0, [pc, #216]	; (8001d68 <PrintData+0x150>)
 8001c90:	f003 fc20 	bl	80054d4 <HAL_UART_Transmit>

	i = snprintf(buff, 120, "%.4f\t%.4f\t%.4f\t", acc->X, acc->Y, acc->Z);
 8001c94:	f107 0308 	add.w	r3, r7, #8
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc53 	bl	8000548 <__aeabi_f2d>
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	460d      	mov	r5, r1
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fc4a 	bl	8000548 <__aeabi_f2d>
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	4689      	mov	r9, r1
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fc41 	bl	8000548 <__aeabi_f2d>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	f107 0014 	add.w	r0, r7, #20
 8001cce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001cd2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001cd6:	e9cd 4500 	strd	r4, r5, [sp]
 8001cda:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <PrintData+0x154>)
 8001cdc:	2178      	movs	r1, #120	; 0x78
 8001cde:	f004 fa79 	bl	80061d4 <snprintf>
 8001ce2:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	HAL_UART_Transmit(&huart2, (uint8_t*) &buff, i, 100);
 8001ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	f107 0114 	add.w	r1, r7, #20
 8001cf0:	2364      	movs	r3, #100	; 0x64
 8001cf2:	481d      	ldr	r0, [pc, #116]	; (8001d68 <PrintData+0x150>)
 8001cf4:	f003 fbee 	bl	80054d4 <HAL_UART_Transmit>

	i = snprintf(buff, 120, "%.4f\t%.4f\t%.4f\r\n", mag->X, mag->Y, mag->Z);
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fc22 	bl	8000548 <__aeabi_f2d>
 8001d04:	4604      	mov	r4, r0
 8001d06:	460d      	mov	r5, r1
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc1a 	bl	8000548 <__aeabi_f2d>
 8001d14:	4680      	mov	r8, r0
 8001d16:	4689      	mov	r9, r1
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fc12 	bl	8000548 <__aeabi_f2d>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	f107 0014 	add.w	r0, r7, #20
 8001d2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d30:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d34:	e9cd 4500 	strd	r4, r5, [sp]
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <PrintData+0x158>)
 8001d3a:	2178      	movs	r1, #120	; 0x78
 8001d3c:	f004 fa4a 	bl	80061d4 <snprintf>
 8001d40:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	HAL_UART_Transmit(&huart2, (uint8_t*) &buff, i, 100);
 8001d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	f107 0114 	add.w	r1, r7, #20
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	4805      	ldr	r0, [pc, #20]	; (8001d68 <PrintData+0x150>)
 8001d52:	f003 fbbf 	bl	80054d4 <HAL_UART_Transmit>
}
 8001d56:	bf00      	nop
 8001d58:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d62:	bf00      	nop
 8001d64:	0800ac08 	.word	0x0800ac08
 8001d68:	20000b40 	.word	0x20000b40
 8001d6c:	0800ac18 	.word	0x0800ac18
 8001d70:	0800ac28 	.word	0x0800ac28

08001d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7a:	f000 fb63 	bl	8002444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d7e:	f000 f89b 	bl	8001eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d82:	f7ff fe33 	bl	80019ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d86:	f7ff fec3 	bl	8001b10 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d8a:	f000 f8fd 	bl	8001f88 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001d8e:	f000 fab5 	bl	80022fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8001d92:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <main+0x118>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b3c      	ldr	r3, [pc, #240]	; (8001e8c <main+0x118>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0210 	orr.w	r2, r2, #16
 8001da0:	601a      	str	r2, [r3, #0]

  L3GD20_Sensitivity sensitivity = L3DS20_SENSITIVITY_500DPS;
 8001da2:	2301      	movs	r3, #1
 8001da4:	71fb      	strb	r3, [r7, #7]
  L3GD20_Init(sensitivity, &hspi1);
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	4939      	ldr	r1, [pc, #228]	; (8001e90 <main+0x11c>)
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fa3c 	bl	8001228 <L3GD20_Init>
  L3GD20_Reboot();
 8001db0:	f7ff fa8a 	bl	80012c8 <L3GD20_Reboot>

  uint8_t ID = L3GD20_ReadID();
 8001db4:	f7ff faa0 	bl	80012f8 <L3GD20_ReadID>
 8001db8:	4603      	mov	r3, r0
 8001dba:	71bb      	strb	r3, [r7, #6]

  if (ID != 0xD4) {
 8001dbc:	79bb      	ldrb	r3, [r7, #6]
 8001dbe:	2bd4      	cmp	r3, #212	; 0xd4
 8001dc0:	d005      	beq.n	8001dce <main+0x5a>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dc8:	4832      	ldr	r0, [pc, #200]	; (8001e94 <main+0x120>)
 8001dca:	f000 fea3 	bl	8002b14 <HAL_GPIO_WritePin>
  }


  LSM303DLHC_Init(&hi2c1);
 8001dce:	4832      	ldr	r0, [pc, #200]	; (8001e98 <main+0x124>)
 8001dd0:	f7ff fbe2 	bl	8001598 <LSM303DLHC_Init>
  LSM303DLHC_Reboot();
 8001dd4:	f7ff fc1e 	bl	8001614 <LSM303DLHC_Reboot>

  BiasRemover_Init(100);
 8001dd8:	2064      	movs	r0, #100	; 0x64
 8001dda:	f7ff f861 	bl	8000ea0 <BiasRemover_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (HAL_GetTick() - dt > 20) {
 8001dde:	f000 fb8b 	bl	80024f8 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b2d      	ldr	r3, [pc, #180]	; (8001e9c <main+0x128>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b14      	cmp	r3, #20
 8001dec:	d9f7      	bls.n	8001dde <main+0x6a>
		  dt = HAL_GetTick();
 8001dee:	f000 fb83 	bl	80024f8 <HAL_GetTick>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a29      	ldr	r2, [pc, #164]	; (8001e9c <main+0x128>)
 8001df6:	6013      	str	r3, [r2, #0]
		  L3GD20_ReadValues(&gyro);
 8001df8:	4829      	ldr	r0, [pc, #164]	; (8001ea0 <main+0x12c>)
 8001dfa:	f7ff fa91 	bl	8001320 <L3GD20_ReadValues>
		  LSM303DLHC_GetValues(&acc, &mag);
 8001dfe:	4929      	ldr	r1, [pc, #164]	; (8001ea4 <main+0x130>)
 8001e00:	4829      	ldr	r0, [pc, #164]	; (8001ea8 <main+0x134>)
 8001e02:	f7ff fc1f 	bl	8001644 <LSM303DLHC_GetValues>

		  if (!BiasRemover_Finished())
 8001e06:	f7ff f885 	bl	8000f14 <BiasRemover_Finished>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f083 0301 	eor.w	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d029      	beq.n	8001e6a <main+0xf6>
		  {
			  BiasRemover_Get(acc, mag, gyro);
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <main+0x12c>)
 8001e18:	edd3 3a00 	vldr	s7, [r3]
 8001e1c:	ed93 4a01 	vldr	s8, [r3, #4]
 8001e20:	edd3 4a02 	vldr	s9, [r3, #8]
 8001e24:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <main+0x130>)
 8001e26:	ed93 5a00 	vldr	s10, [r3]
 8001e2a:	edd3 5a01 	vldr	s11, [r3, #4]
 8001e2e:	ed93 6a02 	vldr	s12, [r3, #8]
 8001e32:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <main+0x134>)
 8001e34:	edd3 6a00 	vldr	s13, [r3]
 8001e38:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e40:	eeb0 3a63 	vmov.f32	s6, s7
 8001e44:	eef0 3a44 	vmov.f32	s7, s8
 8001e48:	eeb0 4a64 	vmov.f32	s8, s9
 8001e4c:	eef0 1a45 	vmov.f32	s3, s10
 8001e50:	eeb0 2a65 	vmov.f32	s4, s11
 8001e54:	eef0 2a46 	vmov.f32	s5, s12
 8001e58:	eeb0 0a66 	vmov.f32	s0, s13
 8001e5c:	eef0 0a47 	vmov.f32	s1, s14
 8001e60:	eeb0 1a67 	vmov.f32	s2, s15
 8001e64:	f7ff f86a 	bl	8000f3c <BiasRemover_Get>
 8001e68:	e7b9      	b.n	8001dde <main+0x6a>
		  }
		  else
		  {
			  BiasRemover_Remove(&acc, &mag, &gyro);
 8001e6a:	4a0d      	ldr	r2, [pc, #52]	; (8001ea0 <main+0x12c>)
 8001e6c:	490d      	ldr	r1, [pc, #52]	; (8001ea4 <main+0x130>)
 8001e6e:	480e      	ldr	r0, [pc, #56]	; (8001ea8 <main+0x134>)
 8001e70:	f7ff f942 	bl	80010f8 <BiasRemover_Remove>
			  BiasRemover_GetValues(&accBias, &magBias, &gyroBias);
 8001e74:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <main+0x138>)
 8001e76:	490e      	ldr	r1, [pc, #56]	; (8001eb0 <main+0x13c>)
 8001e78:	480e      	ldr	r0, [pc, #56]	; (8001eb4 <main+0x140>)
 8001e7a:	f7ff f9b3 	bl	80011e4 <BiasRemover_GetValues>
			  PrintData(&gyro, &acc, &mag);
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <main+0x130>)
 8001e80:	4909      	ldr	r1, [pc, #36]	; (8001ea8 <main+0x134>)
 8001e82:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <main+0x12c>)
 8001e84:	f7ff fec8 	bl	8001c18 <PrintData>
	  if (HAL_GetTick() - dt > 20) {
 8001e88:	e7a9      	b.n	8001dde <main+0x6a>
 8001e8a:	bf00      	nop
 8001e8c:	20000b40 	.word	0x20000b40
 8001e90:	20000adc 	.word	0x20000adc
 8001e94:	48001000 	.word	0x48001000
 8001e98:	20000a48 	.word	0x20000a48
 8001e9c:	20000a0c 	.word	0x20000a0c
 8001ea0:	20000aac 	.word	0x20000aac
 8001ea4:	20000ac4 	.word	0x20000ac4
 8001ea8:	20000a94 	.word	0x20000a94
 8001eac:	20000ab8 	.word	0x20000ab8
 8001eb0:	20000ad0 	.word	0x20000ad0
 8001eb4:	20000aa0 	.word	0x20000aa0

08001eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b09e      	sub	sp, #120	; 0x78
 8001ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ebe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ec2:	2228      	movs	r2, #40	; 0x28
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f004 f97c 	bl	80061c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ecc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001edc:	463b      	mov	r3, r7
 8001ede:	223c      	movs	r2, #60	; 0x3c
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f004 f96e 	bl	80061c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eec:	2301      	movs	r3, #1
 8001eee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001efc:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8001f00:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f06:	4618      	mov	r0, r3
 8001f08:	f001 fb8e 	bl	8003628 <HAL_RCC_OscConfig>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001f12:	f000 f833 	bl	8001f7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f16:	230f      	movs	r3, #15
 8001f18:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f30:	2101      	movs	r1, #1
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 fa80 	bl	8004438 <HAL_RCC_ClockConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001f3e:	f000 f81d 	bl	8001f7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001f42:	2322      	movs	r3, #34	; 0x22
 8001f44:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4618      	mov	r0, r3
 8001f52:	f002 fca7 	bl	80048a4 <HAL_RCCEx_PeriphCLKConfig>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001f5c:	f000 f80e 	bl	8001f7c <Error_Handler>
  }
}
 8001f60:	bf00      	nop
 8001f62:	3778      	adds	r7, #120	; 0x78
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f80:	b672      	cpsid	i
}
 8001f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <Error_Handler+0x8>
	...

08001f88 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001f8e:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <MX_SPI1_Init+0x78>)
 8001f90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f92:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001f94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f9a:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fa2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fa6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001faa:	2202      	movs	r2, #2
 8001fac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fbe:	2208      	movs	r2, #8
 8001fc0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fd6:	2207      	movs	r2, #7
 8001fd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fda:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_SPI1_Init+0x74>)
 8001fe8:	f002 fe0c 	bl	8004c04 <HAL_SPI_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ff2:	f7ff ffc3 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000adc 	.word	0x20000adc
 8002000:	40013000 	.word	0x40013000

08002004 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a17      	ldr	r2, [pc, #92]	; (8002080 <HAL_SPI_MspInit+0x7c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d128      	bne.n	8002078 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_SPI_MspInit+0x80>)
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	4a16      	ldr	r2, [pc, #88]	; (8002084 <HAL_SPI_MspInit+0x80>)
 800202c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002030:	6193      	str	r3, [r2, #24]
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_SPI_MspInit+0x80>)
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <HAL_SPI_MspInit+0x80>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	4a10      	ldr	r2, [pc, #64]	; (8002084 <HAL_SPI_MspInit+0x80>)
 8002044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002048:	6153      	str	r3, [r2, #20]
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_SPI_MspInit+0x80>)
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002056:	23e0      	movs	r3, #224	; 0xe0
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002066:	2305      	movs	r3, #5
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002074:	f000 fbd4 	bl	8002820 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002078:	bf00      	nop
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40013000 	.word	0x40013000
 8002084:	40021000 	.word	0x40021000

08002088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_MspInit+0x44>)
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <HAL_MspInit+0x44>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6193      	str	r3, [r2, #24]
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <HAL_MspInit+0x44>)
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_MspInit+0x44>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <HAL_MspInit+0x44>)
 80020ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b0:	61d3      	str	r3, [r2, #28]
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_MspInit+0x44>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020be:	2007      	movs	r0, #7
 80020c0:	f000 faf6 	bl	80026b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000

080020d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <NMI_Handler+0x4>

080020d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020da:	e7fe      	b.n	80020da <HardFault_Handler+0x4>

080020dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <MemManage_Handler+0x4>

080020e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <BusFault_Handler+0x4>

080020e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <UsageFault_Handler+0x4>

080020ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800211c:	f000 f9d8 	bl	80024d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}

08002124 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002128:	4807      	ldr	r0, [pc, #28]	; (8002148 <USART2_IRQHandler+0x24>)
 800212a:	f003 fa67 	bl	80055fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE) == SET)
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <USART2_IRQHandler+0x24>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b10      	cmp	r3, #16
 800213a:	d103      	bne.n	8002144 <USART2_IRQHandler+0x20>
  {
	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <USART2_IRQHandler+0x24>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2210      	movs	r2, #16
 8002142:	621a      	str	r2, [r3, #32]
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000b40 	.word	0x20000b40

0800214c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
	return 1;
 8002150:	2301      	movs	r3, #1
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_kill>:

int _kill(int pid, int sig)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002166:	f004 f803 	bl	8006170 <__errno>
 800216a:	4603      	mov	r3, r0
 800216c:	2216      	movs	r2, #22
 800216e:	601a      	str	r2, [r3, #0]
	return -1;
 8002170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <_exit>:

void _exit (int status)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ffe7 	bl	800215c <_kill>
	while (1) {}		/* Make sure we hang here */
 800218e:	e7fe      	b.n	800218e <_exit+0x12>

08002190 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	e00a      	b.n	80021b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021a2:	f3af 8000 	nop.w
 80021a6:	4601      	mov	r1, r0
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	60ba      	str	r2, [r7, #8]
 80021ae:	b2ca      	uxtb	r2, r1
 80021b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	3301      	adds	r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	dbf0      	blt.n	80021a2 <_read+0x12>
	}

return len;
 80021c0:	687b      	ldr	r3, [r7, #4]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	e009      	b.n	80021f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	60ba      	str	r2, [r7, #8]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	3301      	adds	r3, #1
 80021ee:	617b      	str	r3, [r7, #20]
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	dbf1      	blt.n	80021dc <_write+0x12>
	}
	return len;
 80021f8:	687b      	ldr	r3, [r7, #4]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <_close>:

int _close(int file)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
	return -1;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800222a:	605a      	str	r2, [r3, #4]
	return 0;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <_isatty>:

int _isatty(int file)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
	return 1;
 8002242:	2301      	movs	r3, #1
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
	return 0;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002274:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <_sbrk+0x5c>)
 8002276:	4b15      	ldr	r3, [pc, #84]	; (80022cc <_sbrk+0x60>)
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002280:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <_sbrk+0x64>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d102      	bne.n	800228e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <_sbrk+0x64>)
 800228a:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <_sbrk+0x68>)
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	429a      	cmp	r2, r3
 800229a:	d207      	bcs.n	80022ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800229c:	f003 ff68 	bl	8006170 <__errno>
 80022a0:	4603      	mov	r3, r0
 80022a2:	220c      	movs	r2, #12
 80022a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	e009      	b.n	80022c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <_sbrk+0x64>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <_sbrk+0x64>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <_sbrk+0x64>)
 80022bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022be:	68fb      	ldr	r3, [r7, #12]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	2000a000 	.word	0x2000a000
 80022cc:	00000400 	.word	0x00000400
 80022d0:	20000a10 	.word	0x20000a10
 80022d4:	20000bd8 	.word	0x20000bd8

080022d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <SystemInit+0x20>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e2:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <SystemInit+0x20>)
 80022e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002300:	4b14      	ldr	r3, [pc, #80]	; (8002354 <MX_USART2_UART_Init+0x58>)
 8002302:	4a15      	ldr	r2, [pc, #84]	; (8002358 <MX_USART2_UART_Init+0x5c>)
 8002304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002306:	4b13      	ldr	r3, [pc, #76]	; (8002354 <MX_USART2_UART_Init+0x58>)
 8002308:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800230c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <MX_USART2_UART_Init+0x58>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <MX_USART2_UART_Init+0x58>)
 8002316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800231a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800231c:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <MX_USART2_UART_Init+0x58>)
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <MX_USART2_UART_Init+0x58>)
 8002324:	220c      	movs	r2, #12
 8002326:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <MX_USART2_UART_Init+0x58>)
 800232a:	2200      	movs	r2, #0
 800232c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <MX_USART2_UART_Init+0x58>)
 8002330:	2200      	movs	r2, #0
 8002332:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002334:	4b07      	ldr	r3, [pc, #28]	; (8002354 <MX_USART2_UART_Init+0x58>)
 8002336:	2200      	movs	r2, #0
 8002338:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <MX_USART2_UART_Init+0x58>)
 800233c:	2200      	movs	r2, #0
 800233e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002340:	4804      	ldr	r0, [pc, #16]	; (8002354 <MX_USART2_UART_Init+0x58>)
 8002342:	f003 f879 	bl	8005438 <HAL_UART_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 800234c:	f7ff fe16 	bl	8001f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000b40 	.word	0x20000b40
 8002358:	40004400 	.word	0x40004400

0800235c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	; 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <HAL_UART_MspInit+0x8c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d130      	bne.n	80023e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800237e:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_UART_MspInit+0x90>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	4a1a      	ldr	r2, [pc, #104]	; (80023ec <HAL_UART_MspInit+0x90>)
 8002384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002388:	61d3      	str	r3, [r2, #28]
 800238a:	4b18      	ldr	r3, [pc, #96]	; (80023ec <HAL_UART_MspInit+0x90>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_UART_MspInit+0x90>)
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	4a14      	ldr	r2, [pc, #80]	; (80023ec <HAL_UART_MspInit+0x90>)
 800239c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a0:	6153      	str	r3, [r2, #20]
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_UART_MspInit+0x90>)
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023ae:	230c      	movs	r3, #12
 80023b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023be:	2307      	movs	r3, #7
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	4619      	mov	r1, r3
 80023c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023cc:	f000 fa28 	bl	8002820 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023d0:	2200      	movs	r2, #0
 80023d2:	2100      	movs	r1, #0
 80023d4:	2026      	movs	r0, #38	; 0x26
 80023d6:	f000 f976 	bl	80026c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023da:	2026      	movs	r0, #38	; 0x26
 80023dc:	f000 f98f 	bl	80026fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023e0:	bf00      	nop
 80023e2:	3728      	adds	r7, #40	; 0x28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40004400 	.word	0x40004400
 80023ec:	40021000 	.word	0x40021000

080023f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002428 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f4:	480d      	ldr	r0, [pc, #52]	; (800242c <LoopForever+0x6>)
  ldr r1, =_edata
 80023f6:	490e      	ldr	r1, [pc, #56]	; (8002430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023f8:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <LoopForever+0xe>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023fc:	e002      	b.n	8002404 <LoopCopyDataInit>

080023fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002402:	3304      	adds	r3, #4

08002404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002408:	d3f9      	bcc.n	80023fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240a:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <LoopForever+0x12>)
  ldr r4, =_ebss
 800240c:	4c0b      	ldr	r4, [pc, #44]	; (800243c <LoopForever+0x16>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002410:	e001      	b.n	8002416 <LoopFillZerobss>

08002412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002414:	3204      	adds	r2, #4

08002416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002418:	d3fb      	bcc.n	8002412 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800241a:	f7ff ff5d 	bl	80022d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800241e:	f003 fead 	bl	800617c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002422:	f7ff fca7 	bl	8001d74 <main>

08002426 <LoopForever>:

LoopForever:
    b LoopForever
 8002426:	e7fe      	b.n	8002426 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002428:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800242c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002430:	200009b8 	.word	0x200009b8
  ldr r2, =_sidata
 8002434:	0800b028 	.word	0x0800b028
  ldr r2, =_sbss
 8002438:	200009b8 	.word	0x200009b8
  ldr r4, =_ebss
 800243c:	20000bd8 	.word	0x20000bd8

08002440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002440:	e7fe      	b.n	8002440 <ADC1_2_IRQHandler>
	...

08002444 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <HAL_Init+0x28>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a07      	ldr	r2, [pc, #28]	; (800246c <HAL_Init+0x28>)
 800244e:	f043 0310 	orr.w	r3, r3, #16
 8002452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002454:	2003      	movs	r0, #3
 8002456:	f000 f92b 	bl	80026b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800245a:	2000      	movs	r0, #0
 800245c:	f000 f808 	bl	8002470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002460:	f7ff fe12 	bl	8002088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40022000 	.word	0x40022000

08002470 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002478:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_InitTick+0x54>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_InitTick+0x58>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4619      	mov	r1, r3
 8002482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002486:	fbb3 f3f1 	udiv	r3, r3, r1
 800248a:	fbb2 f3f3 	udiv	r3, r2, r3
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f943 	bl	800271a <HAL_SYSTICK_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e00e      	b.n	80024bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b0f      	cmp	r3, #15
 80024a2:	d80a      	bhi.n	80024ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a4:	2200      	movs	r2, #0
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f000 f90b 	bl	80026c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b0:	4a06      	ldr	r2, [pc, #24]	; (80024cc <HAL_InitTick+0x5c>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e000      	b.n	80024bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000000 	.word	0x20000000
 80024c8:	20000008 	.word	0x20000008
 80024cc:	20000004 	.word	0x20000004

080024d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_IncTick+0x20>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_IncTick+0x24>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <HAL_IncTick+0x24>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000008 	.word	0x20000008
 80024f4:	20000bc4 	.word	0x20000bc4

080024f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <HAL_GetTick+0x14>)
 80024fe:	681b      	ldr	r3, [r3, #0]
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000bc4 	.word	0x20000bc4

08002510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800252c:	4013      	ands	r3, r2
 800252e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800253c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002542:	4a04      	ldr	r2, [pc, #16]	; (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	60d3      	str	r3, [r2, #12]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <__NVIC_GetPriorityGrouping+0x18>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 0307 	and.w	r3, r3, #7
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	2b00      	cmp	r3, #0
 8002584:	db0b      	blt.n	800259e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	4907      	ldr	r1, [pc, #28]	; (80025ac <__NVIC_EnableIRQ+0x38>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	2001      	movs	r0, #1
 8002596:	fa00 f202 	lsl.w	r2, r0, r2
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000e100 	.word	0xe000e100

080025b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	6039      	str	r1, [r7, #0]
 80025ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	db0a      	blt.n	80025da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	490c      	ldr	r1, [pc, #48]	; (80025fc <__NVIC_SetPriority+0x4c>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	0112      	lsls	r2, r2, #4
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	440b      	add	r3, r1
 80025d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d8:	e00a      	b.n	80025f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4908      	ldr	r1, [pc, #32]	; (8002600 <__NVIC_SetPriority+0x50>)
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	3b04      	subs	r3, #4
 80025e8:	0112      	lsls	r2, r2, #4
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	440b      	add	r3, r1
 80025ee:	761a      	strb	r2, [r3, #24]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000e100 	.word	0xe000e100
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	; 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f1c3 0307 	rsb	r3, r3, #7
 800261e:	2b04      	cmp	r3, #4
 8002620:	bf28      	it	cs
 8002622:	2304      	movcs	r3, #4
 8002624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3304      	adds	r3, #4
 800262a:	2b06      	cmp	r3, #6
 800262c:	d902      	bls.n	8002634 <NVIC_EncodePriority+0x30>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3b03      	subs	r3, #3
 8002632:	e000      	b.n	8002636 <NVIC_EncodePriority+0x32>
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	f04f 32ff 	mov.w	r2, #4294967295
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	401a      	ands	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800264c:	f04f 31ff 	mov.w	r1, #4294967295
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	43d9      	mvns	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	4313      	orrs	r3, r2
         );
}
 800265e:	4618      	mov	r0, r3
 8002660:	3724      	adds	r7, #36	; 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800267c:	d301      	bcc.n	8002682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800267e:	2301      	movs	r3, #1
 8002680:	e00f      	b.n	80026a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002682:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <SysTick_Config+0x40>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268a:	210f      	movs	r1, #15
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f7ff ff8e 	bl	80025b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <SysTick_Config+0x40>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269a:	4b04      	ldr	r3, [pc, #16]	; (80026ac <SysTick_Config+0x40>)
 800269c:	2207      	movs	r2, #7
 800269e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	e000e010 	.word	0xe000e010

080026b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ff29 	bl	8002510 <__NVIC_SetPriorityGrouping>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d8:	f7ff ff3e 	bl	8002558 <__NVIC_GetPriorityGrouping>
 80026dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	6978      	ldr	r0, [r7, #20]
 80026e4:	f7ff ff8e 	bl	8002604 <NVIC_EncodePriority>
 80026e8:	4602      	mov	r2, r0
 80026ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff5d 	bl	80025b0 <__NVIC_SetPriority>
}
 80026f6:	bf00      	nop
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff31 	bl	8002574 <__NVIC_EnableIRQ>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff ffa2 	bl	800266c <SysTick_Config>
 8002728:	4603      	mov	r3, r0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002740:	2b02      	cmp	r3, #2
 8002742:	d008      	beq.n	8002756 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2204      	movs	r2, #4
 8002748:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e020      	b.n	8002798 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 020e 	bic.w	r2, r2, #14
 8002764:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f202 	lsl.w	r2, r1, r2
 8002784:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d005      	beq.n	80027c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2204      	movs	r2, #4
 80027be:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e027      	b.n	8002816 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 020e 	bic.w	r2, r2, #14
 80027d4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f202 	lsl.w	r2, r1, r2
 80027f4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
    } 
  }
  return status;
 8002816:	7bfb      	ldrb	r3, [r7, #15]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282e:	e154      	b.n	8002ada <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2101      	movs	r1, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	4013      	ands	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8146 	beq.w	8002ad4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d00b      	beq.n	8002868 <HAL_GPIO_Init+0x48>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d007      	beq.n	8002868 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800285c:	2b11      	cmp	r3, #17
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b12      	cmp	r3, #18
 8002866:	d130      	bne.n	80028ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800289e:	2201      	movs	r2, #1
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f003 0201 	and.w	r2, r3, #1
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0xea>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b12      	cmp	r3, #18
 8002908:	d123      	bne.n	8002952 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	08da      	lsrs	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3208      	adds	r2, #8
 8002912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	220f      	movs	r2, #15
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	08da      	lsrs	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3208      	adds	r2, #8
 800294c:	6939      	ldr	r1, [r7, #16]
 800294e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	2203      	movs	r2, #3
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0203 	and.w	r2, r3, #3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80a0 	beq.w	8002ad4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002994:	4b58      	ldr	r3, [pc, #352]	; (8002af8 <HAL_GPIO_Init+0x2d8>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	4a57      	ldr	r2, [pc, #348]	; (8002af8 <HAL_GPIO_Init+0x2d8>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6193      	str	r3, [r2, #24]
 80029a0:	4b55      	ldr	r3, [pc, #340]	; (8002af8 <HAL_GPIO_Init+0x2d8>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029ac:	4a53      	ldr	r2, [pc, #332]	; (8002afc <HAL_GPIO_Init+0x2dc>)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	3302      	adds	r3, #2
 80029b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	220f      	movs	r2, #15
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029d6:	d019      	beq.n	8002a0c <HAL_GPIO_Init+0x1ec>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a49      	ldr	r2, [pc, #292]	; (8002b00 <HAL_GPIO_Init+0x2e0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d013      	beq.n	8002a08 <HAL_GPIO_Init+0x1e8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a48      	ldr	r2, [pc, #288]	; (8002b04 <HAL_GPIO_Init+0x2e4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d00d      	beq.n	8002a04 <HAL_GPIO_Init+0x1e4>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a47      	ldr	r2, [pc, #284]	; (8002b08 <HAL_GPIO_Init+0x2e8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d007      	beq.n	8002a00 <HAL_GPIO_Init+0x1e0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a46      	ldr	r2, [pc, #280]	; (8002b0c <HAL_GPIO_Init+0x2ec>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d101      	bne.n	80029fc <HAL_GPIO_Init+0x1dc>
 80029f8:	2304      	movs	r3, #4
 80029fa:	e008      	b.n	8002a0e <HAL_GPIO_Init+0x1ee>
 80029fc:	2305      	movs	r3, #5
 80029fe:	e006      	b.n	8002a0e <HAL_GPIO_Init+0x1ee>
 8002a00:	2303      	movs	r3, #3
 8002a02:	e004      	b.n	8002a0e <HAL_GPIO_Init+0x1ee>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e002      	b.n	8002a0e <HAL_GPIO_Init+0x1ee>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <HAL_GPIO_Init+0x1ee>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	f002 0203 	and.w	r2, r2, #3
 8002a14:	0092      	lsls	r2, r2, #2
 8002a16:	4093      	lsls	r3, r2
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a1e:	4937      	ldr	r1, [pc, #220]	; (8002afc <HAL_GPIO_Init+0x2dc>)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	089b      	lsrs	r3, r3, #2
 8002a24:	3302      	adds	r3, #2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a2c:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <HAL_GPIO_Init+0x2f0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a50:	4a2f      	ldr	r2, [pc, #188]	; (8002b10 <HAL_GPIO_Init+0x2f0>)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a56:	4b2e      	ldr	r3, [pc, #184]	; (8002b10 <HAL_GPIO_Init+0x2f0>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a7a:	4a25      	ldr	r2, [pc, #148]	; (8002b10 <HAL_GPIO_Init+0x2f0>)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a80:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <HAL_GPIO_Init+0x2f0>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002aa4:	4a1a      	ldr	r2, [pc, #104]	; (8002b10 <HAL_GPIO_Init+0x2f0>)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aaa:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_GPIO_Init+0x2f0>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ace:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <HAL_GPIO_Init+0x2f0>)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f47f aea3 	bne.w	8002830 <HAL_GPIO_Init+0x10>
  }
}
 8002aea:	bf00      	nop
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40010000 	.word	0x40010000
 8002b00:	48000400 	.word	0x48000400
 8002b04:	48000800 	.word	0x48000800
 8002b08:	48000c00 	.word	0x48000c00
 8002b0c:	48001000 	.word	0x48001000
 8002b10:	40010400 	.word	0x40010400

08002b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	807b      	strh	r3, [r7, #2]
 8002b20:	4613      	mov	r3, r2
 8002b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b24:	787b      	ldrb	r3, [r7, #1]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b30:	e002      	b.n	8002b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b32:	887a      	ldrh	r2, [r7, #2]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e081      	b.n	8002c5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff f810 	bl	8001b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2224      	movs	r2, #36	; 0x24
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ba4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d107      	bne.n	8002bbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	e006      	b.n	8002bcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d104      	bne.n	8002bde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	ea42 0103 	orr.w	r1, r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	021a      	lsls	r2, r3, #8
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69d9      	ldr	r1, [r3, #28]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	817b      	strh	r3, [r7, #10]
 8002c76:	460b      	mov	r3, r1
 8002c78:	813b      	strh	r3, [r7, #8]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	f040 80f9 	bne.w	8002e7e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_I2C_Mem_Write+0x34>
 8002c92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0ed      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_I2C_Mem_Write+0x4e>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e0e6      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cba:	f7ff fc1d 	bl	80024f8 <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2319      	movs	r3, #25
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fac3 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0d1      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2221      	movs	r2, #33	; 0x21
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a3a      	ldr	r2, [r7, #32]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d04:	88f8      	ldrh	r0, [r7, #6]
 8002d06:	893a      	ldrh	r2, [r7, #8]
 8002d08:	8979      	ldrh	r1, [r7, #10]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	4603      	mov	r3, r0
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f9d3 	bl	80030c0 <I2C_RequestMemoryWrite>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0a9      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2bff      	cmp	r3, #255	; 0xff
 8002d34:	d90e      	bls.n	8002d54 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	8979      	ldrh	r1, [r7, #10]
 8002d44:	2300      	movs	r3, #0
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fba5 	bl	800349c <I2C_TransferConfig>
 8002d52:	e00f      	b.n	8002d74 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	2300      	movs	r3, #0
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fb94 	bl	800349c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 faad 	bl	80032d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e07b      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d034      	beq.n	8002e2c <HAL_I2C_Mem_Write+0x1c8>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d130      	bne.n	8002e2c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2180      	movs	r1, #128	; 0x80
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fa3f 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e04d      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2bff      	cmp	r3, #255	; 0xff
 8002dec:	d90e      	bls.n	8002e0c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	22ff      	movs	r2, #255	; 0xff
 8002df2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	8979      	ldrh	r1, [r7, #10]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 fb49 	bl	800349c <I2C_TransferConfig>
 8002e0a:	e00f      	b.n	8002e2c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	8979      	ldrh	r1, [r7, #10]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 fb38 	bl	800349c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d19e      	bne.n	8002d74 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fa8c 	bl	8003358 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e01a      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6859      	ldr	r1, [r3, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_I2C_Mem_Write+0x224>)
 8002e5e:	400b      	ands	r3, r1
 8002e60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e000      	b.n	8002e80 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
  }
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	fe00e800 	.word	0xfe00e800

08002e8c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	4608      	mov	r0, r1
 8002e96:	4611      	mov	r1, r2
 8002e98:	461a      	mov	r2, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	817b      	strh	r3, [r7, #10]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	813b      	strh	r3, [r7, #8]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	f040 80fd 	bne.w	80030ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_I2C_Mem_Read+0x34>
 8002eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0f1      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_I2C_Mem_Read+0x4e>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e0ea      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ee2:	f7ff fb09 	bl	80024f8 <HAL_GetTick>
 8002ee6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2319      	movs	r3, #25
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f9af 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0d5      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2222      	movs	r2, #34	; 0x22
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2240      	movs	r2, #64	; 0x40
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a3a      	ldr	r2, [r7, #32]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f2c:	88f8      	ldrh	r0, [r7, #6]
 8002f2e:	893a      	ldrh	r2, [r7, #8]
 8002f30:	8979      	ldrh	r1, [r7, #10]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f913 	bl	8003168 <I2C_RequestMemoryRead>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0ad      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2bff      	cmp	r3, #255	; 0xff
 8002f5c:	d90e      	bls.n	8002f7c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	22ff      	movs	r2, #255	; 0xff
 8002f62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	8979      	ldrh	r1, [r7, #10]
 8002f6c:	4b52      	ldr	r3, [pc, #328]	; (80030b8 <HAL_I2C_Mem_Read+0x22c>)
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fa91 	bl	800349c <I2C_TransferConfig>
 8002f7a:	e00f      	b.n	8002f9c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	8979      	ldrh	r1, [r7, #10]
 8002f8e:	4b4a      	ldr	r3, [pc, #296]	; (80030b8 <HAL_I2C_Mem_Read+0x22c>)
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 fa80 	bl	800349c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f956 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e07c      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d034      	beq.n	800305c <HAL_I2C_Mem_Read+0x1d0>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d130      	bne.n	800305c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	2200      	movs	r2, #0
 8003002:	2180      	movs	r1, #128	; 0x80
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f927 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e04d      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	2bff      	cmp	r3, #255	; 0xff
 800301c:	d90e      	bls.n	800303c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	22ff      	movs	r2, #255	; 0xff
 8003022:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003028:	b2da      	uxtb	r2, r3
 800302a:	8979      	ldrh	r1, [r7, #10]
 800302c:	2300      	movs	r3, #0
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fa31 	bl	800349c <I2C_TransferConfig>
 800303a:	e00f      	b.n	800305c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	b2da      	uxtb	r2, r3
 800304c:	8979      	ldrh	r1, [r7, #10]
 800304e:	2300      	movs	r3, #0
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fa20 	bl	800349c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d19a      	bne.n	8002f9c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f974 	bl	8003358 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e01a      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2220      	movs	r2, #32
 8003080:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_I2C_Mem_Read+0x230>)
 800308e:	400b      	ands	r3, r1
 8003090:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	80002400 	.word	0x80002400
 80030bc:	fe00e800 	.word	0xfe00e800

080030c0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	4608      	mov	r0, r1
 80030ca:	4611      	mov	r1, r2
 80030cc:	461a      	mov	r2, r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	817b      	strh	r3, [r7, #10]
 80030d2:	460b      	mov	r3, r1
 80030d4:	813b      	strh	r3, [r7, #8]
 80030d6:	4613      	mov	r3, r2
 80030d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	8979      	ldrh	r1, [r7, #10]
 80030e0:	4b20      	ldr	r3, [pc, #128]	; (8003164 <I2C_RequestMemoryWrite+0xa4>)
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f9d7 	bl	800349c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	69b9      	ldr	r1, [r7, #24]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f8f0 	bl	80032d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e02c      	b.n	800315c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d105      	bne.n	8003114 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003108:	893b      	ldrh	r3, [r7, #8]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	629a      	str	r2, [r3, #40]	; 0x28
 8003112:	e015      	b.n	8003140 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003114:	893b      	ldrh	r3, [r7, #8]
 8003116:	0a1b      	lsrs	r3, r3, #8
 8003118:	b29b      	uxth	r3, r3
 800311a:	b2da      	uxtb	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	69b9      	ldr	r1, [r7, #24]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f8d6 	bl	80032d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e012      	b.n	800315c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003136:	893b      	ldrh	r3, [r7, #8]
 8003138:	b2da      	uxtb	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2200      	movs	r2, #0
 8003148:	2180      	movs	r1, #128	; 0x80
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f884 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	80002000 	.word	0x80002000

08003168 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4603      	mov	r3, r0
 8003178:	817b      	strh	r3, [r7, #10]
 800317a:	460b      	mov	r3, r1
 800317c:	813b      	strh	r3, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	8979      	ldrh	r1, [r7, #10]
 8003188:	4b20      	ldr	r3, [pc, #128]	; (800320c <I2C_RequestMemoryRead+0xa4>)
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2300      	movs	r3, #0
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f984 	bl	800349c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	69b9      	ldr	r1, [r7, #24]
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f89d 	bl	80032d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e02c      	b.n	8003202 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d105      	bne.n	80031ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031ae:	893b      	ldrh	r3, [r7, #8]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28
 80031b8:	e015      	b.n	80031e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031ba:	893b      	ldrh	r3, [r7, #8]
 80031bc:	0a1b      	lsrs	r3, r3, #8
 80031be:	b29b      	uxth	r3, r3
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	69b9      	ldr	r1, [r7, #24]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f883 	bl	80032d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e012      	b.n	8003202 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031dc:	893b      	ldrh	r3, [r7, #8]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	2200      	movs	r2, #0
 80031ee:	2140      	movs	r1, #64	; 0x40
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f831 	bl	8003258 <I2C_WaitOnFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	80002000 	.word	0x80002000

08003210 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b02      	cmp	r3, #2
 8003224:	d103      	bne.n	800322e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2200      	movs	r2, #0
 800322c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d007      	beq.n	800324c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	619a      	str	r2, [r3, #24]
  }
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003268:	e022      	b.n	80032b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003270:	d01e      	beq.n	80032b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003272:	f7ff f941 	bl	80024f8 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d302      	bcc.n	8003288 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d113      	bne.n	80032b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	f043 0220 	orr.w	r2, r3, #32
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e00f      	b.n	80032d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	4013      	ands	r3, r2
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d0cd      	beq.n	800326a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032e4:	e02c      	b.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f870 	bl	80033d0 <I2C_IsAcknowledgeFailed>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e02a      	b.n	8003350 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d01e      	beq.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003302:	f7ff f8f9 	bl	80024f8 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	429a      	cmp	r2, r3
 8003310:	d302      	bcc.n	8003318 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d113      	bne.n	8003340 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e007      	b.n	8003350 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b02      	cmp	r3, #2
 800334c:	d1cb      	bne.n	80032e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003364:	e028      	b.n	80033b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f830 	bl	80033d0 <I2C_IsAcknowledgeFailed>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e026      	b.n	80033c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337a:	f7ff f8bd 	bl	80024f8 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	429a      	cmp	r2, r3
 8003388:	d302      	bcc.n	8003390 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d113      	bne.n	80033b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	f043 0220 	orr.w	r2, r3, #32
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e007      	b.n	80033c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d1cf      	bne.n	8003366 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b10      	cmp	r3, #16
 80033e8:	d151      	bne.n	800348e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ea:	e022      	b.n	8003432 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d01e      	beq.n	8003432 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f4:	f7ff f880 	bl	80024f8 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	429a      	cmp	r2, r3
 8003402:	d302      	bcc.n	800340a <I2C_IsAcknowledgeFailed+0x3a>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d113      	bne.n	8003432 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e02e      	b.n	8003490 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b20      	cmp	r3, #32
 800343e:	d1d5      	bne.n	80033ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2210      	movs	r2, #16
 8003446:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2220      	movs	r2, #32
 800344e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff fedd 	bl	8003210 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b0d      	ldr	r3, [pc, #52]	; (8003498 <I2C_IsAcknowledgeFailed+0xc8>)
 8003462:	400b      	ands	r3, r1
 8003464:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	f043 0204 	orr.w	r2, r3, #4
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	fe00e800 	.word	0xfe00e800

0800349c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	607b      	str	r3, [r7, #4]
 80034a6:	460b      	mov	r3, r1
 80034a8:	817b      	strh	r3, [r7, #10]
 80034aa:	4613      	mov	r3, r2
 80034ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	0d5b      	lsrs	r3, r3, #21
 80034b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80034bc:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <I2C_TransferConfig+0x58>)
 80034be:	430b      	orrs	r3, r1
 80034c0:	43db      	mvns	r3, r3
 80034c2:	ea02 0103 	and.w	r1, r2, r3
 80034c6:	897b      	ldrh	r3, [r7, #10]
 80034c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034cc:	7a7b      	ldrb	r3, [r7, #9]
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	431a      	orrs	r2, r3
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	431a      	orrs	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	03ff63ff 	.word	0x03ff63ff

080034f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b20      	cmp	r3, #32
 800350c:	d138      	bne.n	8003580 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003518:	2302      	movs	r3, #2
 800351a:	e032      	b.n	8003582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2224      	movs	r2, #36	; 0x24
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800354a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6819      	ldr	r1, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	e000      	b.n	8003582 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003580:	2302      	movs	r3, #2
  }
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800358e:	b480      	push	{r7}
 8003590:	b085      	sub	sp, #20
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d139      	bne.n	8003618 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e033      	b.n	800361a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2224      	movs	r2, #36	; 0x24
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	e000      	b.n	800361a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003618:	2302      	movs	r3, #2
  }
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800362e:	af00      	add	r7, sp, #0
 8003630:	1d3b      	adds	r3, r7, #4
 8003632:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f000 bef4 	b.w	800442a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 816a 	beq.w	8003926 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003652:	4bb3      	ldr	r3, [pc, #716]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b04      	cmp	r3, #4
 800365c:	d00c      	beq.n	8003678 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800365e:	4bb0      	ldr	r3, [pc, #704]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b08      	cmp	r3, #8
 8003668:	d159      	bne.n	800371e <HAL_RCC_OscConfig+0xf6>
 800366a:	4bad      	ldr	r3, [pc, #692]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003676:	d152      	bne.n	800371e <HAL_RCC_OscConfig+0xf6>
 8003678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800367c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003684:	fa93 f3a3 	rbit	r3, r3
 8003688:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800368c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	b2db      	uxtb	r3, r3
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d102      	bne.n	80036aa <HAL_RCC_OscConfig+0x82>
 80036a4:	4b9e      	ldr	r3, [pc, #632]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	e015      	b.n	80036d6 <HAL_RCC_OscConfig+0xae>
 80036aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80036be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036c2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80036c6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80036d2:	4b93      	ldr	r3, [pc, #588]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036da:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80036de:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80036e2:	fa92 f2a2 	rbit	r2, r2
 80036e6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80036ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80036ee:	fab2 f282 	clz	r2, r2
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	f042 0220 	orr.w	r2, r2, #32
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	f002 021f 	and.w	r2, r2, #31
 80036fe:	2101      	movs	r1, #1
 8003700:	fa01 f202 	lsl.w	r2, r1, r2
 8003704:	4013      	ands	r3, r2
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 810c 	beq.w	8003924 <HAL_RCC_OscConfig+0x2fc>
 800370c:	1d3b      	adds	r3, r7, #4
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f040 8106 	bne.w	8003924 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	f000 be86 	b.w	800442a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d106      	bne.n	8003738 <HAL_RCC_OscConfig+0x110>
 800372a:	4b7d      	ldr	r3, [pc, #500]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a7c      	ldr	r2, [pc, #496]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e030      	b.n	800379a <HAL_RCC_OscConfig+0x172>
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x134>
 8003742:	4b77      	ldr	r3, [pc, #476]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a76      	ldr	r2, [pc, #472]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 8003748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b74      	ldr	r3, [pc, #464]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a73      	ldr	r2, [pc, #460]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 8003754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e01e      	b.n	800379a <HAL_RCC_OscConfig+0x172>
 800375c:	1d3b      	adds	r3, r7, #4
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003766:	d10c      	bne.n	8003782 <HAL_RCC_OscConfig+0x15a>
 8003768:	4b6d      	ldr	r3, [pc, #436]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a6c      	ldr	r2, [pc, #432]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 800376e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a69      	ldr	r2, [pc, #420]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 800377a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	e00b      	b.n	800379a <HAL_RCC_OscConfig+0x172>
 8003782:	4b67      	ldr	r3, [pc, #412]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a66      	ldr	r2, [pc, #408]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 8003788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b64      	ldr	r3, [pc, #400]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a63      	ldr	r2, [pc, #396]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 8003794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003798:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800379a:	4b61      	ldr	r3, [pc, #388]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 800379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379e:	f023 020f 	bic.w	r2, r3, #15
 80037a2:	1d3b      	adds	r3, r7, #4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	495d      	ldr	r1, [pc, #372]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037ae:	1d3b      	adds	r3, r7, #4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d059      	beq.n	800386c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fe fe9e 	bl	80024f8 <HAL_GetTick>
 80037bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c0:	e00a      	b.n	80037d8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c2:	f7fe fe99 	bl	80024f8 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	; 0x64
 80037d0:	d902      	bls.n	80037d8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	f000 be29 	b.w	800442a <HAL_RCC_OscConfig+0xe02>
 80037d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80037ec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f0:	fab3 f383 	clz	r3, r3
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b01      	cmp	r3, #1
 8003802:	d102      	bne.n	800380a <HAL_RCC_OscConfig+0x1e2>
 8003804:	4b46      	ldr	r3, [pc, #280]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	e015      	b.n	8003836 <HAL_RCC_OscConfig+0x20e>
 800380a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800380e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800381e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003822:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003826:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003832:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800383a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800383e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003842:	fa92 f2a2 	rbit	r2, r2
 8003846:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800384a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800384e:	fab2 f282 	clz	r2, r2
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	f042 0220 	orr.w	r2, r2, #32
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	f002 021f 	and.w	r2, r2, #31
 800385e:	2101      	movs	r1, #1
 8003860:	fa01 f202 	lsl.w	r2, r1, r2
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0ab      	beq.n	80037c2 <HAL_RCC_OscConfig+0x19a>
 800386a:	e05c      	b.n	8003926 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fe fe44 	bl	80024f8 <HAL_GetTick>
 8003870:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003874:	e00a      	b.n	800388c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003876:	f7fe fe3f 	bl	80024f8 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d902      	bls.n	800388c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	f000 bdcf 	b.w	800442a <HAL_RCC_OscConfig+0xe02>
 800388c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003890:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80038a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a4:	fab3 f383 	clz	r3, r3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d102      	bne.n	80038be <HAL_RCC_OscConfig+0x296>
 80038b8:	4b19      	ldr	r3, [pc, #100]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	e015      	b.n	80038ea <HAL_RCC_OscConfig+0x2c2>
 80038be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80038d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80038da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <HAL_RCC_OscConfig+0x2f8>)
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80038f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80038f6:	fa92 f2a2 	rbit	r2, r2
 80038fa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80038fe:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003902:	fab2 f282 	clz	r2, r2
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	f042 0220 	orr.w	r2, r2, #32
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	f002 021f 	and.w	r2, r2, #31
 8003912:	2101      	movs	r1, #1
 8003914:	fa01 f202 	lsl.w	r2, r1, r2
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1ab      	bne.n	8003876 <HAL_RCC_OscConfig+0x24e>
 800391e:	e002      	b.n	8003926 <HAL_RCC_OscConfig+0x2fe>
 8003920:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003926:	1d3b      	adds	r3, r7, #4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 816f 	beq.w	8003c14 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003936:	4bd0      	ldr	r3, [pc, #832]	; (8003c78 <HAL_RCC_OscConfig+0x650>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003942:	4bcd      	ldr	r3, [pc, #820]	; (8003c78 <HAL_RCC_OscConfig+0x650>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b08      	cmp	r3, #8
 800394c:	d16c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x400>
 800394e:	4bca      	ldr	r3, [pc, #808]	; (8003c78 <HAL_RCC_OscConfig+0x650>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d166      	bne.n	8003a28 <HAL_RCC_OscConfig+0x400>
 800395a:	2302      	movs	r3, #2
 800395c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003964:	fa93 f3a3 	rbit	r3, r3
 8003968:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800396c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003970:	fab3 f383 	clz	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d102      	bne.n	800398a <HAL_RCC_OscConfig+0x362>
 8003984:	4bbc      	ldr	r3, [pc, #752]	; (8003c78 <HAL_RCC_OscConfig+0x650>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	e013      	b.n	80039b2 <HAL_RCC_OscConfig+0x38a>
 800398a:	2302      	movs	r3, #2
 800398c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003990:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003994:	fa93 f3a3 	rbit	r3, r3
 8003998:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800399c:	2302      	movs	r3, #2
 800399e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80039a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80039ae:	4bb2      	ldr	r3, [pc, #712]	; (8003c78 <HAL_RCC_OscConfig+0x650>)
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	2202      	movs	r2, #2
 80039b4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80039b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80039bc:	fa92 f2a2 	rbit	r2, r2
 80039c0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80039c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80039c8:	fab2 f282 	clz	r2, r2
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	f042 0220 	orr.w	r2, r2, #32
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	f002 021f 	and.w	r2, r2, #31
 80039d8:	2101      	movs	r1, #1
 80039da:	fa01 f202 	lsl.w	r2, r1, r2
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d007      	beq.n	80039f4 <HAL_RCC_OscConfig+0x3cc>
 80039e4:	1d3b      	adds	r3, r7, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d002      	beq.n	80039f4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	f000 bd1b 	b.w	800442a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f4:	4ba0      	ldr	r3, [pc, #640]	; (8003c78 <HAL_RCC_OscConfig+0x650>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	21f8      	movs	r1, #248	; 0xf8
 8003a04:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003a0c:	fa91 f1a1 	rbit	r1, r1
 8003a10:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003a14:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003a18:	fab1 f181 	clz	r1, r1
 8003a1c:	b2c9      	uxtb	r1, r1
 8003a1e:	408b      	lsls	r3, r1
 8003a20:	4995      	ldr	r1, [pc, #596]	; (8003c78 <HAL_RCC_OscConfig+0x650>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a26:	e0f5      	b.n	8003c14 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8085 	beq.w	8003b3e <HAL_RCC_OscConfig+0x516>
 8003a34:	2301      	movs	r3, #1
 8003a36:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003a3e:	fa93 f3a3 	rbit	r3, r3
 8003a42:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003a46:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a60:	f7fe fd4a 	bl	80024f8 <HAL_GetTick>
 8003a64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a68:	e00a      	b.n	8003a80 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a6a:	f7fe fd45 	bl	80024f8 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d902      	bls.n	8003a80 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	f000 bcd5 	b.w	800442a <HAL_RCC_OscConfig+0xe02>
 8003a80:	2302      	movs	r3, #2
 8003a82:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003a8a:	fa93 f3a3 	rbit	r3, r3
 8003a8e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003a92:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d102      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x488>
 8003aaa:	4b73      	ldr	r3, [pc, #460]	; (8003c78 <HAL_RCC_OscConfig+0x650>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	e013      	b.n	8003ad8 <HAL_RCC_OscConfig+0x4b0>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003aba:	fa93 f3a3 	rbit	r3, r3
 8003abe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003ac8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003acc:	fa93 f3a3 	rbit	r3, r3
 8003ad0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003ad4:	4b68      	ldr	r3, [pc, #416]	; (8003c78 <HAL_RCC_OscConfig+0x650>)
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	2202      	movs	r2, #2
 8003ada:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003ade:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003ae2:	fa92 f2a2 	rbit	r2, r2
 8003ae6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003aea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003aee:	fab2 f282 	clz	r2, r2
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	f042 0220 	orr.w	r2, r2, #32
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	f002 021f 	and.w	r2, r2, #31
 8003afe:	2101      	movs	r1, #1
 8003b00:	fa01 f202 	lsl.w	r2, r1, r2
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0af      	beq.n	8003a6a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b5b      	ldr	r3, [pc, #364]	; (8003c78 <HAL_RCC_OscConfig+0x650>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b12:	1d3b      	adds	r3, r7, #4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	21f8      	movs	r1, #248	; 0xf8
 8003b1a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003b22:	fa91 f1a1 	rbit	r1, r1
 8003b26:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003b2a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003b2e:	fab1 f181 	clz	r1, r1
 8003b32:	b2c9      	uxtb	r1, r1
 8003b34:	408b      	lsls	r3, r1
 8003b36:	4950      	ldr	r1, [pc, #320]	; (8003c78 <HAL_RCC_OscConfig+0x650>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	600b      	str	r3, [r1, #0]
 8003b3c:	e06a      	b.n	8003c14 <HAL_RCC_OscConfig+0x5ec>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003b48:	fa93 f3a3 	rbit	r3, r3
 8003b4c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003b50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b54:	fab3 f383 	clz	r3, r3
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	461a      	mov	r2, r3
 8003b66:	2300      	movs	r3, #0
 8003b68:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6a:	f7fe fcc5 	bl	80024f8 <HAL_GetTick>
 8003b6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b74:	f7fe fcc0 	bl	80024f8 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d902      	bls.n	8003b8a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	f000 bc50 	b.w	800442a <HAL_RCC_OscConfig+0xe02>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b94:	fa93 f3a3 	rbit	r3, r3
 8003b98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba0:	fab3 f383 	clz	r3, r3
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d102      	bne.n	8003bba <HAL_RCC_OscConfig+0x592>
 8003bb4:	4b30      	ldr	r3, [pc, #192]	; (8003c78 <HAL_RCC_OscConfig+0x650>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	e013      	b.n	8003be2 <HAL_RCC_OscConfig+0x5ba>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003bc4:	fa93 f3a3 	rbit	r3, r3
 8003bc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003bcc:	2302      	movs	r3, #2
 8003bce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003bd6:	fa93 f3a3 	rbit	r3, r3
 8003bda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003bde:	4b26      	ldr	r3, [pc, #152]	; (8003c78 <HAL_RCC_OscConfig+0x650>)
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	2202      	movs	r2, #2
 8003be4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003be8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003bec:	fa92 f2a2 	rbit	r2, r2
 8003bf0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003bf4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003bf8:	fab2 f282 	clz	r2, r2
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	f042 0220 	orr.w	r2, r2, #32
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	f002 021f 	and.w	r2, r2, #31
 8003c08:	2101      	movs	r1, #1
 8003c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1af      	bne.n	8003b74 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c14:	1d3b      	adds	r3, r7, #4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 80da 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c24:	1d3b      	adds	r3, r7, #4
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d069      	beq.n	8003d02 <HAL_RCC_OscConfig+0x6da>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c44:	fab3 f383 	clz	r3, r3
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_OscConfig+0x654>)
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	461a      	mov	r2, r3
 8003c54:	2301      	movs	r3, #1
 8003c56:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c58:	f7fe fc4e 	bl	80024f8 <HAL_GetTick>
 8003c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c60:	e00e      	b.n	8003c80 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c62:	f7fe fc49 	bl	80024f8 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d906      	bls.n	8003c80 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e3d9      	b.n	800442a <HAL_RCC_OscConfig+0xe02>
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	10908120 	.word	0x10908120
 8003c80:	2302      	movs	r3, #2
 8003c82:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c92:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003c96:	2202      	movs	r2, #2
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	fa93 f2a3 	rbit	r2, r3
 8003ca4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003cae:	2202      	movs	r2, #2
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	fa93 f2a3 	rbit	r2, r3
 8003cbc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003cc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc2:	4ba5      	ldr	r3, [pc, #660]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cc6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003cca:	2102      	movs	r1, #2
 8003ccc:	6019      	str	r1, [r3, #0]
 8003cce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	fa93 f1a3 	rbit	r1, r3
 8003cd8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003cdc:	6019      	str	r1, [r3, #0]
  return result;
 8003cde:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	fab3 f383 	clz	r3, r3
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0b0      	beq.n	8003c62 <HAL_RCC_OscConfig+0x63a>
 8003d00:	e06a      	b.n	8003dd8 <HAL_RCC_OscConfig+0x7b0>
 8003d02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	fa93 f2a3 	rbit	r2, r3
 8003d14:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d18:	601a      	str	r2, [r3, #0]
  return result;
 8003d1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d1e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d20:	fab3 f383 	clz	r3, r3
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	4b8c      	ldr	r3, [pc, #560]	; (8003f5c <HAL_RCC_OscConfig+0x934>)
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	461a      	mov	r2, r3
 8003d30:	2300      	movs	r3, #0
 8003d32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d34:	f7fe fbe0 	bl	80024f8 <HAL_GetTick>
 8003d38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3c:	e009      	b.n	8003d52 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d3e:	f7fe fbdb 	bl	80024f8 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e36b      	b.n	800442a <HAL_RCC_OscConfig+0xe02>
 8003d52:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003d56:	2202      	movs	r2, #2
 8003d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	fa93 f2a3 	rbit	r2, r3
 8003d64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003d6e:	2202      	movs	r2, #2
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	fa93 f2a3 	rbit	r2, r3
 8003d7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003d86:	2202      	movs	r2, #2
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	fa93 f2a3 	rbit	r2, r3
 8003d94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9a:	4b6f      	ldr	r3, [pc, #444]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d9e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003da2:	2102      	movs	r1, #2
 8003da4:	6019      	str	r1, [r3, #0]
 8003da6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	fa93 f1a3 	rbit	r1, r3
 8003db0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003db4:	6019      	str	r1, [r3, #0]
  return result;
 8003db6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	fab3 f383 	clz	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2101      	movs	r1, #1
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1b2      	bne.n	8003d3e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd8:	1d3b      	adds	r3, r7, #4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 8158 	beq.w	8004098 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dee:	4b5a      	ldr	r3, [pc, #360]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d112      	bne.n	8003e20 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfa:	4b57      	ldr	r3, [pc, #348]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	4a56      	ldr	r2, [pc, #344]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e04:	61d3      	str	r3, [r2, #28]
 8003e06:	4b54      	ldr	r3, [pc, #336]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003e0e:	f107 0308 	add.w	r3, r7, #8
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	f107 0308 	add.w	r3, r7, #8
 8003e18:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e20:	4b4f      	ldr	r3, [pc, #316]	; (8003f60 <HAL_RCC_OscConfig+0x938>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d11a      	bne.n	8003e62 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2c:	4b4c      	ldr	r3, [pc, #304]	; (8003f60 <HAL_RCC_OscConfig+0x938>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a4b      	ldr	r2, [pc, #300]	; (8003f60 <HAL_RCC_OscConfig+0x938>)
 8003e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e36:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e38:	f7fe fb5e 	bl	80024f8 <HAL_GetTick>
 8003e3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	e009      	b.n	8003e56 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e42:	f7fe fb59 	bl	80024f8 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b64      	cmp	r3, #100	; 0x64
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e2e9      	b.n	800442a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e56:	4b42      	ldr	r3, [pc, #264]	; (8003f60 <HAL_RCC_OscConfig+0x938>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0ef      	beq.n	8003e42 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e62:	1d3b      	adds	r3, r7, #4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCC_OscConfig+0x852>
 8003e6c:	4b3a      	ldr	r3, [pc, #232]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	4a39      	ldr	r2, [pc, #228]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6213      	str	r3, [r2, #32]
 8003e78:	e02f      	b.n	8003eda <HAL_RCC_OscConfig+0x8b2>
 8003e7a:	1d3b      	adds	r3, r7, #4
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10c      	bne.n	8003e9e <HAL_RCC_OscConfig+0x876>
 8003e84:	4b34      	ldr	r3, [pc, #208]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	4a33      	ldr	r2, [pc, #204]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	6213      	str	r3, [r2, #32]
 8003e90:	4b31      	ldr	r3, [pc, #196]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	4a30      	ldr	r2, [pc, #192]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003e96:	f023 0304 	bic.w	r3, r3, #4
 8003e9a:	6213      	str	r3, [r2, #32]
 8003e9c:	e01d      	b.n	8003eda <HAL_RCC_OscConfig+0x8b2>
 8003e9e:	1d3b      	adds	r3, r7, #4
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b05      	cmp	r3, #5
 8003ea6:	d10c      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x89a>
 8003ea8:	4b2b      	ldr	r3, [pc, #172]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4a2a      	ldr	r2, [pc, #168]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003eae:	f043 0304 	orr.w	r3, r3, #4
 8003eb2:	6213      	str	r3, [r2, #32]
 8003eb4:	4b28      	ldr	r3, [pc, #160]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	4a27      	ldr	r2, [pc, #156]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6213      	str	r3, [r2, #32]
 8003ec0:	e00b      	b.n	8003eda <HAL_RCC_OscConfig+0x8b2>
 8003ec2:	4b25      	ldr	r3, [pc, #148]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	4a24      	ldr	r2, [pc, #144]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	6213      	str	r3, [r2, #32]
 8003ece:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	4a21      	ldr	r2, [pc, #132]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eda:	1d3b      	adds	r3, r7, #4
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d06b      	beq.n	8003fbc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee4:	f7fe fb08 	bl	80024f8 <HAL_GetTick>
 8003ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eec:	e00b      	b.n	8003f06 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eee:	f7fe fb03 	bl	80024f8 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e291      	b.n	800442a <HAL_RCC_OscConfig+0xe02>
 8003f06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	fa93 f2a3 	rbit	r2, r3
 8003f18:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f22:	2202      	movs	r2, #2
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	fa93 f2a3 	rbit	r2, r3
 8003f30:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f34:	601a      	str	r2, [r3, #0]
  return result;
 8003f36:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3c:	fab3 f383 	clz	r3, r3
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f043 0302 	orr.w	r3, r3, #2
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d109      	bne.n	8003f64 <HAL_RCC_OscConfig+0x93c>
 8003f50:	4b01      	ldr	r3, [pc, #4]	; (8003f58 <HAL_RCC_OscConfig+0x930>)
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	e014      	b.n	8003f80 <HAL_RCC_OscConfig+0x958>
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	10908120 	.word	0x10908120
 8003f60:	40007000 	.word	0x40007000
 8003f64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003f68:	2202      	movs	r2, #2
 8003f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	fa93 f2a3 	rbit	r2, r3
 8003f76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	4bbb      	ldr	r3, [pc, #748]	; (800426c <HAL_RCC_OscConfig+0xc44>)
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003f84:	2102      	movs	r1, #2
 8003f86:	6011      	str	r1, [r2, #0]
 8003f88:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	fa92 f1a2 	rbit	r1, r2
 8003f92:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003f96:	6011      	str	r1, [r2, #0]
  return result;
 8003f98:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	fab2 f282 	clz	r2, r2
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	f002 021f 	and.w	r2, r2, #31
 8003fae:	2101      	movs	r1, #1
 8003fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d099      	beq.n	8003eee <HAL_RCC_OscConfig+0x8c6>
 8003fba:	e063      	b.n	8004084 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fbc:	f7fe fa9c 	bl	80024f8 <HAL_GetTick>
 8003fc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc4:	e00b      	b.n	8003fde <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc6:	f7fe fa97 	bl	80024f8 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e225      	b.n	800442a <HAL_RCC_OscConfig+0xe02>
 8003fde:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	fa93 f2a3 	rbit	r2, r3
 8003ff0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	fa93 f2a3 	rbit	r2, r3
 8004008:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800400c:	601a      	str	r2, [r3, #0]
  return result;
 800400e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004012:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004014:	fab3 f383 	clz	r3, r3
 8004018:	b2db      	uxtb	r3, r3
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f043 0302 	orr.w	r3, r3, #2
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d102      	bne.n	800402e <HAL_RCC_OscConfig+0xa06>
 8004028:	4b90      	ldr	r3, [pc, #576]	; (800426c <HAL_RCC_OscConfig+0xc44>)
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	e00d      	b.n	800404a <HAL_RCC_OscConfig+0xa22>
 800402e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004032:	2202      	movs	r2, #2
 8004034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004036:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	fa93 f2a3 	rbit	r2, r3
 8004040:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	4b89      	ldr	r3, [pc, #548]	; (800426c <HAL_RCC_OscConfig+0xc44>)
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800404e:	2102      	movs	r1, #2
 8004050:	6011      	str	r1, [r2, #0]
 8004052:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	fa92 f1a2 	rbit	r1, r2
 800405c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004060:	6011      	str	r1, [r2, #0]
  return result;
 8004062:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	fab2 f282 	clz	r2, r2
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	f002 021f 	and.w	r2, r2, #31
 8004078:	2101      	movs	r1, #1
 800407a:	fa01 f202 	lsl.w	r2, r1, r2
 800407e:	4013      	ands	r3, r2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1a0      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004084:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408c:	4b77      	ldr	r3, [pc, #476]	; (800426c <HAL_RCC_OscConfig+0xc44>)
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	4a76      	ldr	r2, [pc, #472]	; (800426c <HAL_RCC_OscConfig+0xc44>)
 8004092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004096:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 81c2 	beq.w	8004428 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040a4:	4b71      	ldr	r3, [pc, #452]	; (800426c <HAL_RCC_OscConfig+0xc44>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 030c 	and.w	r3, r3, #12
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	f000 819c 	beq.w	80043ea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b2:	1d3b      	adds	r3, r7, #4
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	f040 8114 	bne.w	80042e6 <HAL_RCC_OscConfig+0xcbe>
 80040be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80040c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	fa93 f2a3 	rbit	r2, r3
 80040d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80040d6:	601a      	str	r2, [r3, #0]
  return result;
 80040d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80040dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	461a      	mov	r2, r3
 80040f0:	2300      	movs	r3, #0
 80040f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7fe fa00 	bl	80024f8 <HAL_GetTick>
 80040f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040fc:	e009      	b.n	8004112 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fe:	f7fe f9fb 	bl	80024f8 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e18b      	b.n	800442a <HAL_RCC_OscConfig+0xe02>
 8004112:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004116:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800411a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	fa93 f2a3 	rbit	r2, r3
 8004126:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800412a:	601a      	str	r2, [r3, #0]
  return result;
 800412c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004130:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004132:	fab3 f383 	clz	r3, r3
 8004136:	b2db      	uxtb	r3, r3
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d102      	bne.n	800414c <HAL_RCC_OscConfig+0xb24>
 8004146:	4b49      	ldr	r3, [pc, #292]	; (800426c <HAL_RCC_OscConfig+0xc44>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	e01b      	b.n	8004184 <HAL_RCC_OscConfig+0xb5c>
 800414c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004150:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004156:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	fa93 f2a3 	rbit	r2, r3
 8004160:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800416a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	fa93 f2a3 	rbit	r2, r3
 800417a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	4b3a      	ldr	r3, [pc, #232]	; (800426c <HAL_RCC_OscConfig+0xc44>)
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004188:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800418c:	6011      	str	r1, [r2, #0]
 800418e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	fa92 f1a2 	rbit	r1, r2
 8004198:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800419c:	6011      	str	r1, [r2, #0]
  return result;
 800419e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	fab2 f282 	clz	r2, r2
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	f042 0220 	orr.w	r2, r2, #32
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	f002 021f 	and.w	r2, r2, #31
 80041b4:	2101      	movs	r1, #1
 80041b6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d19e      	bne.n	80040fe <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041c0:	4b2a      	ldr	r3, [pc, #168]	; (800426c <HAL_RCC_OscConfig+0xc44>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041c8:	1d3b      	adds	r3, r7, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80041ce:	1d3b      	adds	r3, r7, #4
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	4925      	ldr	r1, [pc, #148]	; (800426c <HAL_RCC_OscConfig+0xc44>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	604b      	str	r3, [r1, #4]
 80041dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80041e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	fa93 f2a3 	rbit	r2, r3
 80041f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041f4:	601a      	str	r2, [r3, #0]
  return result;
 80041f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041fa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041fc:	fab3 f383 	clz	r3, r3
 8004200:	b2db      	uxtb	r3, r3
 8004202:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004206:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	461a      	mov	r2, r3
 800420e:	2301      	movs	r3, #1
 8004210:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004212:	f7fe f971 	bl	80024f8 <HAL_GetTick>
 8004216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800421a:	e009      	b.n	8004230 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421c:	f7fe f96c 	bl	80024f8 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e0fc      	b.n	800442a <HAL_RCC_OscConfig+0xe02>
 8004230:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004234:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	fa93 f2a3 	rbit	r2, r3
 8004244:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004248:	601a      	str	r2, [r3, #0]
  return result;
 800424a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800424e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004250:	fab3 f383 	clz	r3, r3
 8004254:	b2db      	uxtb	r3, r3
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b01      	cmp	r3, #1
 8004262:	d105      	bne.n	8004270 <HAL_RCC_OscConfig+0xc48>
 8004264:	4b01      	ldr	r3, [pc, #4]	; (800426c <HAL_RCC_OscConfig+0xc44>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	e01e      	b.n	80042a8 <HAL_RCC_OscConfig+0xc80>
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000
 8004270:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	fa93 f2a3 	rbit	r2, r3
 8004284:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800428e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	fa93 f2a3 	rbit	r2, r3
 800429e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	4b63      	ldr	r3, [pc, #396]	; (8004434 <HAL_RCC_OscConfig+0xe0c>)
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042b0:	6011      	str	r1, [r2, #0]
 80042b2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	fa92 f1a2 	rbit	r1, r2
 80042bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80042c0:	6011      	str	r1, [r2, #0]
  return result;
 80042c2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	fab2 f282 	clz	r2, r2
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	f042 0220 	orr.w	r2, r2, #32
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	f002 021f 	and.w	r2, r2, #31
 80042d8:	2101      	movs	r1, #1
 80042da:	fa01 f202 	lsl.w	r2, r1, r2
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d09b      	beq.n	800421c <HAL_RCC_OscConfig+0xbf4>
 80042e4:	e0a0      	b.n	8004428 <HAL_RCC_OscConfig+0xe00>
 80042e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	fa93 f2a3 	rbit	r2, r3
 80042fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042fe:	601a      	str	r2, [r3, #0]
  return result;
 8004300:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004304:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004310:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	461a      	mov	r2, r3
 8004318:	2300      	movs	r3, #0
 800431a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fe f8ec 	bl	80024f8 <HAL_GetTick>
 8004320:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004324:	e009      	b.n	800433a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004326:	f7fe f8e7 	bl	80024f8 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e077      	b.n	800442a <HAL_RCC_OscConfig+0xe02>
 800433a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800433e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	fa93 f2a3 	rbit	r2, r3
 800434e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004352:	601a      	str	r2, [r3, #0]
  return result;
 8004354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004358:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800435a:	fab3 f383 	clz	r3, r3
 800435e:	b2db      	uxtb	r3, r3
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b01      	cmp	r3, #1
 800436c:	d102      	bne.n	8004374 <HAL_RCC_OscConfig+0xd4c>
 800436e:	4b31      	ldr	r3, [pc, #196]	; (8004434 <HAL_RCC_OscConfig+0xe0c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	e01b      	b.n	80043ac <HAL_RCC_OscConfig+0xd84>
 8004374:	f107 0320 	add.w	r3, r7, #32
 8004378:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800437c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437e:	f107 0320 	add.w	r3, r7, #32
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	fa93 f2a3 	rbit	r2, r3
 8004388:	f107 031c 	add.w	r3, r7, #28
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	f107 0318 	add.w	r3, r7, #24
 8004392:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	f107 0318 	add.w	r3, r7, #24
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	fa93 f2a3 	rbit	r2, r3
 80043a2:	f107 0314 	add.w	r3, r7, #20
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	4b22      	ldr	r3, [pc, #136]	; (8004434 <HAL_RCC_OscConfig+0xe0c>)
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	f107 0210 	add.w	r2, r7, #16
 80043b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043b4:	6011      	str	r1, [r2, #0]
 80043b6:	f107 0210 	add.w	r2, r7, #16
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	fa92 f1a2 	rbit	r1, r2
 80043c0:	f107 020c 	add.w	r2, r7, #12
 80043c4:	6011      	str	r1, [r2, #0]
  return result;
 80043c6:	f107 020c 	add.w	r2, r7, #12
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	fab2 f282 	clz	r2, r2
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	f042 0220 	orr.w	r2, r2, #32
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	f002 021f 	and.w	r2, r2, #31
 80043dc:	2101      	movs	r1, #1
 80043de:	fa01 f202 	lsl.w	r2, r1, r2
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d19e      	bne.n	8004326 <HAL_RCC_OscConfig+0xcfe>
 80043e8:	e01e      	b.n	8004428 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ea:	1d3b      	adds	r3, r7, #4
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e018      	b.n	800442a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043f8:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <HAL_RCC_OscConfig+0xe0c>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004400:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004404:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004408:	1d3b      	adds	r3, r7, #4
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	429a      	cmp	r2, r3
 8004410:	d108      	bne.n	8004424 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004412:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004416:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004420:	429a      	cmp	r2, r3
 8004422:	d001      	beq.n	8004428 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000

08004438 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b09e      	sub	sp, #120	; 0x78
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e162      	b.n	8004716 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004450:	4b90      	ldr	r3, [pc, #576]	; (8004694 <HAL_RCC_ClockConfig+0x25c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d910      	bls.n	8004480 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445e:	4b8d      	ldr	r3, [pc, #564]	; (8004694 <HAL_RCC_ClockConfig+0x25c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f023 0207 	bic.w	r2, r3, #7
 8004466:	498b      	ldr	r1, [pc, #556]	; (8004694 <HAL_RCC_ClockConfig+0x25c>)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	4313      	orrs	r3, r2
 800446c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800446e:	4b89      	ldr	r3, [pc, #548]	; (8004694 <HAL_RCC_ClockConfig+0x25c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d001      	beq.n	8004480 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e14a      	b.n	8004716 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d008      	beq.n	800449e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800448c:	4b82      	ldr	r3, [pc, #520]	; (8004698 <HAL_RCC_ClockConfig+0x260>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	497f      	ldr	r1, [pc, #508]	; (8004698 <HAL_RCC_ClockConfig+0x260>)
 800449a:	4313      	orrs	r3, r2
 800449c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 80dc 	beq.w	8004664 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d13c      	bne.n	800452e <HAL_RCC_ClockConfig+0xf6>
 80044b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044b8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044bc:	fa93 f3a3 	rbit	r3, r3
 80044c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80044c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c4:	fab3 f383 	clz	r3, r3
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	095b      	lsrs	r3, r3, #5
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d102      	bne.n	80044de <HAL_RCC_ClockConfig+0xa6>
 80044d8:	4b6f      	ldr	r3, [pc, #444]	; (8004698 <HAL_RCC_ClockConfig+0x260>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	e00f      	b.n	80044fe <HAL_RCC_ClockConfig+0xc6>
 80044de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044e6:	fa93 f3a3 	rbit	r3, r3
 80044ea:	667b      	str	r3, [r7, #100]	; 0x64
 80044ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044f0:	663b      	str	r3, [r7, #96]	; 0x60
 80044f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044f4:	fa93 f3a3 	rbit	r3, r3
 80044f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044fa:	4b67      	ldr	r3, [pc, #412]	; (8004698 <HAL_RCC_ClockConfig+0x260>)
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004502:	65ba      	str	r2, [r7, #88]	; 0x58
 8004504:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004506:	fa92 f2a2 	rbit	r2, r2
 800450a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800450c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800450e:	fab2 f282 	clz	r2, r2
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	f042 0220 	orr.w	r2, r2, #32
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	f002 021f 	and.w	r2, r2, #31
 800451e:	2101      	movs	r1, #1
 8004520:	fa01 f202 	lsl.w	r2, r1, r2
 8004524:	4013      	ands	r3, r2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d17b      	bne.n	8004622 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e0f3      	b.n	8004716 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d13c      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x178>
 8004536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800453a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004546:	fab3 f383 	clz	r3, r3
 800454a:	b2db      	uxtb	r3, r3
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b01      	cmp	r3, #1
 8004558:	d102      	bne.n	8004560 <HAL_RCC_ClockConfig+0x128>
 800455a:	4b4f      	ldr	r3, [pc, #316]	; (8004698 <HAL_RCC_ClockConfig+0x260>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	e00f      	b.n	8004580 <HAL_RCC_ClockConfig+0x148>
 8004560:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004564:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004568:	fa93 f3a3 	rbit	r3, r3
 800456c:	647b      	str	r3, [r7, #68]	; 0x44
 800456e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004572:	643b      	str	r3, [r7, #64]	; 0x40
 8004574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004576:	fa93 f3a3 	rbit	r3, r3
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457c:	4b46      	ldr	r3, [pc, #280]	; (8004698 <HAL_RCC_ClockConfig+0x260>)
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004584:	63ba      	str	r2, [r7, #56]	; 0x38
 8004586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004588:	fa92 f2a2 	rbit	r2, r2
 800458c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800458e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004590:	fab2 f282 	clz	r2, r2
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	f042 0220 	orr.w	r2, r2, #32
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	f002 021f 	and.w	r2, r2, #31
 80045a0:	2101      	movs	r1, #1
 80045a2:	fa01 f202 	lsl.w	r2, r1, r2
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d13a      	bne.n	8004622 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e0b2      	b.n	8004716 <HAL_RCC_ClockConfig+0x2de>
 80045b0:	2302      	movs	r3, #2
 80045b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	fa93 f3a3 	rbit	r3, r3
 80045ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045be:	fab3 f383 	clz	r3, r3
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d102      	bne.n	80045d8 <HAL_RCC_ClockConfig+0x1a0>
 80045d2:	4b31      	ldr	r3, [pc, #196]	; (8004698 <HAL_RCC_ClockConfig+0x260>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	e00d      	b.n	80045f4 <HAL_RCC_ClockConfig+0x1bc>
 80045d8:	2302      	movs	r3, #2
 80045da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
 80045e4:	2302      	movs	r3, #2
 80045e6:	623b      	str	r3, [r7, #32]
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	fa93 f3a3 	rbit	r3, r3
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	4b29      	ldr	r3, [pc, #164]	; (8004698 <HAL_RCC_ClockConfig+0x260>)
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	2202      	movs	r2, #2
 80045f6:	61ba      	str	r2, [r7, #24]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	fa92 f2a2 	rbit	r2, r2
 80045fe:	617a      	str	r2, [r7, #20]
  return result;
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	fab2 f282 	clz	r2, r2
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	f042 0220 	orr.w	r2, r2, #32
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	f002 021f 	and.w	r2, r2, #31
 8004612:	2101      	movs	r1, #1
 8004614:	fa01 f202 	lsl.w	r2, r1, r2
 8004618:	4013      	ands	r3, r2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e079      	b.n	8004716 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004622:	4b1d      	ldr	r3, [pc, #116]	; (8004698 <HAL_RCC_ClockConfig+0x260>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f023 0203 	bic.w	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	491a      	ldr	r1, [pc, #104]	; (8004698 <HAL_RCC_ClockConfig+0x260>)
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004634:	f7fd ff60 	bl	80024f8 <HAL_GetTick>
 8004638:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463a:	e00a      	b.n	8004652 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800463c:	f7fd ff5c 	bl	80024f8 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f241 3288 	movw	r2, #5000	; 0x1388
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e061      	b.n	8004716 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	4b11      	ldr	r3, [pc, #68]	; (8004698 <HAL_RCC_ClockConfig+0x260>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 020c 	and.w	r2, r3, #12
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	429a      	cmp	r2, r3
 8004662:	d1eb      	bne.n	800463c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004664:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <HAL_RCC_ClockConfig+0x25c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d214      	bcs.n	800469c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004672:	4b08      	ldr	r3, [pc, #32]	; (8004694 <HAL_RCC_ClockConfig+0x25c>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f023 0207 	bic.w	r2, r3, #7
 800467a:	4906      	ldr	r1, [pc, #24]	; (8004694 <HAL_RCC_ClockConfig+0x25c>)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	4313      	orrs	r3, r2
 8004680:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004682:	4b04      	ldr	r3, [pc, #16]	; (8004694 <HAL_RCC_ClockConfig+0x25c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d005      	beq.n	800469c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e040      	b.n	8004716 <HAL_RCC_ClockConfig+0x2de>
 8004694:	40022000 	.word	0x40022000
 8004698:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046a8:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <HAL_RCC_ClockConfig+0x2e8>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	491a      	ldr	r1, [pc, #104]	; (8004720 <HAL_RCC_ClockConfig+0x2e8>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d009      	beq.n	80046da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046c6:	4b16      	ldr	r3, [pc, #88]	; (8004720 <HAL_RCC_ClockConfig+0x2e8>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4912      	ldr	r1, [pc, #72]	; (8004720 <HAL_RCC_ClockConfig+0x2e8>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046da:	f000 f829 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 80046de:	4601      	mov	r1, r0
 80046e0:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <HAL_RCC_ClockConfig+0x2e8>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e8:	22f0      	movs	r2, #240	; 0xf0
 80046ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	fa92 f2a2 	rbit	r2, r2
 80046f2:	60fa      	str	r2, [r7, #12]
  return result;
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	fab2 f282 	clz	r2, r2
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	40d3      	lsrs	r3, r2
 80046fe:	4a09      	ldr	r2, [pc, #36]	; (8004724 <HAL_RCC_ClockConfig+0x2ec>)
 8004700:	5cd3      	ldrb	r3, [r2, r3]
 8004702:	fa21 f303 	lsr.w	r3, r1, r3
 8004706:	4a08      	ldr	r2, [pc, #32]	; (8004728 <HAL_RCC_ClockConfig+0x2f0>)
 8004708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800470a:	4b08      	ldr	r3, [pc, #32]	; (800472c <HAL_RCC_ClockConfig+0x2f4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fd feae 	bl	8002470 <HAL_InitTick>
  
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3778      	adds	r7, #120	; 0x78
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40021000 	.word	0x40021000
 8004724:	0800ac3c 	.word	0x0800ac3c
 8004728:	20000000 	.word	0x20000000
 800472c:	20000004 	.word	0x20000004

08004730 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004730:	b480      	push	{r7}
 8004732:	b08b      	sub	sp, #44	; 0x2c
 8004734:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	2300      	movs	r3, #0
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	2300      	movs	r3, #0
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800474a:	4b29      	ldr	r3, [pc, #164]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	f003 030c 	and.w	r3, r3, #12
 8004756:	2b04      	cmp	r3, #4
 8004758:	d002      	beq.n	8004760 <HAL_RCC_GetSysClockFreq+0x30>
 800475a:	2b08      	cmp	r3, #8
 800475c:	d003      	beq.n	8004766 <HAL_RCC_GetSysClockFreq+0x36>
 800475e:	e03c      	b.n	80047da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004760:	4b24      	ldr	r3, [pc, #144]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004762:	623b      	str	r3, [r7, #32]
      break;
 8004764:	e03c      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800476c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004770:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	fa92 f2a2 	rbit	r2, r2
 8004778:	607a      	str	r2, [r7, #4]
  return result;
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	fab2 f282 	clz	r2, r2
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	40d3      	lsrs	r3, r2
 8004784:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004786:	5cd3      	ldrb	r3, [r2, r3]
 8004788:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800478a:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	220f      	movs	r2, #15
 8004794:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	fa92 f2a2 	rbit	r2, r2
 800479c:	60fa      	str	r2, [r7, #12]
  return result;
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	fab2 f282 	clz	r2, r2
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	40d3      	lsrs	r3, r2
 80047a8:	4a14      	ldr	r2, [pc, #80]	; (80047fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80047aa:	5cd3      	ldrb	r3, [r2, r3]
 80047ac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047b8:	4a0e      	ldr	r2, [pc, #56]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	fb02 f303 	mul.w	r3, r2, r3
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
 80047c8:	e004      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	4a0c      	ldr	r2, [pc, #48]	; (8004800 <HAL_RCC_GetSysClockFreq+0xd0>)
 80047ce:	fb02 f303 	mul.w	r3, r2, r3
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	623b      	str	r3, [r7, #32]
      break;
 80047d8:	e002      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047da:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047dc:	623b      	str	r3, [r7, #32]
      break;
 80047de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047e0:	6a3b      	ldr	r3, [r7, #32]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	372c      	adds	r7, #44	; 0x2c
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40021000 	.word	0x40021000
 80047f4:	007a1200 	.word	0x007a1200
 80047f8:	0800ac54 	.word	0x0800ac54
 80047fc:	0800ac64 	.word	0x0800ac64
 8004800:	003d0900 	.word	0x003d0900

08004804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <HAL_RCC_GetHCLKFreq+0x14>)
 800480a:	681b      	ldr	r3, [r3, #0]
}
 800480c:	4618      	mov	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	20000000 	.word	0x20000000

0800481c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004822:	f7ff ffef 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 8004826:	4601      	mov	r1, r0
 8004828:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004830:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004834:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	fa92 f2a2 	rbit	r2, r2
 800483c:	603a      	str	r2, [r7, #0]
  return result;
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	fab2 f282 	clz	r2, r2
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	40d3      	lsrs	r3, r2
 8004848:	4a04      	ldr	r2, [pc, #16]	; (800485c <HAL_RCC_GetPCLK1Freq+0x40>)
 800484a:	5cd3      	ldrb	r3, [r2, r3]
 800484c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40021000 	.word	0x40021000
 800485c:	0800ac4c 	.word	0x0800ac4c

08004860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004866:	f7ff ffcd 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 800486a:	4601      	mov	r1, r0
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004874:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004878:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	fa92 f2a2 	rbit	r2, r2
 8004880:	603a      	str	r2, [r7, #0]
  return result;
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	fab2 f282 	clz	r2, r2
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	40d3      	lsrs	r3, r2
 800488c:	4a04      	ldr	r2, [pc, #16]	; (80048a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800488e:	5cd3      	ldrb	r3, [r2, r3]
 8004890:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40021000 	.word	0x40021000
 80048a0:	0800ac4c 	.word	0x0800ac4c

080048a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b092      	sub	sp, #72	; 0x48
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80048b4:	2300      	movs	r3, #0
 80048b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 80d4 	beq.w	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048c8:	4b4e      	ldr	r3, [pc, #312]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10e      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048d4:	4b4b      	ldr	r3, [pc, #300]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	4a4a      	ldr	r2, [pc, #296]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048de:	61d3      	str	r3, [r2, #28]
 80048e0:	4b48      	ldr	r3, [pc, #288]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ec:	2301      	movs	r3, #1
 80048ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f2:	4b45      	ldr	r3, [pc, #276]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d118      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048fe:	4b42      	ldr	r3, [pc, #264]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a41      	ldr	r2, [pc, #260]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004908:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800490a:	f7fd fdf5 	bl	80024f8 <HAL_GetTick>
 800490e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004910:	e008      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004912:	f7fd fdf1 	bl	80024f8 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b64      	cmp	r3, #100	; 0x64
 800491e:	d901      	bls.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e169      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004924:	4b38      	ldr	r3, [pc, #224]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004930:	4b34      	ldr	r3, [pc, #208]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004938:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800493a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8084 	beq.w	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800494c:	429a      	cmp	r2, r3
 800494e:	d07c      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004950:	4b2c      	ldr	r3, [pc, #176]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800495a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800495e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	fa93 f3a3 	rbit	r3, r3
 8004966:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800496a:	fab3 f383 	clz	r3, r3
 800496e:	b2db      	uxtb	r3, r3
 8004970:	461a      	mov	r2, r3
 8004972:	4b26      	ldr	r3, [pc, #152]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	461a      	mov	r2, r3
 800497a:	2301      	movs	r3, #1
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004982:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004986:	fa93 f3a3 	rbit	r3, r3
 800498a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800498c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800498e:	fab3 f383 	clz	r3, r3
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	461a      	mov	r2, r3
 800499e:	2300      	movs	r3, #0
 80049a0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049a2:	4a18      	ldr	r2, [pc, #96]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80049a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d04b      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b2:	f7fd fda1 	bl	80024f8 <HAL_GetTick>
 80049b6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7fd fd9d 	bl	80024f8 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e113      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80049d0:	2302      	movs	r3, #2
 80049d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	fa93 f3a3 	rbit	r3, r3
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
 80049dc:	2302      	movs	r3, #2
 80049de:	623b      	str	r3, [r7, #32]
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	fa93 f3a3 	rbit	r3, r3
 80049e6:	61fb      	str	r3, [r7, #28]
  return result;
 80049e8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ea:	fab3 f383 	clz	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	f043 0302 	orr.w	r3, r3, #2
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d108      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80049fe:	4b01      	ldr	r3, [pc, #4]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	e00d      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004a04:	40021000 	.word	0x40021000
 8004a08:	40007000 	.word	0x40007000
 8004a0c:	10908100 	.word	0x10908100
 8004a10:	2302      	movs	r3, #2
 8004a12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	fa93 f3a3 	rbit	r3, r3
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	4b78      	ldr	r3, [pc, #480]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	2202      	movs	r2, #2
 8004a22:	613a      	str	r2, [r7, #16]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	fa92 f2a2 	rbit	r2, r2
 8004a2a:	60fa      	str	r2, [r7, #12]
  return result;
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	fab2 f282 	clz	r2, r2
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	f002 021f 	and.w	r2, r2, #31
 8004a3e:	2101      	movs	r1, #1
 8004a40:	fa01 f202 	lsl.w	r2, r1, r2
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0b7      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a4a:	4b6d      	ldr	r3, [pc, #436]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	496a      	ldr	r1, [pc, #424]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d105      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a64:	4b66      	ldr	r3, [pc, #408]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	4a65      	ldr	r2, [pc, #404]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a7c:	4b60      	ldr	r3, [pc, #384]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	f023 0203 	bic.w	r2, r3, #3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	495d      	ldr	r1, [pc, #372]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a9a:	4b59      	ldr	r3, [pc, #356]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	4956      	ldr	r1, [pc, #344]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ab8:	4b51      	ldr	r3, [pc, #324]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	494e      	ldr	r1, [pc, #312]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ad6:	4b4a      	ldr	r3, [pc, #296]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f023 0210 	bic.w	r2, r3, #16
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	4947      	ldr	r1, [pc, #284]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004af4:	4b42      	ldr	r3, [pc, #264]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	493f      	ldr	r1, [pc, #252]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b12:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b16:	f023 0220 	bic.w	r2, r3, #32
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	4938      	ldr	r1, [pc, #224]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b30:	4b33      	ldr	r3, [pc, #204]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	4930      	ldr	r1, [pc, #192]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0310 	and.w	r3, r3, #16
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d008      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b4e:	4b2c      	ldr	r3, [pc, #176]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	4929      	ldr	r1, [pc, #164]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b6c:	4b24      	ldr	r3, [pc, #144]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	4921      	ldr	r1, [pc, #132]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d008      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	491a      	ldr	r1, [pc, #104]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004ba8:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb4:	4912      	ldr	r1, [pc, #72]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d008      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004bc6:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	490b      	ldr	r1, [pc, #44]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004be4:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf0:	4903      	ldr	r1, [pc, #12]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3748      	adds	r7, #72	; 0x48
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40021000 	.word	0x40021000

08004c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e09d      	b.n	8004d52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d108      	bne.n	8004c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c26:	d009      	beq.n	8004c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	61da      	str	r2, [r3, #28]
 8004c2e:	e005      	b.n	8004c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fd f9d4 	bl	8002004 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c7c:	d902      	bls.n	8004c84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	e002      	b.n	8004c8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c92:	d007      	beq.n	8004ca4 <HAL_SPI_Init+0xa0>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c9c:	d002      	beq.n	8004ca4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	ea42 0103 	orr.w	r1, r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	0c1b      	lsrs	r3, r3, #16
 8004d00:	f003 0204 	and.w	r2, r3, #4
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d20:	ea42 0103 	orr.w	r1, r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b08a      	sub	sp, #40	; 0x28
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_SPI_TransmitReceive+0x26>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e1fb      	b.n	8005178 <HAL_SPI_TransmitReceive+0x41e>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d88:	f7fd fbb6 	bl	80024f8 <HAL_GetTick>
 8004d8c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d94:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004d9c:	887b      	ldrh	r3, [r7, #2]
 8004d9e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004da0:	887b      	ldrh	r3, [r7, #2]
 8004da2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004da4:	7efb      	ldrb	r3, [r7, #27]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d00e      	beq.n	8004dc8 <HAL_SPI_TransmitReceive+0x6e>
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004db0:	d106      	bne.n	8004dc0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d102      	bne.n	8004dc0 <HAL_SPI_TransmitReceive+0x66>
 8004dba:	7efb      	ldrb	r3, [r7, #27]
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d003      	beq.n	8004dc8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004dc6:	e1cd      	b.n	8005164 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_SPI_TransmitReceive+0x80>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <HAL_SPI_TransmitReceive+0x80>
 8004dd4:	887b      	ldrh	r3, [r7, #2]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d103      	bne.n	8004de2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004de0:	e1c0      	b.n	8005164 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d003      	beq.n	8004df6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2205      	movs	r2, #5
 8004df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	887a      	ldrh	r2, [r7, #2]
 8004e06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	887a      	ldrh	r2, [r7, #2]
 8004e0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	887a      	ldrh	r2, [r7, #2]
 8004e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	887a      	ldrh	r2, [r7, #2]
 8004e22:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e38:	d802      	bhi.n	8004e40 <HAL_SPI_TransmitReceive+0xe6>
 8004e3a:	8a3b      	ldrh	r3, [r7, #16]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d908      	bls.n	8004e52 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e4e:	605a      	str	r2, [r3, #4]
 8004e50:	e007      	b.n	8004e62 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e60:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	d007      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e88:	d97c      	bls.n	8004f84 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_SPI_TransmitReceive+0x13e>
 8004e92:	8a7b      	ldrh	r3, [r7, #18]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d169      	bne.n	8004f6c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	881a      	ldrh	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea8:	1c9a      	adds	r2, r3, #2
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ebc:	e056      	b.n	8004f6c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d11b      	bne.n	8004f04 <HAL_SPI_TransmitReceive+0x1aa>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d016      	beq.n	8004f04 <HAL_SPI_TransmitReceive+0x1aa>
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d113      	bne.n	8004f04 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	881a      	ldrh	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	1c9a      	adds	r2, r3, #2
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d11c      	bne.n	8004f4c <HAL_SPI_TransmitReceive+0x1f2>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d016      	beq.n	8004f4c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	b292      	uxth	r2, r2
 8004f2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	1c9a      	adds	r2, r3, #2
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f4c:	f7fd fad4 	bl	80024f8 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d807      	bhi.n	8004f6c <HAL_SPI_TransmitReceive+0x212>
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f62:	d003      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f6a:	e0fb      	b.n	8005164 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1a3      	bne.n	8004ebe <HAL_SPI_TransmitReceive+0x164>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d19d      	bne.n	8004ebe <HAL_SPI_TransmitReceive+0x164>
 8004f82:	e0df      	b.n	8005144 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_SPI_TransmitReceive+0x23a>
 8004f8c:	8a7b      	ldrh	r3, [r7, #18]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	f040 80cb 	bne.w	800512a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d912      	bls.n	8004fc4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa2:	881a      	ldrh	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	1c9a      	adds	r2, r3, #2
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b02      	subs	r3, #2
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fc2:	e0b2      	b.n	800512a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	7812      	ldrb	r2, [r2, #0]
 8004fd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fea:	e09e      	b.n	800512a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d134      	bne.n	8005064 <HAL_SPI_TransmitReceive+0x30a>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d02f      	beq.n	8005064 <HAL_SPI_TransmitReceive+0x30a>
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	2b01      	cmp	r3, #1
 8005008:	d12c      	bne.n	8005064 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d912      	bls.n	800503a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	881a      	ldrh	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	1c9a      	adds	r2, r3, #2
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b02      	subs	r3, #2
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005038:	e012      	b.n	8005060 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	330c      	adds	r3, #12
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b01      	cmp	r3, #1
 8005070:	d148      	bne.n	8005104 <HAL_SPI_TransmitReceive+0x3aa>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d042      	beq.n	8005104 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b01      	cmp	r3, #1
 8005088:	d923      	bls.n	80050d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	b292      	uxth	r2, r2
 8005096:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	1c9a      	adds	r2, r3, #2
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b02      	subs	r3, #2
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d81f      	bhi.n	8005100 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050ce:	605a      	str	r2, [r3, #4]
 80050d0:	e016      	b.n	8005100 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f103 020c 	add.w	r2, r3, #12
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	7812      	ldrb	r2, [r2, #0]
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005100:	2301      	movs	r3, #1
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005104:	f7fd f9f8 	bl	80024f8 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005110:	429a      	cmp	r2, r3
 8005112:	d803      	bhi.n	800511c <HAL_SPI_TransmitReceive+0x3c2>
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511a:	d102      	bne.n	8005122 <HAL_SPI_TransmitReceive+0x3c8>
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	2b00      	cmp	r3, #0
 8005120:	d103      	bne.n	800512a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005128:	e01c      	b.n	8005164 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	f47f af5b 	bne.w	8004fec <HAL_SPI_TransmitReceive+0x292>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	f47f af54 	bne.w	8004fec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f92f 	bl	80053ac <SPI_EndRxTxTransaction>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d006      	beq.n	8005162 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	661a      	str	r2, [r3, #96]	; 0x60
 8005160:	e000      	b.n	8005164 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005162:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005178:	4618      	mov	r0, r3
 800517a:	3728      	adds	r7, #40	; 0x28
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	603b      	str	r3, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005190:	f7fd f9b2 	bl	80024f8 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	1a9b      	subs	r3, r3, r2
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	4413      	add	r3, r2
 800519e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051a0:	f7fd f9aa 	bl	80024f8 <HAL_GetTick>
 80051a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051a6:	4b39      	ldr	r3, [pc, #228]	; (800528c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	015b      	lsls	r3, r3, #5
 80051ac:	0d1b      	lsrs	r3, r3, #20
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	fb02 f303 	mul.w	r3, r2, r3
 80051b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051b6:	e054      	b.n	8005262 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051be:	d050      	beq.n	8005262 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051c0:	f7fd f99a 	bl	80024f8 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d902      	bls.n	80051d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d13d      	bne.n	8005252 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ee:	d111      	bne.n	8005214 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f8:	d004      	beq.n	8005204 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005202:	d107      	bne.n	8005214 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005212:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800521c:	d10f      	bne.n	800523e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800523c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e017      	b.n	8005282 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	3b01      	subs	r3, #1
 8005260:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4013      	ands	r3, r2
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	bf0c      	ite	eq
 8005272:	2301      	moveq	r3, #1
 8005274:	2300      	movne	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	461a      	mov	r2, r3
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	429a      	cmp	r2, r3
 800527e:	d19b      	bne.n	80051b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000000 	.word	0x20000000

08005290 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800529e:	f7fd f92b 	bl	80024f8 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	4413      	add	r3, r2
 80052ac:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052ae:	f7fd f923 	bl	80024f8 <HAL_GetTick>
 80052b2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80052b4:	4b3c      	ldr	r3, [pc, #240]	; (80053a8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	00da      	lsls	r2, r3, #3
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	0d1b      	lsrs	r3, r3, #20
 80052c4:	69fa      	ldr	r2, [r7, #28]
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
 80052ca:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80052cc:	e05f      	b.n	800538e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80052d4:	d106      	bne.n	80052e4 <SPI_WaitFifoStateUntilTimeout+0x54>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d103      	bne.n	80052e4 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	330c      	adds	r3, #12
 80052e2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d050      	beq.n	800538e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052ec:	f7fd f904 	bl	80024f8 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d902      	bls.n	8005302 <SPI_WaitFifoStateUntilTimeout+0x72>
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d13d      	bne.n	800537e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005310:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800531a:	d111      	bne.n	8005340 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005324:	d004      	beq.n	8005330 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800532e:	d107      	bne.n	8005340 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800533e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005348:	d10f      	bne.n	800536a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005368:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e010      	b.n	80053a0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	3b01      	subs	r3, #1
 800538c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4013      	ands	r3, r2
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	429a      	cmp	r2, r3
 800539c:	d197      	bne.n	80052ce <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3720      	adds	r7, #32
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	20000000 	.word	0x20000000

080053ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af02      	add	r7, sp, #8
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2200      	movs	r2, #0
 80053c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f7ff ff63 	bl	8005290 <SPI_WaitFifoStateUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d007      	beq.n	80053e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d4:	f043 0220 	orr.w	r2, r3, #32
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e027      	b.n	8005430 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2200      	movs	r2, #0
 80053e8:	2180      	movs	r1, #128	; 0x80
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f7ff fec8 	bl	8005180 <SPI_WaitFlagStateUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d007      	beq.n	8005406 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fa:	f043 0220 	orr.w	r2, r3, #32
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e014      	b.n	8005430 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2200      	movs	r2, #0
 800540e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f7ff ff3c 	bl	8005290 <SPI_WaitFifoStateUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d007      	beq.n	800542e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005422:	f043 0220 	orr.w	r2, r3, #32
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e000      	b.n	8005430 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e040      	b.n	80054cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fc ff7e 	bl	800235c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2224      	movs	r2, #36	; 0x24
 8005464:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0201 	bic.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fad6 	bl	8005a28 <UART_SetConfig>
 800547c:	4603      	mov	r3, r0
 800547e:	2b01      	cmp	r3, #1
 8005480:	d101      	bne.n	8005486 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e022      	b.n	80054cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fc9e 	bl	8005dd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fd25 	bl	8005f14 <UART_CheckIdleState>
 80054ca:	4603      	mov	r3, r0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08a      	sub	sp, #40	; 0x28
 80054d8:	af02      	add	r7, sp, #8
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	4613      	mov	r3, r2
 80054e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	f040 8082 	bne.w	80055f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <HAL_UART_Transmit+0x26>
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e07a      	b.n	80055f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_UART_Transmit+0x38>
 8005508:	2302      	movs	r3, #2
 800550a:	e073      	b.n	80055f4 <HAL_UART_Transmit+0x120>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2221      	movs	r2, #33	; 0x21
 8005520:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005522:	f7fc ffe9 	bl	80024f8 <HAL_GetTick>
 8005526:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	88fa      	ldrh	r2, [r7, #6]
 8005534:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005540:	d108      	bne.n	8005554 <HAL_UART_Transmit+0x80>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d104      	bne.n	8005554 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	e003      	b.n	800555c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005558:	2300      	movs	r3, #0
 800555a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005564:	e02d      	b.n	80055c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2200      	movs	r2, #0
 800556e:	2180      	movs	r1, #128	; 0x80
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 fd18 	bl	8005fa6 <UART_WaitOnFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e039      	b.n	80055f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10b      	bne.n	800559e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	881a      	ldrh	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005592:	b292      	uxth	r2, r2
 8005594:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	3302      	adds	r3, #2
 800559a:	61bb      	str	r3, [r7, #24]
 800559c:	e008      	b.n	80055b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	781a      	ldrb	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	b292      	uxth	r2, r2
 80055a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	3301      	adds	r3, #1
 80055ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1cb      	bne.n	8005566 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2200      	movs	r2, #0
 80055d6:	2140      	movs	r1, #64	; 0x40
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 fce4 	bl	8005fa6 <UART_WaitOnFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e005      	b.n	80055f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e000      	b.n	80055f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80055f2:	2302      	movs	r3, #2
  }
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005622:	4013      	ands	r3, r2
 8005624:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d113      	bne.n	8005654 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00e      	beq.n	8005654 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	d009      	beq.n	8005654 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 81cc 	beq.w	80059e2 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	4798      	blx	r3
      }
      return;
 8005652:	e1c6      	b.n	80059e2 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 80e3 	beq.w	8005822 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d105      	bne.n	8005672 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4ba5      	ldr	r3, [pc, #660]	; (8005900 <HAL_UART_IRQHandler+0x304>)
 800566a:	4013      	ands	r3, r2
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 80d8 	beq.w	8005822 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d010      	beq.n	800569e <HAL_UART_IRQHandler+0xa2>
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00b      	beq.n	800569e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2201      	movs	r2, #1
 800568c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005694:	f043 0201 	orr.w	r2, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d010      	beq.n	80056ca <HAL_UART_IRQHandler+0xce>
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00b      	beq.n	80056ca <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2202      	movs	r2, #2
 80056b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056c0:	f043 0204 	orr.w	r2, r3, #4
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d010      	beq.n	80056f6 <HAL_UART_IRQHandler+0xfa>
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2204      	movs	r2, #4
 80056e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ec:	f043 0202 	orr.w	r2, r3, #2
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d015      	beq.n	800572c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d104      	bne.n	8005714 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00b      	beq.n	800572c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2208      	movs	r2, #8
 800571a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005722:	f043 0208 	orr.w	r2, r3, #8
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005732:	2b00      	cmp	r3, #0
 8005734:	d011      	beq.n	800575a <HAL_UART_IRQHandler+0x15e>
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00c      	beq.n	800575a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005748:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005750:	f043 0220 	orr.w	r2, r3, #32
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 8140 	beq.w	80059e6 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00c      	beq.n	800578a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005790:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579c:	2b40      	cmp	r3, #64	; 0x40
 800579e:	d004      	beq.n	80057aa <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d031      	beq.n	800580e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fc77 	bl	800609e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	d123      	bne.n	8005806 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d013      	beq.n	80057fe <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	4a4a      	ldr	r2, [pc, #296]	; (8005904 <HAL_UART_IRQHandler+0x308>)
 80057dc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fc ffde 	bl	80027a4 <HAL_DMA_Abort_IT>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d017      	beq.n	800581e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80057f8:	4610      	mov	r0, r2
 80057fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	e00f      	b.n	800581e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f8fc 	bl	80059fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005804:	e00b      	b.n	800581e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f8f8 	bl	80059fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800580c:	e007      	b.n	800581e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f8f4 	bl	80059fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800581c:	e0e3      	b.n	80059e6 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800581e:	bf00      	nop
    return;
 8005820:	e0e1      	b.n	80059e6 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005826:	2b01      	cmp	r3, #1
 8005828:	f040 80a7 	bne.w	800597a <HAL_UART_IRQHandler+0x37e>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 80a1 	beq.w	800597a <HAL_UART_IRQHandler+0x37e>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 809b 	beq.w	800597a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2210      	movs	r2, #16
 800584a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b40      	cmp	r3, #64	; 0x40
 8005858:	d156      	bne.n	8005908 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005864:	893b      	ldrh	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 80bf 	beq.w	80059ea <HAL_UART_IRQHandler+0x3ee>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005872:	893a      	ldrh	r2, [r7, #8]
 8005874:	429a      	cmp	r2, r3
 8005876:	f080 80b8 	bcs.w	80059ea <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	893a      	ldrh	r2, [r7, #8]
 800587e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	2b20      	cmp	r3, #32
 800588a:	d02a      	beq.n	80058e2 <HAL_UART_IRQHandler+0x2e6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800589a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0201 	bic.w	r2, r2, #1
 80058aa:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ba:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0210 	bic.w	r2, r2, #16
 80058d6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fc ff28 	bl	8002732 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f88a 	bl	8005a10 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80058fc:	e075      	b.n	80059ea <HAL_UART_IRQHandler+0x3ee>
 80058fe:	bf00      	nop
 8005900:	04000120 	.word	0x04000120
 8005904:	080060fd 	.word	0x080060fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005914:	b29b      	uxth	r3, r3
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d063      	beq.n	80059ee <HAL_UART_IRQHandler+0x3f2>
          &&(nb_rx_data > 0U) )
 8005926:	897b      	ldrh	r3, [r7, #10]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d060      	beq.n	80059ee <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800593a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0210 	bic.w	r2, r2, #16
 800596c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800596e:	897b      	ldrh	r3, [r7, #10]
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f84c 	bl	8005a10 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005978:	e039      	b.n	80059ee <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00d      	beq.n	80059a0 <HAL_UART_IRQHandler+0x3a4>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d008      	beq.n	80059a0 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005996:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fbde 	bl	800615a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800599e:	e029      	b.n	80059f4 <HAL_UART_IRQHandler+0x3f8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00d      	beq.n	80059c6 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d008      	beq.n	80059c6 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01a      	beq.n	80059f2 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	4798      	blx	r3
    }
    return;
 80059c4:	e015      	b.n	80059f2 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d011      	beq.n	80059f4 <HAL_UART_IRQHandler+0x3f8>
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00c      	beq.n	80059f4 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fba4 	bl	8006128 <UART_EndTransmit_IT>
    return;
 80059e0:	e008      	b.n	80059f4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80059e2:	bf00      	nop
 80059e4:	e006      	b.n	80059f4 <HAL_UART_IRQHandler+0x3f8>
    return;
 80059e6:	bf00      	nop
 80059e8:	e004      	b.n	80059f4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80059ea:	bf00      	nop
 80059ec:	e002      	b.n	80059f4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80059ee:	bf00      	nop
 80059f0:	e000      	b.n	80059f4 <HAL_UART_IRQHandler+0x3f8>
    return;
 80059f2:	bf00      	nop
  }

}
 80059f4:	3720      	adds	r7, #32
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop

080059fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005a56:	f023 030c 	bic.w	r3, r3, #12
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	6979      	ldr	r1, [r7, #20]
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4aae      	ldr	r2, [pc, #696]	; (8005d5c <UART_SetConfig+0x334>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d120      	bne.n	8005aea <UART_SetConfig+0xc2>
 8005aa8:	4bad      	ldr	r3, [pc, #692]	; (8005d60 <UART_SetConfig+0x338>)
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d817      	bhi.n	8005ae4 <UART_SetConfig+0xbc>
 8005ab4:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <UART_SetConfig+0x94>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005acd 	.word	0x08005acd
 8005ac0:	08005ad9 	.word	0x08005ad9
 8005ac4:	08005adf 	.word	0x08005adf
 8005ac8:	08005ad3 	.word	0x08005ad3
 8005acc:	2301      	movs	r3, #1
 8005ace:	77fb      	strb	r3, [r7, #31]
 8005ad0:	e0b5      	b.n	8005c3e <UART_SetConfig+0x216>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	77fb      	strb	r3, [r7, #31]
 8005ad6:	e0b2      	b.n	8005c3e <UART_SetConfig+0x216>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	77fb      	strb	r3, [r7, #31]
 8005adc:	e0af      	b.n	8005c3e <UART_SetConfig+0x216>
 8005ade:	2308      	movs	r3, #8
 8005ae0:	77fb      	strb	r3, [r7, #31]
 8005ae2:	e0ac      	b.n	8005c3e <UART_SetConfig+0x216>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	77fb      	strb	r3, [r7, #31]
 8005ae8:	e0a9      	b.n	8005c3e <UART_SetConfig+0x216>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a9d      	ldr	r2, [pc, #628]	; (8005d64 <UART_SetConfig+0x33c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d124      	bne.n	8005b3e <UART_SetConfig+0x116>
 8005af4:	4b9a      	ldr	r3, [pc, #616]	; (8005d60 <UART_SetConfig+0x338>)
 8005af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005afc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b00:	d011      	beq.n	8005b26 <UART_SetConfig+0xfe>
 8005b02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b06:	d817      	bhi.n	8005b38 <UART_SetConfig+0x110>
 8005b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b0c:	d011      	beq.n	8005b32 <UART_SetConfig+0x10a>
 8005b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b12:	d811      	bhi.n	8005b38 <UART_SetConfig+0x110>
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <UART_SetConfig+0xf8>
 8005b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1c:	d006      	beq.n	8005b2c <UART_SetConfig+0x104>
 8005b1e:	e00b      	b.n	8005b38 <UART_SetConfig+0x110>
 8005b20:	2300      	movs	r3, #0
 8005b22:	77fb      	strb	r3, [r7, #31]
 8005b24:	e08b      	b.n	8005c3e <UART_SetConfig+0x216>
 8005b26:	2302      	movs	r3, #2
 8005b28:	77fb      	strb	r3, [r7, #31]
 8005b2a:	e088      	b.n	8005c3e <UART_SetConfig+0x216>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	77fb      	strb	r3, [r7, #31]
 8005b30:	e085      	b.n	8005c3e <UART_SetConfig+0x216>
 8005b32:	2308      	movs	r3, #8
 8005b34:	77fb      	strb	r3, [r7, #31]
 8005b36:	e082      	b.n	8005c3e <UART_SetConfig+0x216>
 8005b38:	2310      	movs	r3, #16
 8005b3a:	77fb      	strb	r3, [r7, #31]
 8005b3c:	e07f      	b.n	8005c3e <UART_SetConfig+0x216>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a89      	ldr	r2, [pc, #548]	; (8005d68 <UART_SetConfig+0x340>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d124      	bne.n	8005b92 <UART_SetConfig+0x16a>
 8005b48:	4b85      	ldr	r3, [pc, #532]	; (8005d60 <UART_SetConfig+0x338>)
 8005b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005b50:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b54:	d011      	beq.n	8005b7a <UART_SetConfig+0x152>
 8005b56:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b5a:	d817      	bhi.n	8005b8c <UART_SetConfig+0x164>
 8005b5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b60:	d011      	beq.n	8005b86 <UART_SetConfig+0x15e>
 8005b62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b66:	d811      	bhi.n	8005b8c <UART_SetConfig+0x164>
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <UART_SetConfig+0x14c>
 8005b6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b70:	d006      	beq.n	8005b80 <UART_SetConfig+0x158>
 8005b72:	e00b      	b.n	8005b8c <UART_SetConfig+0x164>
 8005b74:	2300      	movs	r3, #0
 8005b76:	77fb      	strb	r3, [r7, #31]
 8005b78:	e061      	b.n	8005c3e <UART_SetConfig+0x216>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	77fb      	strb	r3, [r7, #31]
 8005b7e:	e05e      	b.n	8005c3e <UART_SetConfig+0x216>
 8005b80:	2304      	movs	r3, #4
 8005b82:	77fb      	strb	r3, [r7, #31]
 8005b84:	e05b      	b.n	8005c3e <UART_SetConfig+0x216>
 8005b86:	2308      	movs	r3, #8
 8005b88:	77fb      	strb	r3, [r7, #31]
 8005b8a:	e058      	b.n	8005c3e <UART_SetConfig+0x216>
 8005b8c:	2310      	movs	r3, #16
 8005b8e:	77fb      	strb	r3, [r7, #31]
 8005b90:	e055      	b.n	8005c3e <UART_SetConfig+0x216>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a75      	ldr	r2, [pc, #468]	; (8005d6c <UART_SetConfig+0x344>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d124      	bne.n	8005be6 <UART_SetConfig+0x1be>
 8005b9c:	4b70      	ldr	r3, [pc, #448]	; (8005d60 <UART_SetConfig+0x338>)
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005ba4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ba8:	d011      	beq.n	8005bce <UART_SetConfig+0x1a6>
 8005baa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bae:	d817      	bhi.n	8005be0 <UART_SetConfig+0x1b8>
 8005bb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bb4:	d011      	beq.n	8005bda <UART_SetConfig+0x1b2>
 8005bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bba:	d811      	bhi.n	8005be0 <UART_SetConfig+0x1b8>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <UART_SetConfig+0x1a0>
 8005bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bc4:	d006      	beq.n	8005bd4 <UART_SetConfig+0x1ac>
 8005bc6:	e00b      	b.n	8005be0 <UART_SetConfig+0x1b8>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	77fb      	strb	r3, [r7, #31]
 8005bcc:	e037      	b.n	8005c3e <UART_SetConfig+0x216>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	77fb      	strb	r3, [r7, #31]
 8005bd2:	e034      	b.n	8005c3e <UART_SetConfig+0x216>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	77fb      	strb	r3, [r7, #31]
 8005bd8:	e031      	b.n	8005c3e <UART_SetConfig+0x216>
 8005bda:	2308      	movs	r3, #8
 8005bdc:	77fb      	strb	r3, [r7, #31]
 8005bde:	e02e      	b.n	8005c3e <UART_SetConfig+0x216>
 8005be0:	2310      	movs	r3, #16
 8005be2:	77fb      	strb	r3, [r7, #31]
 8005be4:	e02b      	b.n	8005c3e <UART_SetConfig+0x216>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a61      	ldr	r2, [pc, #388]	; (8005d70 <UART_SetConfig+0x348>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d124      	bne.n	8005c3a <UART_SetConfig+0x212>
 8005bf0:	4b5b      	ldr	r3, [pc, #364]	; (8005d60 <UART_SetConfig+0x338>)
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005bf8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005bfc:	d011      	beq.n	8005c22 <UART_SetConfig+0x1fa>
 8005bfe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c02:	d817      	bhi.n	8005c34 <UART_SetConfig+0x20c>
 8005c04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c08:	d011      	beq.n	8005c2e <UART_SetConfig+0x206>
 8005c0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c0e:	d811      	bhi.n	8005c34 <UART_SetConfig+0x20c>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <UART_SetConfig+0x1f4>
 8005c14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c18:	d006      	beq.n	8005c28 <UART_SetConfig+0x200>
 8005c1a:	e00b      	b.n	8005c34 <UART_SetConfig+0x20c>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	77fb      	strb	r3, [r7, #31]
 8005c20:	e00d      	b.n	8005c3e <UART_SetConfig+0x216>
 8005c22:	2302      	movs	r3, #2
 8005c24:	77fb      	strb	r3, [r7, #31]
 8005c26:	e00a      	b.n	8005c3e <UART_SetConfig+0x216>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	77fb      	strb	r3, [r7, #31]
 8005c2c:	e007      	b.n	8005c3e <UART_SetConfig+0x216>
 8005c2e:	2308      	movs	r3, #8
 8005c30:	77fb      	strb	r3, [r7, #31]
 8005c32:	e004      	b.n	8005c3e <UART_SetConfig+0x216>
 8005c34:	2310      	movs	r3, #16
 8005c36:	77fb      	strb	r3, [r7, #31]
 8005c38:	e001      	b.n	8005c3e <UART_SetConfig+0x216>
 8005c3a:	2310      	movs	r3, #16
 8005c3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c46:	d15c      	bne.n	8005d02 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8005c48:	7ffb      	ldrb	r3, [r7, #31]
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d827      	bhi.n	8005c9e <UART_SetConfig+0x276>
 8005c4e:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <UART_SetConfig+0x22c>)
 8005c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c54:	08005c79 	.word	0x08005c79
 8005c58:	08005c81 	.word	0x08005c81
 8005c5c:	08005c89 	.word	0x08005c89
 8005c60:	08005c9f 	.word	0x08005c9f
 8005c64:	08005c8f 	.word	0x08005c8f
 8005c68:	08005c9f 	.word	0x08005c9f
 8005c6c:	08005c9f 	.word	0x08005c9f
 8005c70:	08005c9f 	.word	0x08005c9f
 8005c74:	08005c97 	.word	0x08005c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c78:	f7fe fdd0 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 8005c7c:	61b8      	str	r0, [r7, #24]
        break;
 8005c7e:	e013      	b.n	8005ca8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c80:	f7fe fdee 	bl	8004860 <HAL_RCC_GetPCLK2Freq>
 8005c84:	61b8      	str	r0, [r7, #24]
        break;
 8005c86:	e00f      	b.n	8005ca8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c88:	4b3a      	ldr	r3, [pc, #232]	; (8005d74 <UART_SetConfig+0x34c>)
 8005c8a:	61bb      	str	r3, [r7, #24]
        break;
 8005c8c:	e00c      	b.n	8005ca8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c8e:	f7fe fd4f 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 8005c92:	61b8      	str	r0, [r7, #24]
        break;
 8005c94:	e008      	b.n	8005ca8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c9a:	61bb      	str	r3, [r7, #24]
        break;
 8005c9c:	e004      	b.n	8005ca8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ca6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8085 	beq.w	8005dba <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	005a      	lsls	r2, r3, #1
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	085b      	lsrs	r3, r3, #1
 8005cba:	441a      	add	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	2b0f      	cmp	r3, #15
 8005ccc:	d916      	bls.n	8005cfc <UART_SetConfig+0x2d4>
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd4:	d212      	bcs.n	8005cfc <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	f023 030f 	bic.w	r3, r3, #15
 8005cde:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	89fb      	ldrh	r3, [r7, #14]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	89fa      	ldrh	r2, [r7, #14]
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	e05e      	b.n	8005dba <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	77bb      	strb	r3, [r7, #30]
 8005d00:	e05b      	b.n	8005dba <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d02:	7ffb      	ldrb	r3, [r7, #31]
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d837      	bhi.n	8005d78 <UART_SetConfig+0x350>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <UART_SetConfig+0x2e8>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005d35 	.word	0x08005d35
 8005d14:	08005d3d 	.word	0x08005d3d
 8005d18:	08005d45 	.word	0x08005d45
 8005d1c:	08005d79 	.word	0x08005d79
 8005d20:	08005d4b 	.word	0x08005d4b
 8005d24:	08005d79 	.word	0x08005d79
 8005d28:	08005d79 	.word	0x08005d79
 8005d2c:	08005d79 	.word	0x08005d79
 8005d30:	08005d53 	.word	0x08005d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d34:	f7fe fd72 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 8005d38:	61b8      	str	r0, [r7, #24]
        break;
 8005d3a:	e022      	b.n	8005d82 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d3c:	f7fe fd90 	bl	8004860 <HAL_RCC_GetPCLK2Freq>
 8005d40:	61b8      	str	r0, [r7, #24]
        break;
 8005d42:	e01e      	b.n	8005d82 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d44:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <UART_SetConfig+0x34c>)
 8005d46:	61bb      	str	r3, [r7, #24]
        break;
 8005d48:	e01b      	b.n	8005d82 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d4a:	f7fe fcf1 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 8005d4e:	61b8      	str	r0, [r7, #24]
        break;
 8005d50:	e017      	b.n	8005d82 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d56:	61bb      	str	r3, [r7, #24]
        break;
 8005d58:	e013      	b.n	8005d82 <UART_SetConfig+0x35a>
 8005d5a:	bf00      	nop
 8005d5c:	40013800 	.word	0x40013800
 8005d60:	40021000 	.word	0x40021000
 8005d64:	40004400 	.word	0x40004400
 8005d68:	40004800 	.word	0x40004800
 8005d6c:	40004c00 	.word	0x40004c00
 8005d70:	40005000 	.word	0x40005000
 8005d74:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	77bb      	strb	r3, [r7, #30]
        break;
 8005d80:	bf00      	nop
    }

    if (pclk != 0U)
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d018      	beq.n	8005dba <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	085a      	lsrs	r2, r3, #1
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	441a      	add	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	2b0f      	cmp	r3, #15
 8005da2:	d908      	bls.n	8005db6 <UART_SetConfig+0x38e>
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005daa:	d204      	bcs.n	8005db6 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	60da      	str	r2, [r3, #12]
 8005db4:	e001      	b.n	8005dba <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005dc6:	7fbb      	ldrb	r3, [r7, #30]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3720      	adds	r7, #32
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00a      	beq.n	8005dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	f003 0310 	and.w	r3, r3, #16
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01a      	beq.n	8005ee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ece:	d10a      	bne.n	8005ee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	605a      	str	r2, [r3, #4]
  }
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f24:	f7fc fae8 	bl	80024f8 <HAL_GetTick>
 8005f28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d10e      	bne.n	8005f56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f82d 	bl	8005fa6 <UART_WaitOnFlagUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e023      	b.n	8005f9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d10e      	bne.n	8005f82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f817 	bl	8005fa6 <UART_WaitOnFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e00d      	b.n	8005f9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	603b      	str	r3, [r7, #0]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb6:	e05e      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbe:	d05a      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc0:	f7fc fa9a 	bl	80024f8 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d302      	bcc.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d11b      	bne.n	800600e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fe4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2220      	movs	r2, #32
 8006000:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e043      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d02c      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602a:	d124      	bne.n	8006076 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006034:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006044:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0201 	bic.w	r2, r2, #1
 8006054:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e00f      	b.n	8006096 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	4013      	ands	r3, r2
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	429a      	cmp	r2, r3
 8006084:	bf0c      	ite	eq
 8006086:	2301      	moveq	r3, #1
 8006088:	2300      	movne	r3, #0
 800608a:	b2db      	uxtb	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	429a      	cmp	r2, r3
 8006092:	d091      	beq.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060b4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0201 	bic.w	r2, r2, #1
 80060c4:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d107      	bne.n	80060de <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0210 	bic.w	r2, r2, #16
 80060dc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	665a      	str	r2, [r3, #100]	; 0x64
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2200      	movs	r2, #0
 800610e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f7ff fc6e 	bl	80059fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006120:	bf00      	nop
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800613e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7fb ff0b 	bl	8001f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006152:	bf00      	nop
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <__errno>:
 8006170:	4b01      	ldr	r3, [pc, #4]	; (8006178 <__errno+0x8>)
 8006172:	6818      	ldr	r0, [r3, #0]
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	2000000c 	.word	0x2000000c

0800617c <__libc_init_array>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	4d0d      	ldr	r5, [pc, #52]	; (80061b4 <__libc_init_array+0x38>)
 8006180:	4c0d      	ldr	r4, [pc, #52]	; (80061b8 <__libc_init_array+0x3c>)
 8006182:	1b64      	subs	r4, r4, r5
 8006184:	10a4      	asrs	r4, r4, #2
 8006186:	2600      	movs	r6, #0
 8006188:	42a6      	cmp	r6, r4
 800618a:	d109      	bne.n	80061a0 <__libc_init_array+0x24>
 800618c:	4d0b      	ldr	r5, [pc, #44]	; (80061bc <__libc_init_array+0x40>)
 800618e:	4c0c      	ldr	r4, [pc, #48]	; (80061c0 <__libc_init_array+0x44>)
 8006190:	f004 fd2e 	bl	800abf0 <_init>
 8006194:	1b64      	subs	r4, r4, r5
 8006196:	10a4      	asrs	r4, r4, #2
 8006198:	2600      	movs	r6, #0
 800619a:	42a6      	cmp	r6, r4
 800619c:	d105      	bne.n	80061aa <__libc_init_array+0x2e>
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061a4:	4798      	blx	r3
 80061a6:	3601      	adds	r6, #1
 80061a8:	e7ee      	b.n	8006188 <__libc_init_array+0xc>
 80061aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ae:	4798      	blx	r3
 80061b0:	3601      	adds	r6, #1
 80061b2:	e7f2      	b.n	800619a <__libc_init_array+0x1e>
 80061b4:	0800b01c 	.word	0x0800b01c
 80061b8:	0800b01c 	.word	0x0800b01c
 80061bc:	0800b01c 	.word	0x0800b01c
 80061c0:	0800b024 	.word	0x0800b024

080061c4 <memset>:
 80061c4:	4402      	add	r2, r0
 80061c6:	4603      	mov	r3, r0
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d100      	bne.n	80061ce <memset+0xa>
 80061cc:	4770      	bx	lr
 80061ce:	f803 1b01 	strb.w	r1, [r3], #1
 80061d2:	e7f9      	b.n	80061c8 <memset+0x4>

080061d4 <snprintf>:
 80061d4:	b40c      	push	{r2, r3}
 80061d6:	b530      	push	{r4, r5, lr}
 80061d8:	4b17      	ldr	r3, [pc, #92]	; (8006238 <snprintf+0x64>)
 80061da:	1e0c      	subs	r4, r1, #0
 80061dc:	681d      	ldr	r5, [r3, #0]
 80061de:	b09d      	sub	sp, #116	; 0x74
 80061e0:	da08      	bge.n	80061f4 <snprintf+0x20>
 80061e2:	238b      	movs	r3, #139	; 0x8b
 80061e4:	602b      	str	r3, [r5, #0]
 80061e6:	f04f 30ff 	mov.w	r0, #4294967295
 80061ea:	b01d      	add	sp, #116	; 0x74
 80061ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061f0:	b002      	add	sp, #8
 80061f2:	4770      	bx	lr
 80061f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80061f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80061fc:	bf14      	ite	ne
 80061fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006202:	4623      	moveq	r3, r4
 8006204:	9304      	str	r3, [sp, #16]
 8006206:	9307      	str	r3, [sp, #28]
 8006208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800620c:	9002      	str	r0, [sp, #8]
 800620e:	9006      	str	r0, [sp, #24]
 8006210:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006214:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006216:	ab21      	add	r3, sp, #132	; 0x84
 8006218:	a902      	add	r1, sp, #8
 800621a:	4628      	mov	r0, r5
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	f000 f80f 	bl	8006240 <_svfprintf_r>
 8006222:	1c43      	adds	r3, r0, #1
 8006224:	bfbc      	itt	lt
 8006226:	238b      	movlt	r3, #139	; 0x8b
 8006228:	602b      	strlt	r3, [r5, #0]
 800622a:	2c00      	cmp	r4, #0
 800622c:	d0dd      	beq.n	80061ea <snprintf+0x16>
 800622e:	9b02      	ldr	r3, [sp, #8]
 8006230:	2200      	movs	r2, #0
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	e7d9      	b.n	80061ea <snprintf+0x16>
 8006236:	bf00      	nop
 8006238:	2000000c 	.word	0x2000000c
 800623c:	00000000 	.word	0x00000000

08006240 <_svfprintf_r>:
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	ed2d 8b04 	vpush	{d8-d9}
 8006248:	b0cf      	sub	sp, #316	; 0x13c
 800624a:	4689      	mov	r9, r1
 800624c:	4693      	mov	fp, r2
 800624e:	461e      	mov	r6, r3
 8006250:	4682      	mov	sl, r0
 8006252:	f002 f96d 	bl	8008530 <_localeconv_r>
 8006256:	6803      	ldr	r3, [r0, #0]
 8006258:	9313      	str	r3, [sp, #76]	; 0x4c
 800625a:	4618      	mov	r0, r3
 800625c:	f7fa f808 	bl	8000270 <strlen>
 8006260:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006264:	900e      	str	r0, [sp, #56]	; 0x38
 8006266:	0618      	lsls	r0, r3, #24
 8006268:	d51a      	bpl.n	80062a0 <_svfprintf_r+0x60>
 800626a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800626e:	b9bb      	cbnz	r3, 80062a0 <_svfprintf_r+0x60>
 8006270:	2140      	movs	r1, #64	; 0x40
 8006272:	4650      	mov	r0, sl
 8006274:	f002 f964 	bl	8008540 <_malloc_r>
 8006278:	f8c9 0000 	str.w	r0, [r9]
 800627c:	f8c9 0010 	str.w	r0, [r9, #16]
 8006280:	b958      	cbnz	r0, 800629a <_svfprintf_r+0x5a>
 8006282:	230c      	movs	r3, #12
 8006284:	f8ca 3000 	str.w	r3, [sl]
 8006288:	f04f 33ff 	mov.w	r3, #4294967295
 800628c:	930f      	str	r3, [sp, #60]	; 0x3c
 800628e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006290:	b04f      	add	sp, #316	; 0x13c
 8006292:	ecbd 8b04 	vpop	{d8-d9}
 8006296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629a:	2340      	movs	r3, #64	; 0x40
 800629c:	f8c9 3014 	str.w	r3, [r9, #20]
 80062a0:	ed9f 7b93 	vldr	d7, [pc, #588]	; 80064f0 <_svfprintf_r+0x2b0>
 80062a4:	2500      	movs	r5, #0
 80062a6:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 80062aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80062ae:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 80062b2:	ac25      	add	r4, sp, #148	; 0x94
 80062b4:	9422      	str	r4, [sp, #136]	; 0x88
 80062b6:	9505      	str	r5, [sp, #20]
 80062b8:	950a      	str	r5, [sp, #40]	; 0x28
 80062ba:	9512      	str	r5, [sp, #72]	; 0x48
 80062bc:	9514      	str	r5, [sp, #80]	; 0x50
 80062be:	950f      	str	r5, [sp, #60]	; 0x3c
 80062c0:	465b      	mov	r3, fp
 80062c2:	461d      	mov	r5, r3
 80062c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062c8:	b10a      	cbz	r2, 80062ce <_svfprintf_r+0x8e>
 80062ca:	2a25      	cmp	r2, #37	; 0x25
 80062cc:	d1f9      	bne.n	80062c2 <_svfprintf_r+0x82>
 80062ce:	ebb5 070b 	subs.w	r7, r5, fp
 80062d2:	d00d      	beq.n	80062f0 <_svfprintf_r+0xb0>
 80062d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80062d6:	443b      	add	r3, r7
 80062d8:	9324      	str	r3, [sp, #144]	; 0x90
 80062da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062dc:	3301      	adds	r3, #1
 80062de:	2b07      	cmp	r3, #7
 80062e0:	e9c4 b700 	strd	fp, r7, [r4]
 80062e4:	9323      	str	r3, [sp, #140]	; 0x8c
 80062e6:	dc79      	bgt.n	80063dc <_svfprintf_r+0x19c>
 80062e8:	3408      	adds	r4, #8
 80062ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062ec:	443b      	add	r3, r7
 80062ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80062f0:	782b      	ldrb	r3, [r5, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f001 8140 	beq.w	8007578 <_svfprintf_r+0x1338>
 80062f8:	2300      	movs	r3, #0
 80062fa:	f04f 32ff 	mov.w	r2, #4294967295
 80062fe:	3501      	adds	r5, #1
 8006300:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006304:	9204      	str	r2, [sp, #16]
 8006306:	9310      	str	r3, [sp, #64]	; 0x40
 8006308:	4698      	mov	r8, r3
 800630a:	270a      	movs	r7, #10
 800630c:	212b      	movs	r1, #43	; 0x2b
 800630e:	462a      	mov	r2, r5
 8006310:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006314:	9307      	str	r3, [sp, #28]
 8006316:	920b      	str	r2, [sp, #44]	; 0x2c
 8006318:	9b07      	ldr	r3, [sp, #28]
 800631a:	3b20      	subs	r3, #32
 800631c:	2b5a      	cmp	r3, #90	; 0x5a
 800631e:	f200 85b4 	bhi.w	8006e8a <_svfprintf_r+0xc4a>
 8006322:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006326:	007e      	.short	0x007e
 8006328:	05b205b2 	.word	0x05b205b2
 800632c:	05b20086 	.word	0x05b20086
 8006330:	05b205b2 	.word	0x05b205b2
 8006334:	05b20065 	.word	0x05b20065
 8006338:	008905b2 	.word	0x008905b2
 800633c:	05b20093 	.word	0x05b20093
 8006340:	00960090 	.word	0x00960090
 8006344:	00b305b2 	.word	0x00b305b2
 8006348:	00b600b6 	.word	0x00b600b6
 800634c:	00b600b6 	.word	0x00b600b6
 8006350:	00b600b6 	.word	0x00b600b6
 8006354:	00b600b6 	.word	0x00b600b6
 8006358:	05b200b6 	.word	0x05b200b6
 800635c:	05b205b2 	.word	0x05b205b2
 8006360:	05b205b2 	.word	0x05b205b2
 8006364:	05b205b2 	.word	0x05b205b2
 8006368:	05b20127 	.word	0x05b20127
 800636c:	00fc00e9 	.word	0x00fc00e9
 8006370:	01270127 	.word	0x01270127
 8006374:	05b20127 	.word	0x05b20127
 8006378:	05b205b2 	.word	0x05b205b2
 800637c:	00c605b2 	.word	0x00c605b2
 8006380:	05b205b2 	.word	0x05b205b2
 8006384:	05b20492 	.word	0x05b20492
 8006388:	05b205b2 	.word	0x05b205b2
 800638c:	05b204d9 	.word	0x05b204d9
 8006390:	05b204fa 	.word	0x05b204fa
 8006394:	051905b2 	.word	0x051905b2
 8006398:	05b205b2 	.word	0x05b205b2
 800639c:	05b205b2 	.word	0x05b205b2
 80063a0:	05b205b2 	.word	0x05b205b2
 80063a4:	05b205b2 	.word	0x05b205b2
 80063a8:	05b20127 	.word	0x05b20127
 80063ac:	00fe00e9 	.word	0x00fe00e9
 80063b0:	01270127 	.word	0x01270127
 80063b4:	00c90127 	.word	0x00c90127
 80063b8:	00dd00fe 	.word	0x00dd00fe
 80063bc:	00d605b2 	.word	0x00d605b2
 80063c0:	046f05b2 	.word	0x046f05b2
 80063c4:	04c80494 	.word	0x04c80494
 80063c8:	05b200dd 	.word	0x05b200dd
 80063cc:	007c04d9 	.word	0x007c04d9
 80063d0:	05b204fc 	.word	0x05b204fc
 80063d4:	053605b2 	.word	0x053605b2
 80063d8:	007c05b2 	.word	0x007c05b2
 80063dc:	aa22      	add	r2, sp, #136	; 0x88
 80063de:	4649      	mov	r1, r9
 80063e0:	4650      	mov	r0, sl
 80063e2:	f002 fe94 	bl	800910e <__ssprint_r>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	f040 8132 	bne.w	8006650 <_svfprintf_r+0x410>
 80063ec:	ac25      	add	r4, sp, #148	; 0x94
 80063ee:	e77c      	b.n	80062ea <_svfprintf_r+0xaa>
 80063f0:	4650      	mov	r0, sl
 80063f2:	f002 f89d 	bl	8008530 <_localeconv_r>
 80063f6:	6843      	ldr	r3, [r0, #4]
 80063f8:	9314      	str	r3, [sp, #80]	; 0x50
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7f9 ff38 	bl	8000270 <strlen>
 8006400:	9012      	str	r0, [sp, #72]	; 0x48
 8006402:	4650      	mov	r0, sl
 8006404:	f002 f894 	bl	8008530 <_localeconv_r>
 8006408:	6883      	ldr	r3, [r0, #8]
 800640a:	930a      	str	r3, [sp, #40]	; 0x28
 800640c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800640e:	212b      	movs	r1, #43	; 0x2b
 8006410:	b12b      	cbz	r3, 800641e <_svfprintf_r+0x1de>
 8006412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006414:	b11b      	cbz	r3, 800641e <_svfprintf_r+0x1de>
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	b10b      	cbz	r3, 800641e <_svfprintf_r+0x1de>
 800641a:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 800641e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006420:	e775      	b.n	800630e <_svfprintf_r+0xce>
 8006422:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f9      	bne.n	800641e <_svfprintf_r+0x1de>
 800642a:	2320      	movs	r3, #32
 800642c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006430:	e7f5      	b.n	800641e <_svfprintf_r+0x1de>
 8006432:	f048 0801 	orr.w	r8, r8, #1
 8006436:	e7f2      	b.n	800641e <_svfprintf_r+0x1de>
 8006438:	f856 3b04 	ldr.w	r3, [r6], #4
 800643c:	9310      	str	r3, [sp, #64]	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	daed      	bge.n	800641e <_svfprintf_r+0x1de>
 8006442:	425b      	negs	r3, r3
 8006444:	9310      	str	r3, [sp, #64]	; 0x40
 8006446:	f048 0804 	orr.w	r8, r8, #4
 800644a:	e7e8      	b.n	800641e <_svfprintf_r+0x1de>
 800644c:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8006450:	e7e5      	b.n	800641e <_svfprintf_r+0x1de>
 8006452:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006454:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006458:	9307      	str	r3, [sp, #28]
 800645a:	2b2a      	cmp	r3, #42	; 0x2a
 800645c:	d113      	bne.n	8006486 <_svfprintf_r+0x246>
 800645e:	f856 0b04 	ldr.w	r0, [r6], #4
 8006462:	920b      	str	r2, [sp, #44]	; 0x2c
 8006464:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8006468:	9304      	str	r3, [sp, #16]
 800646a:	e7d8      	b.n	800641e <_svfprintf_r+0x1de>
 800646c:	9804      	ldr	r0, [sp, #16]
 800646e:	fb07 3300 	mla	r3, r7, r0, r3
 8006472:	9304      	str	r3, [sp, #16]
 8006474:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006478:	9307      	str	r3, [sp, #28]
 800647a:	9b07      	ldr	r3, [sp, #28]
 800647c:	3b30      	subs	r3, #48	; 0x30
 800647e:	2b09      	cmp	r3, #9
 8006480:	d9f4      	bls.n	800646c <_svfprintf_r+0x22c>
 8006482:	920b      	str	r2, [sp, #44]	; 0x2c
 8006484:	e748      	b.n	8006318 <_svfprintf_r+0xd8>
 8006486:	2300      	movs	r3, #0
 8006488:	9304      	str	r3, [sp, #16]
 800648a:	e7f6      	b.n	800647a <_svfprintf_r+0x23a>
 800648c:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8006490:	e7c5      	b.n	800641e <_svfprintf_r+0x1de>
 8006492:	2300      	movs	r3, #0
 8006494:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006496:	9310      	str	r3, [sp, #64]	; 0x40
 8006498:	9b07      	ldr	r3, [sp, #28]
 800649a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800649c:	3b30      	subs	r3, #48	; 0x30
 800649e:	fb07 3300 	mla	r3, r7, r0, r3
 80064a2:	9310      	str	r3, [sp, #64]	; 0x40
 80064a4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80064a8:	9307      	str	r3, [sp, #28]
 80064aa:	3b30      	subs	r3, #48	; 0x30
 80064ac:	2b09      	cmp	r3, #9
 80064ae:	d9f3      	bls.n	8006498 <_svfprintf_r+0x258>
 80064b0:	e7e7      	b.n	8006482 <_svfprintf_r+0x242>
 80064b2:	f048 0808 	orr.w	r8, r8, #8
 80064b6:	e7b2      	b.n	800641e <_svfprintf_r+0x1de>
 80064b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b68      	cmp	r3, #104	; 0x68
 80064be:	bf01      	itttt	eq
 80064c0:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 80064c2:	3301      	addeq	r3, #1
 80064c4:	930b      	streq	r3, [sp, #44]	; 0x2c
 80064c6:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 80064ca:	bf18      	it	ne
 80064cc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 80064d0:	e7a5      	b.n	800641e <_svfprintf_r+0x1de>
 80064d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	2b6c      	cmp	r3, #108	; 0x6c
 80064d8:	d105      	bne.n	80064e6 <_svfprintf_r+0x2a6>
 80064da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064dc:	3301      	adds	r3, #1
 80064de:	930b      	str	r3, [sp, #44]	; 0x2c
 80064e0:	f048 0820 	orr.w	r8, r8, #32
 80064e4:	e79b      	b.n	800641e <_svfprintf_r+0x1de>
 80064e6:	f048 0810 	orr.w	r8, r8, #16
 80064ea:	e798      	b.n	800641e <_svfprintf_r+0x1de>
 80064ec:	f3af 8000 	nop.w
	...
 80064f8:	4632      	mov	r2, r6
 80064fa:	2000      	movs	r0, #0
 80064fc:	f852 3b04 	ldr.w	r3, [r2], #4
 8006500:	9206      	str	r2, [sp, #24]
 8006502:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8006506:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800650a:	2301      	movs	r3, #1
 800650c:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8006510:	9003      	str	r0, [sp, #12]
 8006512:	9304      	str	r3, [sp, #16]
 8006514:	4606      	mov	r6, r0
 8006516:	4605      	mov	r5, r0
 8006518:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 800651c:	e1b8      	b.n	8006890 <_svfprintf_r+0x650>
 800651e:	f048 0810 	orr.w	r8, r8, #16
 8006522:	f018 0f20 	tst.w	r8, #32
 8006526:	d012      	beq.n	800654e <_svfprintf_r+0x30e>
 8006528:	3607      	adds	r6, #7
 800652a:	f026 0307 	bic.w	r3, r6, #7
 800652e:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8006532:	9306      	str	r3, [sp, #24]
 8006534:	2e00      	cmp	r6, #0
 8006536:	f177 0300 	sbcs.w	r3, r7, #0
 800653a:	da06      	bge.n	800654a <_svfprintf_r+0x30a>
 800653c:	4276      	negs	r6, r6
 800653e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8006542:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8006546:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800654a:	2301      	movs	r3, #1
 800654c:	e38e      	b.n	8006c6c <_svfprintf_r+0xa2c>
 800654e:	1d33      	adds	r3, r6, #4
 8006550:	f018 0f10 	tst.w	r8, #16
 8006554:	9306      	str	r3, [sp, #24]
 8006556:	d002      	beq.n	800655e <_svfprintf_r+0x31e>
 8006558:	6836      	ldr	r6, [r6, #0]
 800655a:	17f7      	asrs	r7, r6, #31
 800655c:	e7ea      	b.n	8006534 <_svfprintf_r+0x2f4>
 800655e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8006562:	6836      	ldr	r6, [r6, #0]
 8006564:	d001      	beq.n	800656a <_svfprintf_r+0x32a>
 8006566:	b236      	sxth	r6, r6
 8006568:	e7f7      	b.n	800655a <_svfprintf_r+0x31a>
 800656a:	f418 7f00 	tst.w	r8, #512	; 0x200
 800656e:	bf18      	it	ne
 8006570:	b276      	sxtbne	r6, r6
 8006572:	e7f2      	b.n	800655a <_svfprintf_r+0x31a>
 8006574:	3607      	adds	r6, #7
 8006576:	f026 0307 	bic.w	r3, r6, #7
 800657a:	ecb3 7b02 	vldmia	r3!, {d7}
 800657e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006582:	9306      	str	r3, [sp, #24]
 8006584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006586:	ee09 3a10 	vmov	s18, r3
 800658a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800658c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006590:	ee09 3a90 	vmov	s19, r3
 8006594:	f04f 32ff 	mov.w	r2, #4294967295
 8006598:	4b3a      	ldr	r3, [pc, #232]	; (8006684 <_svfprintf_r+0x444>)
 800659a:	ec51 0b19 	vmov	r0, r1, d9
 800659e:	f7fa fac5 	bl	8000b2c <__aeabi_dcmpun>
 80065a2:	bb10      	cbnz	r0, 80065ea <_svfprintf_r+0x3aa>
 80065a4:	4b37      	ldr	r3, [pc, #220]	; (8006684 <_svfprintf_r+0x444>)
 80065a6:	ec51 0b19 	vmov	r0, r1, d9
 80065aa:	f04f 32ff 	mov.w	r2, #4294967295
 80065ae:	f7fa fa9f 	bl	8000af0 <__aeabi_dcmple>
 80065b2:	b9d0      	cbnz	r0, 80065ea <_svfprintf_r+0x3aa>
 80065b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065b8:	2200      	movs	r2, #0
 80065ba:	2300      	movs	r3, #0
 80065bc:	f7fa fa8e 	bl	8000adc <__aeabi_dcmplt>
 80065c0:	b110      	cbz	r0, 80065c8 <_svfprintf_r+0x388>
 80065c2:	232d      	movs	r3, #45	; 0x2d
 80065c4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80065c8:	4a2f      	ldr	r2, [pc, #188]	; (8006688 <_svfprintf_r+0x448>)
 80065ca:	4830      	ldr	r0, [pc, #192]	; (800668c <_svfprintf_r+0x44c>)
 80065cc:	9b07      	ldr	r3, [sp, #28]
 80065ce:	2100      	movs	r1, #0
 80065d0:	2b47      	cmp	r3, #71	; 0x47
 80065d2:	bfd4      	ite	le
 80065d4:	4693      	movle	fp, r2
 80065d6:	4683      	movgt	fp, r0
 80065d8:	2303      	movs	r3, #3
 80065da:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80065de:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 80065e2:	2600      	movs	r6, #0
 80065e4:	4633      	mov	r3, r6
 80065e6:	f001 b802 	b.w	80075ee <_svfprintf_r+0x13ae>
 80065ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065ee:	4610      	mov	r0, r2
 80065f0:	4619      	mov	r1, r3
 80065f2:	f7fa fa9b 	bl	8000b2c <__aeabi_dcmpun>
 80065f6:	b140      	cbz	r0, 800660a <_svfprintf_r+0x3ca>
 80065f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065fa:	4a25      	ldr	r2, [pc, #148]	; (8006690 <_svfprintf_r+0x450>)
 80065fc:	4825      	ldr	r0, [pc, #148]	; (8006694 <_svfprintf_r+0x454>)
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bfbc      	itt	lt
 8006602:	232d      	movlt	r3, #45	; 0x2d
 8006604:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8006608:	e7e0      	b.n	80065cc <_svfprintf_r+0x38c>
 800660a:	9b07      	ldr	r3, [sp, #28]
 800660c:	f023 0320 	bic.w	r3, r3, #32
 8006610:	2b41      	cmp	r3, #65	; 0x41
 8006612:	9308      	str	r3, [sp, #32]
 8006614:	d125      	bne.n	8006662 <_svfprintf_r+0x422>
 8006616:	2330      	movs	r3, #48	; 0x30
 8006618:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800661c:	9b07      	ldr	r3, [sp, #28]
 800661e:	2b61      	cmp	r3, #97	; 0x61
 8006620:	bf0c      	ite	eq
 8006622:	2378      	moveq	r3, #120	; 0x78
 8006624:	2358      	movne	r3, #88	; 0x58
 8006626:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800662a:	9b04      	ldr	r3, [sp, #16]
 800662c:	2b63      	cmp	r3, #99	; 0x63
 800662e:	f048 0802 	orr.w	r8, r8, #2
 8006632:	dd31      	ble.n	8006698 <_svfprintf_r+0x458>
 8006634:	1c59      	adds	r1, r3, #1
 8006636:	4650      	mov	r0, sl
 8006638:	f001 ff82 	bl	8008540 <_malloc_r>
 800663c:	4683      	mov	fp, r0
 800663e:	2800      	cmp	r0, #0
 8006640:	f040 81fe 	bne.w	8006a40 <_svfprintf_r+0x800>
 8006644:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800664c:	f8a9 300c 	strh.w	r3, [r9, #12]
 8006650:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006654:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006658:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800665a:	bf18      	it	ne
 800665c:	f04f 33ff 	movne.w	r3, #4294967295
 8006660:	e614      	b.n	800628c <_svfprintf_r+0x4c>
 8006662:	9b04      	ldr	r3, [sp, #16]
 8006664:	3301      	adds	r3, #1
 8006666:	f000 81ed 	beq.w	8006a44 <_svfprintf_r+0x804>
 800666a:	9b08      	ldr	r3, [sp, #32]
 800666c:	2b47      	cmp	r3, #71	; 0x47
 800666e:	f040 81ec 	bne.w	8006a4a <_svfprintf_r+0x80a>
 8006672:	9b04      	ldr	r3, [sp, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f040 81e8 	bne.w	8006a4a <_svfprintf_r+0x80a>
 800667a:	9303      	str	r3, [sp, #12]
 800667c:	2301      	movs	r3, #1
 800667e:	9304      	str	r3, [sp, #16]
 8006680:	e00d      	b.n	800669e <_svfprintf_r+0x45e>
 8006682:	bf00      	nop
 8006684:	7fefffff 	.word	0x7fefffff
 8006688:	0800ac78 	.word	0x0800ac78
 800668c:	0800ac7c 	.word	0x0800ac7c
 8006690:	0800ac80 	.word	0x0800ac80
 8006694:	0800ac84 	.word	0x0800ac84
 8006698:	9003      	str	r0, [sp, #12]
 800669a:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 800669e:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 80066a2:	9311      	str	r3, [sp, #68]	; 0x44
 80066a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f280 81d1 	bge.w	8006a4e <_svfprintf_r+0x80e>
 80066ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ae:	ee08 3a10 	vmov	s16, r3
 80066b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80066b8:	ee08 3a90 	vmov	s17, r3
 80066bc:	232d      	movs	r3, #45	; 0x2d
 80066be:	9318      	str	r3, [sp, #96]	; 0x60
 80066c0:	9b08      	ldr	r3, [sp, #32]
 80066c2:	2b41      	cmp	r3, #65	; 0x41
 80066c4:	f040 81e1 	bne.w	8006a8a <_svfprintf_r+0x84a>
 80066c8:	eeb0 0a48 	vmov.f32	s0, s16
 80066cc:	eef0 0a68 	vmov.f32	s1, s17
 80066d0:	a81c      	add	r0, sp, #112	; 0x70
 80066d2:	f002 fcc1 	bl	8009058 <frexp>
 80066d6:	2200      	movs	r2, #0
 80066d8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80066dc:	ec51 0b10 	vmov	r0, r1, d0
 80066e0:	f7f9 ff8a 	bl	80005f8 <__aeabi_dmul>
 80066e4:	2200      	movs	r2, #0
 80066e6:	2300      	movs	r3, #0
 80066e8:	4606      	mov	r6, r0
 80066ea:	460f      	mov	r7, r1
 80066ec:	f7fa f9ec 	bl	8000ac8 <__aeabi_dcmpeq>
 80066f0:	b108      	cbz	r0, 80066f6 <_svfprintf_r+0x4b6>
 80066f2:	2301      	movs	r3, #1
 80066f4:	931c      	str	r3, [sp, #112]	; 0x70
 80066f6:	4bb4      	ldr	r3, [pc, #720]	; (80069c8 <_svfprintf_r+0x788>)
 80066f8:	4ab4      	ldr	r2, [pc, #720]	; (80069cc <_svfprintf_r+0x78c>)
 80066fa:	9907      	ldr	r1, [sp, #28]
 80066fc:	2961      	cmp	r1, #97	; 0x61
 80066fe:	bf18      	it	ne
 8006700:	461a      	movne	r2, r3
 8006702:	9b04      	ldr	r3, [sp, #16]
 8006704:	9217      	str	r2, [sp, #92]	; 0x5c
 8006706:	3b01      	subs	r3, #1
 8006708:	9305      	str	r3, [sp, #20]
 800670a:	465d      	mov	r5, fp
 800670c:	4bb0      	ldr	r3, [pc, #704]	; (80069d0 <_svfprintf_r+0x790>)
 800670e:	2200      	movs	r2, #0
 8006710:	4630      	mov	r0, r6
 8006712:	4639      	mov	r1, r7
 8006714:	f7f9 ff70 	bl	80005f8 <__aeabi_dmul>
 8006718:	460f      	mov	r7, r1
 800671a:	4606      	mov	r6, r0
 800671c:	f7fa fa1c 	bl	8000b58 <__aeabi_d2iz>
 8006720:	9019      	str	r0, [sp, #100]	; 0x64
 8006722:	f7f9 feff 	bl	8000524 <__aeabi_i2d>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4630      	mov	r0, r6
 800672c:	4639      	mov	r1, r7
 800672e:	f7f9 fdab 	bl	8000288 <__aeabi_dsub>
 8006732:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006734:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006736:	5c9b      	ldrb	r3, [r3, r2]
 8006738:	f805 3b01 	strb.w	r3, [r5], #1
 800673c:	9b05      	ldr	r3, [sp, #20]
 800673e:	9309      	str	r3, [sp, #36]	; 0x24
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	4606      	mov	r6, r0
 8006744:	460f      	mov	r7, r1
 8006746:	d007      	beq.n	8006758 <_svfprintf_r+0x518>
 8006748:	3b01      	subs	r3, #1
 800674a:	9305      	str	r3, [sp, #20]
 800674c:	2200      	movs	r2, #0
 800674e:	2300      	movs	r3, #0
 8006750:	f7fa f9ba 	bl	8000ac8 <__aeabi_dcmpeq>
 8006754:	2800      	cmp	r0, #0
 8006756:	d0d9      	beq.n	800670c <_svfprintf_r+0x4cc>
 8006758:	4b9e      	ldr	r3, [pc, #632]	; (80069d4 <_svfprintf_r+0x794>)
 800675a:	2200      	movs	r2, #0
 800675c:	4630      	mov	r0, r6
 800675e:	4639      	mov	r1, r7
 8006760:	f7fa f9da 	bl	8000b18 <__aeabi_dcmpgt>
 8006764:	b960      	cbnz	r0, 8006780 <_svfprintf_r+0x540>
 8006766:	4b9b      	ldr	r3, [pc, #620]	; (80069d4 <_svfprintf_r+0x794>)
 8006768:	2200      	movs	r2, #0
 800676a:	4630      	mov	r0, r6
 800676c:	4639      	mov	r1, r7
 800676e:	f7fa f9ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8006772:	2800      	cmp	r0, #0
 8006774:	f000 8184 	beq.w	8006a80 <_svfprintf_r+0x840>
 8006778:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800677a:	07df      	lsls	r7, r3, #31
 800677c:	f140 8180 	bpl.w	8006a80 <_svfprintf_r+0x840>
 8006780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006782:	9520      	str	r5, [sp, #128]	; 0x80
 8006784:	7bd9      	ldrb	r1, [r3, #15]
 8006786:	2030      	movs	r0, #48	; 0x30
 8006788:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800678a:	1e53      	subs	r3, r2, #1
 800678c:	9320      	str	r3, [sp, #128]	; 0x80
 800678e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8006792:	428b      	cmp	r3, r1
 8006794:	f000 8163 	beq.w	8006a5e <_svfprintf_r+0x81e>
 8006798:	2b39      	cmp	r3, #57	; 0x39
 800679a:	bf0b      	itete	eq
 800679c:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800679e:	3301      	addne	r3, #1
 80067a0:	7a9b      	ldrbeq	r3, [r3, #10]
 80067a2:	b2db      	uxtbne	r3, r3
 80067a4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067a8:	eba5 030b 	sub.w	r3, r5, fp
 80067ac:	9305      	str	r3, [sp, #20]
 80067ae:	9b08      	ldr	r3, [sp, #32]
 80067b0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80067b2:	2b47      	cmp	r3, #71	; 0x47
 80067b4:	f040 81b1 	bne.w	8006b1a <_svfprintf_r+0x8da>
 80067b8:	1cee      	adds	r6, r5, #3
 80067ba:	db03      	blt.n	80067c4 <_svfprintf_r+0x584>
 80067bc:	9b04      	ldr	r3, [sp, #16]
 80067be:	42ab      	cmp	r3, r5
 80067c0:	f280 81d6 	bge.w	8006b70 <_svfprintf_r+0x930>
 80067c4:	9b07      	ldr	r3, [sp, #28]
 80067c6:	3b02      	subs	r3, #2
 80067c8:	9307      	str	r3, [sp, #28]
 80067ca:	9907      	ldr	r1, [sp, #28]
 80067cc:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80067d0:	f021 0120 	bic.w	r1, r1, #32
 80067d4:	2941      	cmp	r1, #65	; 0x41
 80067d6:	bf08      	it	eq
 80067d8:	320f      	addeq	r2, #15
 80067da:	f105 33ff 	add.w	r3, r5, #4294967295
 80067de:	bf06      	itte	eq
 80067e0:	b2d2      	uxtbeq	r2, r2
 80067e2:	2101      	moveq	r1, #1
 80067e4:	2100      	movne	r1, #0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	931c      	str	r3, [sp, #112]	; 0x70
 80067ea:	bfb8      	it	lt
 80067ec:	f1c5 0301 	rsblt	r3, r5, #1
 80067f0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 80067f4:	bfb4      	ite	lt
 80067f6:	222d      	movlt	r2, #45	; 0x2d
 80067f8:	222b      	movge	r2, #43	; 0x2b
 80067fa:	2b09      	cmp	r3, #9
 80067fc:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8006800:	f340 81a4 	ble.w	8006b4c <_svfprintf_r+0x90c>
 8006804:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8006808:	260a      	movs	r6, #10
 800680a:	4611      	mov	r1, r2
 800680c:	fb93 f5f6 	sdiv	r5, r3, r6
 8006810:	fb06 3015 	mls	r0, r6, r5, r3
 8006814:	3030      	adds	r0, #48	; 0x30
 8006816:	f801 0c01 	strb.w	r0, [r1, #-1]
 800681a:	4618      	mov	r0, r3
 800681c:	2863      	cmp	r0, #99	; 0x63
 800681e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006822:	462b      	mov	r3, r5
 8006824:	dcf1      	bgt.n	800680a <_svfprintf_r+0x5ca>
 8006826:	3330      	adds	r3, #48	; 0x30
 8006828:	1e88      	subs	r0, r1, #2
 800682a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800682e:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8006832:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8006836:	4603      	mov	r3, r0
 8006838:	42ab      	cmp	r3, r5
 800683a:	f0c0 8182 	bcc.w	8006b42 <_svfprintf_r+0x902>
 800683e:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8006842:	1a52      	subs	r2, r2, r1
 8006844:	42a8      	cmp	r0, r5
 8006846:	bf88      	it	hi
 8006848:	2200      	movhi	r2, #0
 800684a:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 800684e:	441a      	add	r2, r3
 8006850:	ab1e      	add	r3, sp, #120	; 0x78
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	9a05      	ldr	r2, [sp, #20]
 8006856:	9315      	str	r3, [sp, #84]	; 0x54
 8006858:	2a01      	cmp	r2, #1
 800685a:	4413      	add	r3, r2
 800685c:	9304      	str	r3, [sp, #16]
 800685e:	dc02      	bgt.n	8006866 <_svfprintf_r+0x626>
 8006860:	f018 0f01 	tst.w	r8, #1
 8006864:	d003      	beq.n	800686e <_svfprintf_r+0x62e>
 8006866:	9b04      	ldr	r3, [sp, #16]
 8006868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800686a:	4413      	add	r3, r2
 800686c:	9304      	str	r3, [sp, #16]
 800686e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 8006872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006876:	9311      	str	r3, [sp, #68]	; 0x44
 8006878:	2300      	movs	r3, #0
 800687a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800687e:	461d      	mov	r5, r3
 8006880:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006882:	b113      	cbz	r3, 800688a <_svfprintf_r+0x64a>
 8006884:	232d      	movs	r3, #45	; 0x2d
 8006886:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800688a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800688e:	2600      	movs	r6, #0
 8006890:	9b04      	ldr	r3, [sp, #16]
 8006892:	42b3      	cmp	r3, r6
 8006894:	bfb8      	it	lt
 8006896:	4633      	movlt	r3, r6
 8006898:	9311      	str	r3, [sp, #68]	; 0x44
 800689a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800689e:	b113      	cbz	r3, 80068a6 <_svfprintf_r+0x666>
 80068a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068a2:	3301      	adds	r3, #1
 80068a4:	9311      	str	r3, [sp, #68]	; 0x44
 80068a6:	f018 0302 	ands.w	r3, r8, #2
 80068aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80068ac:	bf1e      	ittt	ne
 80068ae:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 80068b0:	3302      	addne	r3, #2
 80068b2:	9311      	strne	r3, [sp, #68]	; 0x44
 80068b4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 80068b8:	9318      	str	r3, [sp, #96]	; 0x60
 80068ba:	d11f      	bne.n	80068fc <_svfprintf_r+0x6bc>
 80068bc:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80068c0:	1a9f      	subs	r7, r3, r2
 80068c2:	2f00      	cmp	r7, #0
 80068c4:	dd1a      	ble.n	80068fc <_svfprintf_r+0x6bc>
 80068c6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80068ca:	4843      	ldr	r0, [pc, #268]	; (80069d8 <_svfprintf_r+0x798>)
 80068cc:	6020      	str	r0, [r4, #0]
 80068ce:	2f10      	cmp	r7, #16
 80068d0:	f103 0301 	add.w	r3, r3, #1
 80068d4:	f104 0108 	add.w	r1, r4, #8
 80068d8:	f300 82e6 	bgt.w	8006ea8 <_svfprintf_r+0xc68>
 80068dc:	6067      	str	r7, [r4, #4]
 80068de:	2b07      	cmp	r3, #7
 80068e0:	4417      	add	r7, r2
 80068e2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80068e6:	f340 82f2 	ble.w	8006ece <_svfprintf_r+0xc8e>
 80068ea:	aa22      	add	r2, sp, #136	; 0x88
 80068ec:	4649      	mov	r1, r9
 80068ee:	4650      	mov	r0, sl
 80068f0:	f002 fc0d 	bl	800910e <__ssprint_r>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	f040 861d 	bne.w	8007534 <_svfprintf_r+0x12f4>
 80068fa:	ac25      	add	r4, sp, #148	; 0x94
 80068fc:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006900:	b173      	cbz	r3, 8006920 <_svfprintf_r+0x6e0>
 8006902:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	2301      	movs	r3, #1
 800690a:	6063      	str	r3, [r4, #4]
 800690c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800690e:	3301      	adds	r3, #1
 8006910:	9324      	str	r3, [sp, #144]	; 0x90
 8006912:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006914:	3301      	adds	r3, #1
 8006916:	2b07      	cmp	r3, #7
 8006918:	9323      	str	r3, [sp, #140]	; 0x8c
 800691a:	f300 82da 	bgt.w	8006ed2 <_svfprintf_r+0xc92>
 800691e:	3408      	adds	r4, #8
 8006920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006922:	b16b      	cbz	r3, 8006940 <_svfprintf_r+0x700>
 8006924:	ab1b      	add	r3, sp, #108	; 0x6c
 8006926:	6023      	str	r3, [r4, #0]
 8006928:	2302      	movs	r3, #2
 800692a:	6063      	str	r3, [r4, #4]
 800692c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800692e:	3302      	adds	r3, #2
 8006930:	9324      	str	r3, [sp, #144]	; 0x90
 8006932:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006934:	3301      	adds	r3, #1
 8006936:	2b07      	cmp	r3, #7
 8006938:	9323      	str	r3, [sp, #140]	; 0x8c
 800693a:	f300 82d4 	bgt.w	8006ee6 <_svfprintf_r+0xca6>
 800693e:	3408      	adds	r4, #8
 8006940:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006942:	2b80      	cmp	r3, #128	; 0x80
 8006944:	d11f      	bne.n	8006986 <_svfprintf_r+0x746>
 8006946:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800694a:	1a9f      	subs	r7, r3, r2
 800694c:	2f00      	cmp	r7, #0
 800694e:	dd1a      	ble.n	8006986 <_svfprintf_r+0x746>
 8006950:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006954:	4821      	ldr	r0, [pc, #132]	; (80069dc <_svfprintf_r+0x79c>)
 8006956:	6020      	str	r0, [r4, #0]
 8006958:	2f10      	cmp	r7, #16
 800695a:	f103 0301 	add.w	r3, r3, #1
 800695e:	f104 0108 	add.w	r1, r4, #8
 8006962:	f300 82ca 	bgt.w	8006efa <_svfprintf_r+0xcba>
 8006966:	6067      	str	r7, [r4, #4]
 8006968:	2b07      	cmp	r3, #7
 800696a:	4417      	add	r7, r2
 800696c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8006970:	f340 82d6 	ble.w	8006f20 <_svfprintf_r+0xce0>
 8006974:	aa22      	add	r2, sp, #136	; 0x88
 8006976:	4649      	mov	r1, r9
 8006978:	4650      	mov	r0, sl
 800697a:	f002 fbc8 	bl	800910e <__ssprint_r>
 800697e:	2800      	cmp	r0, #0
 8006980:	f040 85d8 	bne.w	8007534 <_svfprintf_r+0x12f4>
 8006984:	ac25      	add	r4, sp, #148	; 0x94
 8006986:	9b04      	ldr	r3, [sp, #16]
 8006988:	1af6      	subs	r6, r6, r3
 800698a:	2e00      	cmp	r6, #0
 800698c:	dd28      	ble.n	80069e0 <_svfprintf_r+0x7a0>
 800698e:	4f13      	ldr	r7, [pc, #76]	; (80069dc <_svfprintf_r+0x79c>)
 8006990:	6027      	str	r7, [r4, #0]
 8006992:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006996:	2e10      	cmp	r6, #16
 8006998:	f103 0301 	add.w	r3, r3, #1
 800699c:	f104 0108 	add.w	r1, r4, #8
 80069a0:	f300 82c0 	bgt.w	8006f24 <_svfprintf_r+0xce4>
 80069a4:	6066      	str	r6, [r4, #4]
 80069a6:	2b07      	cmp	r3, #7
 80069a8:	4416      	add	r6, r2
 80069aa:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80069ae:	f340 82cc 	ble.w	8006f4a <_svfprintf_r+0xd0a>
 80069b2:	aa22      	add	r2, sp, #136	; 0x88
 80069b4:	4649      	mov	r1, r9
 80069b6:	4650      	mov	r0, sl
 80069b8:	f002 fba9 	bl	800910e <__ssprint_r>
 80069bc:	2800      	cmp	r0, #0
 80069be:	f040 85b9 	bne.w	8007534 <_svfprintf_r+0x12f4>
 80069c2:	ac25      	add	r4, sp, #148	; 0x94
 80069c4:	e00c      	b.n	80069e0 <_svfprintf_r+0x7a0>
 80069c6:	bf00      	nop
 80069c8:	0800ac99 	.word	0x0800ac99
 80069cc:	0800ac88 	.word	0x0800ac88
 80069d0:	40300000 	.word	0x40300000
 80069d4:	3fe00000 	.word	0x3fe00000
 80069d8:	0800acac 	.word	0x0800acac
 80069dc:	0800acbc 	.word	0x0800acbc
 80069e0:	f418 7f80 	tst.w	r8, #256	; 0x100
 80069e4:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80069e6:	f040 82b7 	bne.w	8006f58 <_svfprintf_r+0xd18>
 80069ea:	9b04      	ldr	r3, [sp, #16]
 80069ec:	f8c4 b000 	str.w	fp, [r4]
 80069f0:	441e      	add	r6, r3
 80069f2:	6063      	str	r3, [r4, #4]
 80069f4:	9624      	str	r6, [sp, #144]	; 0x90
 80069f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069f8:	3301      	adds	r3, #1
 80069fa:	2b07      	cmp	r3, #7
 80069fc:	9323      	str	r3, [sp, #140]	; 0x8c
 80069fe:	f300 82f0 	bgt.w	8006fe2 <_svfprintf_r+0xda2>
 8006a02:	3408      	adds	r4, #8
 8006a04:	f018 0f04 	tst.w	r8, #4
 8006a08:	f040 8576 	bne.w	80074f8 <_svfprintf_r+0x12b8>
 8006a0c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8006a10:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006a12:	428a      	cmp	r2, r1
 8006a14:	bfac      	ite	ge
 8006a16:	189b      	addge	r3, r3, r2
 8006a18:	185b      	addlt	r3, r3, r1
 8006a1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a1e:	b13b      	cbz	r3, 8006a30 <_svfprintf_r+0x7f0>
 8006a20:	aa22      	add	r2, sp, #136	; 0x88
 8006a22:	4649      	mov	r1, r9
 8006a24:	4650      	mov	r0, sl
 8006a26:	f002 fb72 	bl	800910e <__ssprint_r>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	f040 8582 	bne.w	8007534 <_svfprintf_r+0x12f4>
 8006a30:	2300      	movs	r3, #0
 8006a32:	9323      	str	r3, [sp, #140]	; 0x8c
 8006a34:	9b03      	ldr	r3, [sp, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f040 8598 	bne.w	800756c <_svfprintf_r+0x132c>
 8006a3c:	ac25      	add	r4, sp, #148	; 0x94
 8006a3e:	e0ed      	b.n	8006c1c <_svfprintf_r+0x9dc>
 8006a40:	9003      	str	r0, [sp, #12]
 8006a42:	e62c      	b.n	800669e <_svfprintf_r+0x45e>
 8006a44:	9003      	str	r0, [sp, #12]
 8006a46:	2306      	movs	r3, #6
 8006a48:	e619      	b.n	800667e <_svfprintf_r+0x43e>
 8006a4a:	9003      	str	r0, [sp, #12]
 8006a4c:	e627      	b.n	800669e <_svfprintf_r+0x45e>
 8006a4e:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8006a52:	2300      	movs	r3, #0
 8006a54:	eeb0 8a47 	vmov.f32	s16, s14
 8006a58:	eef0 8a67 	vmov.f32	s17, s15
 8006a5c:	e62f      	b.n	80066be <_svfprintf_r+0x47e>
 8006a5e:	f802 0c01 	strb.w	r0, [r2, #-1]
 8006a62:	e691      	b.n	8006788 <_svfprintf_r+0x548>
 8006a64:	f803 0b01 	strb.w	r0, [r3], #1
 8006a68:	1aca      	subs	r2, r1, r3
 8006a6a:	2a00      	cmp	r2, #0
 8006a6c:	dafa      	bge.n	8006a64 <_svfprintf_r+0x824>
 8006a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a72:	3201      	adds	r2, #1
 8006a74:	f103 0301 	add.w	r3, r3, #1
 8006a78:	bfb8      	it	lt
 8006a7a:	2300      	movlt	r3, #0
 8006a7c:	441d      	add	r5, r3
 8006a7e:	e693      	b.n	80067a8 <_svfprintf_r+0x568>
 8006a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a82:	462b      	mov	r3, r5
 8006a84:	18a9      	adds	r1, r5, r2
 8006a86:	2030      	movs	r0, #48	; 0x30
 8006a88:	e7ee      	b.n	8006a68 <_svfprintf_r+0x828>
 8006a8a:	9b08      	ldr	r3, [sp, #32]
 8006a8c:	2b46      	cmp	r3, #70	; 0x46
 8006a8e:	d005      	beq.n	8006a9c <_svfprintf_r+0x85c>
 8006a90:	2b45      	cmp	r3, #69	; 0x45
 8006a92:	d11b      	bne.n	8006acc <_svfprintf_r+0x88c>
 8006a94:	9b04      	ldr	r3, [sp, #16]
 8006a96:	1c5d      	adds	r5, r3, #1
 8006a98:	2102      	movs	r1, #2
 8006a9a:	e001      	b.n	8006aa0 <_svfprintf_r+0x860>
 8006a9c:	9d04      	ldr	r5, [sp, #16]
 8006a9e:	2103      	movs	r1, #3
 8006aa0:	ab20      	add	r3, sp, #128	; 0x80
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	ab1d      	add	r3, sp, #116	; 0x74
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	462a      	mov	r2, r5
 8006aaa:	ab1c      	add	r3, sp, #112	; 0x70
 8006aac:	4650      	mov	r0, sl
 8006aae:	eeb0 0a48 	vmov.f32	s0, s16
 8006ab2:	eef0 0a68 	vmov.f32	s1, s17
 8006ab6:	f000 fe3f 	bl	8007738 <_dtoa_r>
 8006aba:	9b08      	ldr	r3, [sp, #32]
 8006abc:	2b47      	cmp	r3, #71	; 0x47
 8006abe:	4683      	mov	fp, r0
 8006ac0:	d106      	bne.n	8006ad0 <_svfprintf_r+0x890>
 8006ac2:	f018 0f01 	tst.w	r8, #1
 8006ac6:	d103      	bne.n	8006ad0 <_svfprintf_r+0x890>
 8006ac8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006aca:	e66d      	b.n	80067a8 <_svfprintf_r+0x568>
 8006acc:	9d04      	ldr	r5, [sp, #16]
 8006ace:	e7e3      	b.n	8006a98 <_svfprintf_r+0x858>
 8006ad0:	9b08      	ldr	r3, [sp, #32]
 8006ad2:	2b46      	cmp	r3, #70	; 0x46
 8006ad4:	eb0b 0605 	add.w	r6, fp, r5
 8006ad8:	d10f      	bne.n	8006afa <_svfprintf_r+0x8ba>
 8006ada:	f89b 3000 	ldrb.w	r3, [fp]
 8006ade:	2b30      	cmp	r3, #48	; 0x30
 8006ae0:	d109      	bne.n	8006af6 <_svfprintf_r+0x8b6>
 8006ae2:	ec51 0b18 	vmov	r0, r1, d8
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f7f9 ffed 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aee:	b910      	cbnz	r0, 8006af6 <_svfprintf_r+0x8b6>
 8006af0:	f1c5 0501 	rsb	r5, r5, #1
 8006af4:	951c      	str	r5, [sp, #112]	; 0x70
 8006af6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006af8:	441e      	add	r6, r3
 8006afa:	ec51 0b18 	vmov	r0, r1, d8
 8006afe:	2200      	movs	r2, #0
 8006b00:	2300      	movs	r3, #0
 8006b02:	f7f9 ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b06:	b100      	cbz	r0, 8006b0a <_svfprintf_r+0x8ca>
 8006b08:	9620      	str	r6, [sp, #128]	; 0x80
 8006b0a:	2230      	movs	r2, #48	; 0x30
 8006b0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006b0e:	429e      	cmp	r6, r3
 8006b10:	d9da      	bls.n	8006ac8 <_svfprintf_r+0x888>
 8006b12:	1c59      	adds	r1, r3, #1
 8006b14:	9120      	str	r1, [sp, #128]	; 0x80
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	e7f8      	b.n	8006b0c <_svfprintf_r+0x8cc>
 8006b1a:	9b08      	ldr	r3, [sp, #32]
 8006b1c:	2b46      	cmp	r3, #70	; 0x46
 8006b1e:	f47f ae54 	bne.w	80067ca <_svfprintf_r+0x58a>
 8006b22:	9a04      	ldr	r2, [sp, #16]
 8006b24:	f008 0301 	and.w	r3, r8, #1
 8006b28:	2d00      	cmp	r5, #0
 8006b2a:	ea43 0302 	orr.w	r3, r3, r2
 8006b2e:	dd1a      	ble.n	8006b66 <_svfprintf_r+0x926>
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d034      	beq.n	8006b9e <_svfprintf_r+0x95e>
 8006b34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b36:	18eb      	adds	r3, r5, r3
 8006b38:	441a      	add	r2, r3
 8006b3a:	9204      	str	r2, [sp, #16]
 8006b3c:	2366      	movs	r3, #102	; 0x66
 8006b3e:	9307      	str	r3, [sp, #28]
 8006b40:	e033      	b.n	8006baa <_svfprintf_r+0x96a>
 8006b42:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b46:	f802 6b01 	strb.w	r6, [r2], #1
 8006b4a:	e675      	b.n	8006838 <_svfprintf_r+0x5f8>
 8006b4c:	b941      	cbnz	r1, 8006b60 <_svfprintf_r+0x920>
 8006b4e:	2230      	movs	r2, #48	; 0x30
 8006b50:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8006b54:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8006b58:	3330      	adds	r3, #48	; 0x30
 8006b5a:	f802 3b01 	strb.w	r3, [r2], #1
 8006b5e:	e677      	b.n	8006850 <_svfprintf_r+0x610>
 8006b60:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8006b64:	e7f8      	b.n	8006b58 <_svfprintf_r+0x918>
 8006b66:	b1e3      	cbz	r3, 8006ba2 <_svfprintf_r+0x962>
 8006b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b6a:	9a04      	ldr	r2, [sp, #16]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	e7e3      	b.n	8006b38 <_svfprintf_r+0x8f8>
 8006b70:	9b05      	ldr	r3, [sp, #20]
 8006b72:	429d      	cmp	r5, r3
 8006b74:	db07      	blt.n	8006b86 <_svfprintf_r+0x946>
 8006b76:	f018 0f01 	tst.w	r8, #1
 8006b7a:	d02d      	beq.n	8006bd8 <_svfprintf_r+0x998>
 8006b7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b7e:	18eb      	adds	r3, r5, r3
 8006b80:	9304      	str	r3, [sp, #16]
 8006b82:	2367      	movs	r3, #103	; 0x67
 8006b84:	e7db      	b.n	8006b3e <_svfprintf_r+0x8fe>
 8006b86:	9b05      	ldr	r3, [sp, #20]
 8006b88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b8a:	2d00      	cmp	r5, #0
 8006b8c:	4413      	add	r3, r2
 8006b8e:	9304      	str	r3, [sp, #16]
 8006b90:	dcf7      	bgt.n	8006b82 <_svfprintf_r+0x942>
 8006b92:	9a04      	ldr	r2, [sp, #16]
 8006b94:	f1c5 0301 	rsb	r3, r5, #1
 8006b98:	441a      	add	r2, r3
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	e7f0      	b.n	8006b80 <_svfprintf_r+0x940>
 8006b9e:	9504      	str	r5, [sp, #16]
 8006ba0:	e7cc      	b.n	8006b3c <_svfprintf_r+0x8fc>
 8006ba2:	2366      	movs	r3, #102	; 0x66
 8006ba4:	9307      	str	r3, [sp, #28]
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	9304      	str	r3, [sp, #16]
 8006baa:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 8006bae:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb0:	d025      	beq.n	8006bfe <_svfprintf_r+0x9be>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	2d00      	cmp	r5, #0
 8006bb6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8006bba:	f77f ae61 	ble.w	8006880 <_svfprintf_r+0x640>
 8006bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2bff      	cmp	r3, #255	; 0xff
 8006bc4:	d10a      	bne.n	8006bdc <_svfprintf_r+0x99c>
 8006bc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006bca:	9904      	ldr	r1, [sp, #16]
 8006bcc:	4413      	add	r3, r2
 8006bce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bd0:	fb02 1303 	mla	r3, r2, r3, r1
 8006bd4:	9304      	str	r3, [sp, #16]
 8006bd6:	e653      	b.n	8006880 <_svfprintf_r+0x640>
 8006bd8:	9504      	str	r5, [sp, #16]
 8006bda:	e7d2      	b.n	8006b82 <_svfprintf_r+0x942>
 8006bdc:	42ab      	cmp	r3, r5
 8006bde:	daf2      	bge.n	8006bc6 <_svfprintf_r+0x986>
 8006be0:	1aed      	subs	r5, r5, r3
 8006be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be4:	785b      	ldrb	r3, [r3, #1]
 8006be6:	b133      	cbz	r3, 8006bf6 <_svfprintf_r+0x9b6>
 8006be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bea:	3301      	adds	r3, #1
 8006bec:	9309      	str	r3, [sp, #36]	; 0x24
 8006bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf4:	e7e3      	b.n	8006bbe <_svfprintf_r+0x97e>
 8006bf6:	9b08      	ldr	r3, [sp, #32]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	9308      	str	r3, [sp, #32]
 8006bfc:	e7df      	b.n	8006bbe <_svfprintf_r+0x97e>
 8006bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c00:	9308      	str	r3, [sp, #32]
 8006c02:	e63d      	b.n	8006880 <_svfprintf_r+0x640>
 8006c04:	4632      	mov	r2, r6
 8006c06:	f018 0f20 	tst.w	r8, #32
 8006c0a:	f852 3b04 	ldr.w	r3, [r2], #4
 8006c0e:	9206      	str	r2, [sp, #24]
 8006c10:	d009      	beq.n	8006c26 <_svfprintf_r+0x9e6>
 8006c12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c14:	4610      	mov	r0, r2
 8006c16:	17d1      	asrs	r1, r2, #31
 8006c18:	e9c3 0100 	strd	r0, r1, [r3]
 8006c1c:	9e06      	ldr	r6, [sp, #24]
 8006c1e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8006c22:	f7ff bb4d 	b.w	80062c0 <_svfprintf_r+0x80>
 8006c26:	f018 0f10 	tst.w	r8, #16
 8006c2a:	d002      	beq.n	8006c32 <_svfprintf_r+0x9f2>
 8006c2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	e7f4      	b.n	8006c1c <_svfprintf_r+0x9dc>
 8006c32:	f018 0f40 	tst.w	r8, #64	; 0x40
 8006c36:	d002      	beq.n	8006c3e <_svfprintf_r+0x9fe>
 8006c38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c3a:	801a      	strh	r2, [r3, #0]
 8006c3c:	e7ee      	b.n	8006c1c <_svfprintf_r+0x9dc>
 8006c3e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8006c42:	d0f3      	beq.n	8006c2c <_svfprintf_r+0x9ec>
 8006c44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	e7e8      	b.n	8006c1c <_svfprintf_r+0x9dc>
 8006c4a:	f048 0810 	orr.w	r8, r8, #16
 8006c4e:	f018 0f20 	tst.w	r8, #32
 8006c52:	d01e      	beq.n	8006c92 <_svfprintf_r+0xa52>
 8006c54:	3607      	adds	r6, #7
 8006c56:	f026 0307 	bic.w	r3, r6, #7
 8006c5a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8006c5e:	9306      	str	r3, [sp, #24]
 8006c60:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8006c64:	2300      	movs	r3, #0
 8006c66:	2200      	movs	r2, #0
 8006c68:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8006c6c:	9a04      	ldr	r2, [sp, #16]
 8006c6e:	3201      	adds	r2, #1
 8006c70:	f000 848d 	beq.w	800758e <_svfprintf_r+0x134e>
 8006c74:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 8006c78:	9203      	str	r2, [sp, #12]
 8006c7a:	ea56 0207 	orrs.w	r2, r6, r7
 8006c7e:	f040 848c 	bne.w	800759a <_svfprintf_r+0x135a>
 8006c82:	9a04      	ldr	r2, [sp, #16]
 8006c84:	2a00      	cmp	r2, #0
 8006c86:	f000 80f5 	beq.w	8006e74 <_svfprintf_r+0xc34>
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	f040 8488 	bne.w	80075a0 <_svfprintf_r+0x1360>
 8006c90:	e097      	b.n	8006dc2 <_svfprintf_r+0xb82>
 8006c92:	1d33      	adds	r3, r6, #4
 8006c94:	f018 0f10 	tst.w	r8, #16
 8006c98:	9306      	str	r3, [sp, #24]
 8006c9a:	d001      	beq.n	8006ca0 <_svfprintf_r+0xa60>
 8006c9c:	6836      	ldr	r6, [r6, #0]
 8006c9e:	e003      	b.n	8006ca8 <_svfprintf_r+0xa68>
 8006ca0:	f018 0f40 	tst.w	r8, #64	; 0x40
 8006ca4:	d002      	beq.n	8006cac <_svfprintf_r+0xa6c>
 8006ca6:	8836      	ldrh	r6, [r6, #0]
 8006ca8:	2700      	movs	r7, #0
 8006caa:	e7d9      	b.n	8006c60 <_svfprintf_r+0xa20>
 8006cac:	f418 7f00 	tst.w	r8, #512	; 0x200
 8006cb0:	d0f4      	beq.n	8006c9c <_svfprintf_r+0xa5c>
 8006cb2:	7836      	ldrb	r6, [r6, #0]
 8006cb4:	e7f8      	b.n	8006ca8 <_svfprintf_r+0xa68>
 8006cb6:	4633      	mov	r3, r6
 8006cb8:	2278      	movs	r2, #120	; 0x78
 8006cba:	f853 6b04 	ldr.w	r6, [r3], #4
 8006cbe:	9306      	str	r3, [sp, #24]
 8006cc0:	f647 0330 	movw	r3, #30768	; 0x7830
 8006cc4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8006cc8:	4ba1      	ldr	r3, [pc, #644]	; (8006f50 <_svfprintf_r+0xd10>)
 8006cca:	9316      	str	r3, [sp, #88]	; 0x58
 8006ccc:	2700      	movs	r7, #0
 8006cce:	f048 0802 	orr.w	r8, r8, #2
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	9207      	str	r2, [sp, #28]
 8006cd6:	e7c6      	b.n	8006c66 <_svfprintf_r+0xa26>
 8006cd8:	4633      	mov	r3, r6
 8006cda:	2500      	movs	r5, #0
 8006cdc:	f853 bb04 	ldr.w	fp, [r3], #4
 8006ce0:	9306      	str	r3, [sp, #24]
 8006ce2:	9b04      	ldr	r3, [sp, #16]
 8006ce4:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8006ce8:	1c59      	adds	r1, r3, #1
 8006cea:	d010      	beq.n	8006d0e <_svfprintf_r+0xace>
 8006cec:	461a      	mov	r2, r3
 8006cee:	4629      	mov	r1, r5
 8006cf0:	4658      	mov	r0, fp
 8006cf2:	f7f9 fa6d 	bl	80001d0 <memchr>
 8006cf6:	9003      	str	r0, [sp, #12]
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	f000 80d2 	beq.w	8006ea2 <_svfprintf_r+0xc62>
 8006cfe:	eba0 030b 	sub.w	r3, r0, fp
 8006d02:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8006d06:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8006d0a:	462e      	mov	r6, r5
 8006d0c:	e5c0      	b.n	8006890 <_svfprintf_r+0x650>
 8006d0e:	4658      	mov	r0, fp
 8006d10:	f7f9 faae 	bl	8000270 <strlen>
 8006d14:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8006d18:	e463      	b.n	80065e2 <_svfprintf_r+0x3a2>
 8006d1a:	f048 0810 	orr.w	r8, r8, #16
 8006d1e:	f018 0f20 	tst.w	r8, #32
 8006d22:	d007      	beq.n	8006d34 <_svfprintf_r+0xaf4>
 8006d24:	3607      	adds	r6, #7
 8006d26:	f026 0307 	bic.w	r3, r6, #7
 8006d2a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8006d2e:	9306      	str	r3, [sp, #24]
 8006d30:	2301      	movs	r3, #1
 8006d32:	e798      	b.n	8006c66 <_svfprintf_r+0xa26>
 8006d34:	1d33      	adds	r3, r6, #4
 8006d36:	f018 0f10 	tst.w	r8, #16
 8006d3a:	9306      	str	r3, [sp, #24]
 8006d3c:	d001      	beq.n	8006d42 <_svfprintf_r+0xb02>
 8006d3e:	6836      	ldr	r6, [r6, #0]
 8006d40:	e003      	b.n	8006d4a <_svfprintf_r+0xb0a>
 8006d42:	f018 0f40 	tst.w	r8, #64	; 0x40
 8006d46:	d002      	beq.n	8006d4e <_svfprintf_r+0xb0e>
 8006d48:	8836      	ldrh	r6, [r6, #0]
 8006d4a:	2700      	movs	r7, #0
 8006d4c:	e7f0      	b.n	8006d30 <_svfprintf_r+0xaf0>
 8006d4e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8006d52:	d0f4      	beq.n	8006d3e <_svfprintf_r+0xafe>
 8006d54:	7836      	ldrb	r6, [r6, #0]
 8006d56:	e7f8      	b.n	8006d4a <_svfprintf_r+0xb0a>
 8006d58:	4b7e      	ldr	r3, [pc, #504]	; (8006f54 <_svfprintf_r+0xd14>)
 8006d5a:	9316      	str	r3, [sp, #88]	; 0x58
 8006d5c:	f018 0f20 	tst.w	r8, #32
 8006d60:	d019      	beq.n	8006d96 <_svfprintf_r+0xb56>
 8006d62:	3607      	adds	r6, #7
 8006d64:	f026 0307 	bic.w	r3, r6, #7
 8006d68:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8006d6c:	9306      	str	r3, [sp, #24]
 8006d6e:	f018 0f01 	tst.w	r8, #1
 8006d72:	d00a      	beq.n	8006d8a <_svfprintf_r+0xb4a>
 8006d74:	ea56 0307 	orrs.w	r3, r6, r7
 8006d78:	d007      	beq.n	8006d8a <_svfprintf_r+0xb4a>
 8006d7a:	2330      	movs	r3, #48	; 0x30
 8006d7c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8006d80:	9b07      	ldr	r3, [sp, #28]
 8006d82:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8006d86:	f048 0802 	orr.w	r8, r8, #2
 8006d8a:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e769      	b.n	8006c66 <_svfprintf_r+0xa26>
 8006d92:	4b6f      	ldr	r3, [pc, #444]	; (8006f50 <_svfprintf_r+0xd10>)
 8006d94:	e7e1      	b.n	8006d5a <_svfprintf_r+0xb1a>
 8006d96:	1d33      	adds	r3, r6, #4
 8006d98:	f018 0f10 	tst.w	r8, #16
 8006d9c:	9306      	str	r3, [sp, #24]
 8006d9e:	d001      	beq.n	8006da4 <_svfprintf_r+0xb64>
 8006da0:	6836      	ldr	r6, [r6, #0]
 8006da2:	e003      	b.n	8006dac <_svfprintf_r+0xb6c>
 8006da4:	f018 0f40 	tst.w	r8, #64	; 0x40
 8006da8:	d002      	beq.n	8006db0 <_svfprintf_r+0xb70>
 8006daa:	8836      	ldrh	r6, [r6, #0]
 8006dac:	2700      	movs	r7, #0
 8006dae:	e7de      	b.n	8006d6e <_svfprintf_r+0xb2e>
 8006db0:	f418 7f00 	tst.w	r8, #512	; 0x200
 8006db4:	d0f4      	beq.n	8006da0 <_svfprintf_r+0xb60>
 8006db6:	7836      	ldrb	r6, [r6, #0]
 8006db8:	e7f8      	b.n	8006dac <_svfprintf_r+0xb6c>
 8006dba:	2f00      	cmp	r7, #0
 8006dbc:	bf08      	it	eq
 8006dbe:	2e0a      	cmpeq	r6, #10
 8006dc0:	d206      	bcs.n	8006dd0 <_svfprintf_r+0xb90>
 8006dc2:	3630      	adds	r6, #48	; 0x30
 8006dc4:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 8006dc8:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 8006dcc:	f000 bc06 	b.w	80075dc <_svfprintf_r+0x139c>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	9305      	str	r3, [sp, #20]
 8006dd4:	9b03      	ldr	r3, [sp, #12]
 8006dd6:	ad4e      	add	r5, sp, #312	; 0x138
 8006dd8:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 8006ddc:	220a      	movs	r2, #10
 8006dde:	2300      	movs	r3, #0
 8006de0:	4630      	mov	r0, r6
 8006de2:	4639      	mov	r1, r7
 8006de4:	f7f9 fee0 	bl	8000ba8 <__aeabi_uldivmod>
 8006de8:	9b05      	ldr	r3, [sp, #20]
 8006dea:	3230      	adds	r2, #48	; 0x30
 8006dec:	3301      	adds	r3, #1
 8006dee:	f105 3bff 	add.w	fp, r5, #4294967295
 8006df2:	f805 2c01 	strb.w	r2, [r5, #-1]
 8006df6:	9305      	str	r3, [sp, #20]
 8006df8:	f1b8 0f00 	cmp.w	r8, #0
 8006dfc:	d019      	beq.n	8006e32 <_svfprintf_r+0xbf2>
 8006dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e00:	9a05      	ldr	r2, [sp, #20]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d114      	bne.n	8006e32 <_svfprintf_r+0xbf2>
 8006e08:	2aff      	cmp	r2, #255	; 0xff
 8006e0a:	d012      	beq.n	8006e32 <_svfprintf_r+0xbf2>
 8006e0c:	2f00      	cmp	r7, #0
 8006e0e:	bf08      	it	eq
 8006e10:	2e0a      	cmpeq	r6, #10
 8006e12:	d30e      	bcc.n	8006e32 <_svfprintf_r+0xbf2>
 8006e14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e16:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006e18:	ebab 0b03 	sub.w	fp, fp, r3
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	4658      	mov	r0, fp
 8006e20:	f002 f962 	bl	80090e8 <strncpy>
 8006e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e26:	785d      	ldrb	r5, [r3, #1]
 8006e28:	b195      	cbz	r5, 8006e50 <_svfprintf_r+0xc10>
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	930a      	str	r3, [sp, #40]	; 0x28
 8006e2e:	2300      	movs	r3, #0
 8006e30:	9305      	str	r3, [sp, #20]
 8006e32:	220a      	movs	r2, #10
 8006e34:	2300      	movs	r3, #0
 8006e36:	4630      	mov	r0, r6
 8006e38:	4639      	mov	r1, r7
 8006e3a:	f7f9 feb5 	bl	8000ba8 <__aeabi_uldivmod>
 8006e3e:	2f00      	cmp	r7, #0
 8006e40:	bf08      	it	eq
 8006e42:	2e0a      	cmpeq	r6, #10
 8006e44:	f0c0 83ca 	bcc.w	80075dc <_svfprintf_r+0x139c>
 8006e48:	4606      	mov	r6, r0
 8006e4a:	460f      	mov	r7, r1
 8006e4c:	465d      	mov	r5, fp
 8006e4e:	e7c5      	b.n	8006ddc <_svfprintf_r+0xb9c>
 8006e50:	9505      	str	r5, [sp, #20]
 8006e52:	e7ee      	b.n	8006e32 <_svfprintf_r+0xbf2>
 8006e54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006e56:	f006 030f 	and.w	r3, r6, #15
 8006e5a:	5cd3      	ldrb	r3, [r2, r3]
 8006e5c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8006e60:	0933      	lsrs	r3, r6, #4
 8006e62:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8006e66:	093a      	lsrs	r2, r7, #4
 8006e68:	461e      	mov	r6, r3
 8006e6a:	4617      	mov	r7, r2
 8006e6c:	ea56 0307 	orrs.w	r3, r6, r7
 8006e70:	d1f0      	bne.n	8006e54 <_svfprintf_r+0xc14>
 8006e72:	e3b3      	b.n	80075dc <_svfprintf_r+0x139c>
 8006e74:	b933      	cbnz	r3, 8006e84 <_svfprintf_r+0xc44>
 8006e76:	f018 0f01 	tst.w	r8, #1
 8006e7a:	d003      	beq.n	8006e84 <_svfprintf_r+0xc44>
 8006e7c:	2330      	movs	r3, #48	; 0x30
 8006e7e:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8006e82:	e7a1      	b.n	8006dc8 <_svfprintf_r+0xb88>
 8006e84:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8006e88:	e3a8      	b.n	80075dc <_svfprintf_r+0x139c>
 8006e8a:	9b07      	ldr	r3, [sp, #28]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8373 	beq.w	8007578 <_svfprintf_r+0x1338>
 8006e92:	2000      	movs	r0, #0
 8006e94:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8006e98:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8006e9c:	9606      	str	r6, [sp, #24]
 8006e9e:	f7ff bb34 	b.w	800650a <_svfprintf_r+0x2ca>
 8006ea2:	9e03      	ldr	r6, [sp, #12]
 8006ea4:	f7ff bb9e 	b.w	80065e4 <_svfprintf_r+0x3a4>
 8006ea8:	2010      	movs	r0, #16
 8006eaa:	4402      	add	r2, r0
 8006eac:	2b07      	cmp	r3, #7
 8006eae:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006eb2:	6060      	str	r0, [r4, #4]
 8006eb4:	dd08      	ble.n	8006ec8 <_svfprintf_r+0xc88>
 8006eb6:	aa22      	add	r2, sp, #136	; 0x88
 8006eb8:	4649      	mov	r1, r9
 8006eba:	4650      	mov	r0, sl
 8006ebc:	f002 f927 	bl	800910e <__ssprint_r>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	f040 8337 	bne.w	8007534 <_svfprintf_r+0x12f4>
 8006ec6:	a925      	add	r1, sp, #148	; 0x94
 8006ec8:	3f10      	subs	r7, #16
 8006eca:	460c      	mov	r4, r1
 8006ecc:	e4fb      	b.n	80068c6 <_svfprintf_r+0x686>
 8006ece:	460c      	mov	r4, r1
 8006ed0:	e514      	b.n	80068fc <_svfprintf_r+0x6bc>
 8006ed2:	aa22      	add	r2, sp, #136	; 0x88
 8006ed4:	4649      	mov	r1, r9
 8006ed6:	4650      	mov	r0, sl
 8006ed8:	f002 f919 	bl	800910e <__ssprint_r>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	f040 8329 	bne.w	8007534 <_svfprintf_r+0x12f4>
 8006ee2:	ac25      	add	r4, sp, #148	; 0x94
 8006ee4:	e51c      	b.n	8006920 <_svfprintf_r+0x6e0>
 8006ee6:	aa22      	add	r2, sp, #136	; 0x88
 8006ee8:	4649      	mov	r1, r9
 8006eea:	4650      	mov	r0, sl
 8006eec:	f002 f90f 	bl	800910e <__ssprint_r>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	f040 831f 	bne.w	8007534 <_svfprintf_r+0x12f4>
 8006ef6:	ac25      	add	r4, sp, #148	; 0x94
 8006ef8:	e522      	b.n	8006940 <_svfprintf_r+0x700>
 8006efa:	2010      	movs	r0, #16
 8006efc:	4402      	add	r2, r0
 8006efe:	2b07      	cmp	r3, #7
 8006f00:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006f04:	6060      	str	r0, [r4, #4]
 8006f06:	dd08      	ble.n	8006f1a <_svfprintf_r+0xcda>
 8006f08:	aa22      	add	r2, sp, #136	; 0x88
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	4650      	mov	r0, sl
 8006f0e:	f002 f8fe 	bl	800910e <__ssprint_r>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	f040 830e 	bne.w	8007534 <_svfprintf_r+0x12f4>
 8006f18:	a925      	add	r1, sp, #148	; 0x94
 8006f1a:	3f10      	subs	r7, #16
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	e517      	b.n	8006950 <_svfprintf_r+0x710>
 8006f20:	460c      	mov	r4, r1
 8006f22:	e530      	b.n	8006986 <_svfprintf_r+0x746>
 8006f24:	2010      	movs	r0, #16
 8006f26:	4402      	add	r2, r0
 8006f28:	2b07      	cmp	r3, #7
 8006f2a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006f2e:	6060      	str	r0, [r4, #4]
 8006f30:	dd08      	ble.n	8006f44 <_svfprintf_r+0xd04>
 8006f32:	aa22      	add	r2, sp, #136	; 0x88
 8006f34:	4649      	mov	r1, r9
 8006f36:	4650      	mov	r0, sl
 8006f38:	f002 f8e9 	bl	800910e <__ssprint_r>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	f040 82f9 	bne.w	8007534 <_svfprintf_r+0x12f4>
 8006f42:	a925      	add	r1, sp, #148	; 0x94
 8006f44:	3e10      	subs	r6, #16
 8006f46:	460c      	mov	r4, r1
 8006f48:	e522      	b.n	8006990 <_svfprintf_r+0x750>
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	e548      	b.n	80069e0 <_svfprintf_r+0x7a0>
 8006f4e:	bf00      	nop
 8006f50:	0800ac88 	.word	0x0800ac88
 8006f54:	0800ac99 	.word	0x0800ac99
 8006f58:	9b07      	ldr	r3, [sp, #28]
 8006f5a:	2b65      	cmp	r3, #101	; 0x65
 8006f5c:	f340 8232 	ble.w	80073c4 <_svfprintf_r+0x1184>
 8006f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f64:	2200      	movs	r2, #0
 8006f66:	2300      	movs	r3, #0
 8006f68:	f7f9 fdae 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d068      	beq.n	8007042 <_svfprintf_r+0xe02>
 8006f70:	4b6d      	ldr	r3, [pc, #436]	; (8007128 <_svfprintf_r+0xee8>)
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	2301      	movs	r3, #1
 8006f76:	441e      	add	r6, r3
 8006f78:	6063      	str	r3, [r4, #4]
 8006f7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f7c:	9624      	str	r6, [sp, #144]	; 0x90
 8006f7e:	3301      	adds	r3, #1
 8006f80:	2b07      	cmp	r3, #7
 8006f82:	9323      	str	r3, [sp, #140]	; 0x8c
 8006f84:	dc37      	bgt.n	8006ff6 <_svfprintf_r+0xdb6>
 8006f86:	3408      	adds	r4, #8
 8006f88:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006f8a:	9a05      	ldr	r2, [sp, #20]
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	db03      	blt.n	8006f98 <_svfprintf_r+0xd58>
 8006f90:	f018 0f01 	tst.w	r8, #1
 8006f94:	f43f ad36 	beq.w	8006a04 <_svfprintf_r+0x7c4>
 8006f98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f9a:	6023      	str	r3, [r4, #0]
 8006f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fa0:	6063      	str	r3, [r4, #4]
 8006fa2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006fa4:	4413      	add	r3, r2
 8006fa6:	9324      	str	r3, [sp, #144]	; 0x90
 8006fa8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006faa:	3301      	adds	r3, #1
 8006fac:	2b07      	cmp	r3, #7
 8006fae:	9323      	str	r3, [sp, #140]	; 0x8c
 8006fb0:	dc2b      	bgt.n	800700a <_svfprintf_r+0xdca>
 8006fb2:	3408      	adds	r4, #8
 8006fb4:	9b05      	ldr	r3, [sp, #20]
 8006fb6:	1e5d      	subs	r5, r3, #1
 8006fb8:	2d00      	cmp	r5, #0
 8006fba:	f77f ad23 	ble.w	8006a04 <_svfprintf_r+0x7c4>
 8006fbe:	4e5b      	ldr	r6, [pc, #364]	; (800712c <_svfprintf_r+0xeec>)
 8006fc0:	2710      	movs	r7, #16
 8006fc2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006fc6:	2d10      	cmp	r5, #16
 8006fc8:	f103 0301 	add.w	r3, r3, #1
 8006fcc:	f104 0108 	add.w	r1, r4, #8
 8006fd0:	6026      	str	r6, [r4, #0]
 8006fd2:	dc24      	bgt.n	800701e <_svfprintf_r+0xdde>
 8006fd4:	6065      	str	r5, [r4, #4]
 8006fd6:	2b07      	cmp	r3, #7
 8006fd8:	4415      	add	r5, r2
 8006fda:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8006fde:	f340 8288 	ble.w	80074f2 <_svfprintf_r+0x12b2>
 8006fe2:	aa22      	add	r2, sp, #136	; 0x88
 8006fe4:	4649      	mov	r1, r9
 8006fe6:	4650      	mov	r0, sl
 8006fe8:	f002 f891 	bl	800910e <__ssprint_r>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	f040 82a1 	bne.w	8007534 <_svfprintf_r+0x12f4>
 8006ff2:	ac25      	add	r4, sp, #148	; 0x94
 8006ff4:	e506      	b.n	8006a04 <_svfprintf_r+0x7c4>
 8006ff6:	aa22      	add	r2, sp, #136	; 0x88
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	4650      	mov	r0, sl
 8006ffc:	f002 f887 	bl	800910e <__ssprint_r>
 8007000:	2800      	cmp	r0, #0
 8007002:	f040 8297 	bne.w	8007534 <_svfprintf_r+0x12f4>
 8007006:	ac25      	add	r4, sp, #148	; 0x94
 8007008:	e7be      	b.n	8006f88 <_svfprintf_r+0xd48>
 800700a:	aa22      	add	r2, sp, #136	; 0x88
 800700c:	4649      	mov	r1, r9
 800700e:	4650      	mov	r0, sl
 8007010:	f002 f87d 	bl	800910e <__ssprint_r>
 8007014:	2800      	cmp	r0, #0
 8007016:	f040 828d 	bne.w	8007534 <_svfprintf_r+0x12f4>
 800701a:	ac25      	add	r4, sp, #148	; 0x94
 800701c:	e7ca      	b.n	8006fb4 <_svfprintf_r+0xd74>
 800701e:	3210      	adds	r2, #16
 8007020:	2b07      	cmp	r3, #7
 8007022:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007026:	6067      	str	r7, [r4, #4]
 8007028:	dd08      	ble.n	800703c <_svfprintf_r+0xdfc>
 800702a:	aa22      	add	r2, sp, #136	; 0x88
 800702c:	4649      	mov	r1, r9
 800702e:	4650      	mov	r0, sl
 8007030:	f002 f86d 	bl	800910e <__ssprint_r>
 8007034:	2800      	cmp	r0, #0
 8007036:	f040 827d 	bne.w	8007534 <_svfprintf_r+0x12f4>
 800703a:	a925      	add	r1, sp, #148	; 0x94
 800703c:	3d10      	subs	r5, #16
 800703e:	460c      	mov	r4, r1
 8007040:	e7bf      	b.n	8006fc2 <_svfprintf_r+0xd82>
 8007042:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007044:	2b00      	cmp	r3, #0
 8007046:	dc73      	bgt.n	8007130 <_svfprintf_r+0xef0>
 8007048:	4b37      	ldr	r3, [pc, #220]	; (8007128 <_svfprintf_r+0xee8>)
 800704a:	6023      	str	r3, [r4, #0]
 800704c:	2301      	movs	r3, #1
 800704e:	441e      	add	r6, r3
 8007050:	6063      	str	r3, [r4, #4]
 8007052:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007054:	9624      	str	r6, [sp, #144]	; 0x90
 8007056:	3301      	adds	r3, #1
 8007058:	2b07      	cmp	r3, #7
 800705a:	9323      	str	r3, [sp, #140]	; 0x8c
 800705c:	dc3d      	bgt.n	80070da <_svfprintf_r+0xe9a>
 800705e:	3408      	adds	r4, #8
 8007060:	9905      	ldr	r1, [sp, #20]
 8007062:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007064:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007066:	430a      	orrs	r2, r1
 8007068:	f008 0101 	and.w	r1, r8, #1
 800706c:	430a      	orrs	r2, r1
 800706e:	f43f acc9 	beq.w	8006a04 <_svfprintf_r+0x7c4>
 8007072:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007074:	6022      	str	r2, [r4, #0]
 8007076:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007078:	6062      	str	r2, [r4, #4]
 800707a:	4413      	add	r3, r2
 800707c:	9324      	str	r3, [sp, #144]	; 0x90
 800707e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007080:	3301      	adds	r3, #1
 8007082:	2b07      	cmp	r3, #7
 8007084:	9323      	str	r3, [sp, #140]	; 0x8c
 8007086:	dc32      	bgt.n	80070ee <_svfprintf_r+0xeae>
 8007088:	3408      	adds	r4, #8
 800708a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800708c:	2d00      	cmp	r5, #0
 800708e:	da1b      	bge.n	80070c8 <_svfprintf_r+0xe88>
 8007090:	4e26      	ldr	r6, [pc, #152]	; (800712c <_svfprintf_r+0xeec>)
 8007092:	426d      	negs	r5, r5
 8007094:	4623      	mov	r3, r4
 8007096:	2710      	movs	r7, #16
 8007098:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800709c:	2d10      	cmp	r5, #16
 800709e:	f102 0201 	add.w	r2, r2, #1
 80070a2:	f104 0408 	add.w	r4, r4, #8
 80070a6:	601e      	str	r6, [r3, #0]
 80070a8:	dc2b      	bgt.n	8007102 <_svfprintf_r+0xec2>
 80070aa:	605d      	str	r5, [r3, #4]
 80070ac:	2a07      	cmp	r2, #7
 80070ae:	440d      	add	r5, r1
 80070b0:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 80070b4:	dd08      	ble.n	80070c8 <_svfprintf_r+0xe88>
 80070b6:	aa22      	add	r2, sp, #136	; 0x88
 80070b8:	4649      	mov	r1, r9
 80070ba:	4650      	mov	r0, sl
 80070bc:	f002 f827 	bl	800910e <__ssprint_r>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	f040 8237 	bne.w	8007534 <_svfprintf_r+0x12f4>
 80070c6:	ac25      	add	r4, sp, #148	; 0x94
 80070c8:	9b05      	ldr	r3, [sp, #20]
 80070ca:	9a05      	ldr	r2, [sp, #20]
 80070cc:	6063      	str	r3, [r4, #4]
 80070ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80070d0:	f8c4 b000 	str.w	fp, [r4]
 80070d4:	4413      	add	r3, r2
 80070d6:	9324      	str	r3, [sp, #144]	; 0x90
 80070d8:	e48d      	b.n	80069f6 <_svfprintf_r+0x7b6>
 80070da:	aa22      	add	r2, sp, #136	; 0x88
 80070dc:	4649      	mov	r1, r9
 80070de:	4650      	mov	r0, sl
 80070e0:	f002 f815 	bl	800910e <__ssprint_r>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	f040 8225 	bne.w	8007534 <_svfprintf_r+0x12f4>
 80070ea:	ac25      	add	r4, sp, #148	; 0x94
 80070ec:	e7b8      	b.n	8007060 <_svfprintf_r+0xe20>
 80070ee:	aa22      	add	r2, sp, #136	; 0x88
 80070f0:	4649      	mov	r1, r9
 80070f2:	4650      	mov	r0, sl
 80070f4:	f002 f80b 	bl	800910e <__ssprint_r>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	f040 821b 	bne.w	8007534 <_svfprintf_r+0x12f4>
 80070fe:	ac25      	add	r4, sp, #148	; 0x94
 8007100:	e7c3      	b.n	800708a <_svfprintf_r+0xe4a>
 8007102:	3110      	adds	r1, #16
 8007104:	2a07      	cmp	r2, #7
 8007106:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800710a:	605f      	str	r7, [r3, #4]
 800710c:	dd08      	ble.n	8007120 <_svfprintf_r+0xee0>
 800710e:	aa22      	add	r2, sp, #136	; 0x88
 8007110:	4649      	mov	r1, r9
 8007112:	4650      	mov	r0, sl
 8007114:	f001 fffb 	bl	800910e <__ssprint_r>
 8007118:	2800      	cmp	r0, #0
 800711a:	f040 820b 	bne.w	8007534 <_svfprintf_r+0x12f4>
 800711e:	ac25      	add	r4, sp, #148	; 0x94
 8007120:	3d10      	subs	r5, #16
 8007122:	4623      	mov	r3, r4
 8007124:	e7b8      	b.n	8007098 <_svfprintf_r+0xe58>
 8007126:	bf00      	nop
 8007128:	0800acaa 	.word	0x0800acaa
 800712c:	0800acbc 	.word	0x0800acbc
 8007130:	9b05      	ldr	r3, [sp, #20]
 8007132:	42ab      	cmp	r3, r5
 8007134:	bfa8      	it	ge
 8007136:	462b      	movge	r3, r5
 8007138:	2b00      	cmp	r3, #0
 800713a:	461f      	mov	r7, r3
 800713c:	dd0a      	ble.n	8007154 <_svfprintf_r+0xf14>
 800713e:	441e      	add	r6, r3
 8007140:	e9c4 b300 	strd	fp, r3, [r4]
 8007144:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007146:	9624      	str	r6, [sp, #144]	; 0x90
 8007148:	3301      	adds	r3, #1
 800714a:	2b07      	cmp	r3, #7
 800714c:	9323      	str	r3, [sp, #140]	; 0x8c
 800714e:	f300 8086 	bgt.w	800725e <_svfprintf_r+0x101e>
 8007152:	3408      	adds	r4, #8
 8007154:	2f00      	cmp	r7, #0
 8007156:	bfac      	ite	ge
 8007158:	1bee      	subge	r6, r5, r7
 800715a:	462e      	movlt	r6, r5
 800715c:	2e00      	cmp	r6, #0
 800715e:	dd19      	ble.n	8007194 <_svfprintf_r+0xf54>
 8007160:	4f97      	ldr	r7, [pc, #604]	; (80073c0 <_svfprintf_r+0x1180>)
 8007162:	6027      	str	r7, [r4, #0]
 8007164:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8007168:	2e10      	cmp	r6, #16
 800716a:	f103 0301 	add.w	r3, r3, #1
 800716e:	f104 0108 	add.w	r1, r4, #8
 8007172:	dc7e      	bgt.n	8007272 <_svfprintf_r+0x1032>
 8007174:	6066      	str	r6, [r4, #4]
 8007176:	2b07      	cmp	r3, #7
 8007178:	4416      	add	r6, r2
 800717a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800717e:	f340 808b 	ble.w	8007298 <_svfprintf_r+0x1058>
 8007182:	aa22      	add	r2, sp, #136	; 0x88
 8007184:	4649      	mov	r1, r9
 8007186:	4650      	mov	r0, sl
 8007188:	f001 ffc1 	bl	800910e <__ssprint_r>
 800718c:	2800      	cmp	r0, #0
 800718e:	f040 81d1 	bne.w	8007534 <_svfprintf_r+0x12f4>
 8007192:	ac25      	add	r4, sp, #148	; 0x94
 8007194:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8007198:	445d      	add	r5, fp
 800719a:	d00b      	beq.n	80071b4 <_svfprintf_r+0xf74>
 800719c:	4e88      	ldr	r6, [pc, #544]	; (80073c0 <_svfprintf_r+0x1180>)
 800719e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d17b      	bne.n	800729c <_svfprintf_r+0x105c>
 80071a4:	9b08      	ldr	r3, [sp, #32]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d17b      	bne.n	80072a2 <_svfprintf_r+0x1062>
 80071aa:	9b05      	ldr	r3, [sp, #20]
 80071ac:	445b      	add	r3, fp
 80071ae:	429d      	cmp	r5, r3
 80071b0:	bf28      	it	cs
 80071b2:	461d      	movcs	r5, r3
 80071b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80071b6:	9a05      	ldr	r2, [sp, #20]
 80071b8:	4293      	cmp	r3, r2
 80071ba:	db02      	blt.n	80071c2 <_svfprintf_r+0xf82>
 80071bc:	f018 0f01 	tst.w	r8, #1
 80071c0:	d00e      	beq.n	80071e0 <_svfprintf_r+0xfa0>
 80071c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ca:	6063      	str	r3, [r4, #4]
 80071cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80071ce:	4413      	add	r3, r2
 80071d0:	9324      	str	r3, [sp, #144]	; 0x90
 80071d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071d4:	3301      	adds	r3, #1
 80071d6:	2b07      	cmp	r3, #7
 80071d8:	9323      	str	r3, [sp, #140]	; 0x8c
 80071da:	f300 80dd 	bgt.w	8007398 <_svfprintf_r+0x1158>
 80071de:	3408      	adds	r4, #8
 80071e0:	9b05      	ldr	r3, [sp, #20]
 80071e2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80071e4:	eb0b 0203 	add.w	r2, fp, r3
 80071e8:	1b9e      	subs	r6, r3, r6
 80071ea:	1b52      	subs	r2, r2, r5
 80071ec:	4296      	cmp	r6, r2
 80071ee:	bfa8      	it	ge
 80071f0:	4616      	movge	r6, r2
 80071f2:	2e00      	cmp	r6, #0
 80071f4:	dd0b      	ble.n	800720e <_svfprintf_r+0xfce>
 80071f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80071f8:	4433      	add	r3, r6
 80071fa:	9324      	str	r3, [sp, #144]	; 0x90
 80071fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071fe:	3301      	adds	r3, #1
 8007200:	2b07      	cmp	r3, #7
 8007202:	e9c4 5600 	strd	r5, r6, [r4]
 8007206:	9323      	str	r3, [sp, #140]	; 0x8c
 8007208:	f300 80d0 	bgt.w	80073ac <_svfprintf_r+0x116c>
 800720c:	3408      	adds	r4, #8
 800720e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007210:	9b05      	ldr	r3, [sp, #20]
 8007212:	2e00      	cmp	r6, #0
 8007214:	eba3 0505 	sub.w	r5, r3, r5
 8007218:	bfa8      	it	ge
 800721a:	1bad      	subge	r5, r5, r6
 800721c:	2d00      	cmp	r5, #0
 800721e:	f77f abf1 	ble.w	8006a04 <_svfprintf_r+0x7c4>
 8007222:	4e67      	ldr	r6, [pc, #412]	; (80073c0 <_svfprintf_r+0x1180>)
 8007224:	2710      	movs	r7, #16
 8007226:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800722a:	2d10      	cmp	r5, #16
 800722c:	f103 0301 	add.w	r3, r3, #1
 8007230:	f104 0108 	add.w	r1, r4, #8
 8007234:	6026      	str	r6, [r4, #0]
 8007236:	f77f aecd 	ble.w	8006fd4 <_svfprintf_r+0xd94>
 800723a:	3210      	adds	r2, #16
 800723c:	2b07      	cmp	r3, #7
 800723e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007242:	6067      	str	r7, [r4, #4]
 8007244:	dd08      	ble.n	8007258 <_svfprintf_r+0x1018>
 8007246:	aa22      	add	r2, sp, #136	; 0x88
 8007248:	4649      	mov	r1, r9
 800724a:	4650      	mov	r0, sl
 800724c:	f001 ff5f 	bl	800910e <__ssprint_r>
 8007250:	2800      	cmp	r0, #0
 8007252:	f040 816f 	bne.w	8007534 <_svfprintf_r+0x12f4>
 8007256:	a925      	add	r1, sp, #148	; 0x94
 8007258:	3d10      	subs	r5, #16
 800725a:	460c      	mov	r4, r1
 800725c:	e7e3      	b.n	8007226 <_svfprintf_r+0xfe6>
 800725e:	aa22      	add	r2, sp, #136	; 0x88
 8007260:	4649      	mov	r1, r9
 8007262:	4650      	mov	r0, sl
 8007264:	f001 ff53 	bl	800910e <__ssprint_r>
 8007268:	2800      	cmp	r0, #0
 800726a:	f040 8163 	bne.w	8007534 <_svfprintf_r+0x12f4>
 800726e:	ac25      	add	r4, sp, #148	; 0x94
 8007270:	e770      	b.n	8007154 <_svfprintf_r+0xf14>
 8007272:	2010      	movs	r0, #16
 8007274:	4402      	add	r2, r0
 8007276:	2b07      	cmp	r3, #7
 8007278:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800727c:	6060      	str	r0, [r4, #4]
 800727e:	dd08      	ble.n	8007292 <_svfprintf_r+0x1052>
 8007280:	aa22      	add	r2, sp, #136	; 0x88
 8007282:	4649      	mov	r1, r9
 8007284:	4650      	mov	r0, sl
 8007286:	f001 ff42 	bl	800910e <__ssprint_r>
 800728a:	2800      	cmp	r0, #0
 800728c:	f040 8152 	bne.w	8007534 <_svfprintf_r+0x12f4>
 8007290:	a925      	add	r1, sp, #148	; 0x94
 8007292:	3e10      	subs	r6, #16
 8007294:	460c      	mov	r4, r1
 8007296:	e764      	b.n	8007162 <_svfprintf_r+0xf22>
 8007298:	460c      	mov	r4, r1
 800729a:	e77b      	b.n	8007194 <_svfprintf_r+0xf54>
 800729c:	9b08      	ldr	r3, [sp, #32]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d04a      	beq.n	8007338 <_svfprintf_r+0x10f8>
 80072a2:	9b08      	ldr	r3, [sp, #32]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	9308      	str	r3, [sp, #32]
 80072a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072aa:	6023      	str	r3, [r4, #0]
 80072ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072b0:	6063      	str	r3, [r4, #4]
 80072b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80072b4:	4413      	add	r3, r2
 80072b6:	9324      	str	r3, [sp, #144]	; 0x90
 80072b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072ba:	3301      	adds	r3, #1
 80072bc:	2b07      	cmp	r3, #7
 80072be:	9323      	str	r3, [sp, #140]	; 0x8c
 80072c0:	dc41      	bgt.n	8007346 <_svfprintf_r+0x1106>
 80072c2:	3408      	adds	r4, #8
 80072c4:	9b05      	ldr	r3, [sp, #20]
 80072c6:	445b      	add	r3, fp
 80072c8:	1b5a      	subs	r2, r3, r5
 80072ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	4293      	cmp	r3, r2
 80072d0:	bfa8      	it	ge
 80072d2:	4613      	movge	r3, r2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	461f      	mov	r7, r3
 80072d8:	dd0a      	ble.n	80072f0 <_svfprintf_r+0x10b0>
 80072da:	e9c4 5300 	strd	r5, r3, [r4]
 80072de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80072e0:	443b      	add	r3, r7
 80072e2:	9324      	str	r3, [sp, #144]	; 0x90
 80072e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072e6:	3301      	adds	r3, #1
 80072e8:	2b07      	cmp	r3, #7
 80072ea:	9323      	str	r3, [sp, #140]	; 0x8c
 80072ec:	dc35      	bgt.n	800735a <_svfprintf_r+0x111a>
 80072ee:	3408      	adds	r4, #8
 80072f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2f00      	cmp	r7, #0
 80072f6:	bfac      	ite	ge
 80072f8:	1bdf      	subge	r7, r3, r7
 80072fa:	461f      	movlt	r7, r3
 80072fc:	2f00      	cmp	r7, #0
 80072fe:	dd17      	ble.n	8007330 <_svfprintf_r+0x10f0>
 8007300:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8007304:	2f10      	cmp	r7, #16
 8007306:	f102 0201 	add.w	r2, r2, #1
 800730a:	f104 0108 	add.w	r1, r4, #8
 800730e:	6026      	str	r6, [r4, #0]
 8007310:	dc2d      	bgt.n	800736e <_svfprintf_r+0x112e>
 8007312:	443b      	add	r3, r7
 8007314:	2a07      	cmp	r2, #7
 8007316:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800731a:	6067      	str	r7, [r4, #4]
 800731c:	dd3a      	ble.n	8007394 <_svfprintf_r+0x1154>
 800731e:	aa22      	add	r2, sp, #136	; 0x88
 8007320:	4649      	mov	r1, r9
 8007322:	4650      	mov	r0, sl
 8007324:	f001 fef3 	bl	800910e <__ssprint_r>
 8007328:	2800      	cmp	r0, #0
 800732a:	f040 8103 	bne.w	8007534 <_svfprintf_r+0x12f4>
 800732e:	ac25      	add	r4, sp, #148	; 0x94
 8007330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	441d      	add	r5, r3
 8007336:	e732      	b.n	800719e <_svfprintf_r+0xf5e>
 8007338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800733a:	3b01      	subs	r3, #1
 800733c:	930a      	str	r3, [sp, #40]	; 0x28
 800733e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007340:	3b01      	subs	r3, #1
 8007342:	9309      	str	r3, [sp, #36]	; 0x24
 8007344:	e7b0      	b.n	80072a8 <_svfprintf_r+0x1068>
 8007346:	aa22      	add	r2, sp, #136	; 0x88
 8007348:	4649      	mov	r1, r9
 800734a:	4650      	mov	r0, sl
 800734c:	f001 fedf 	bl	800910e <__ssprint_r>
 8007350:	2800      	cmp	r0, #0
 8007352:	f040 80ef 	bne.w	8007534 <_svfprintf_r+0x12f4>
 8007356:	ac25      	add	r4, sp, #148	; 0x94
 8007358:	e7b4      	b.n	80072c4 <_svfprintf_r+0x1084>
 800735a:	aa22      	add	r2, sp, #136	; 0x88
 800735c:	4649      	mov	r1, r9
 800735e:	4650      	mov	r0, sl
 8007360:	f001 fed5 	bl	800910e <__ssprint_r>
 8007364:	2800      	cmp	r0, #0
 8007366:	f040 80e5 	bne.w	8007534 <_svfprintf_r+0x12f4>
 800736a:	ac25      	add	r4, sp, #148	; 0x94
 800736c:	e7c0      	b.n	80072f0 <_svfprintf_r+0x10b0>
 800736e:	2010      	movs	r0, #16
 8007370:	4403      	add	r3, r0
 8007372:	2a07      	cmp	r2, #7
 8007374:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8007378:	6060      	str	r0, [r4, #4]
 800737a:	dd08      	ble.n	800738e <_svfprintf_r+0x114e>
 800737c:	aa22      	add	r2, sp, #136	; 0x88
 800737e:	4649      	mov	r1, r9
 8007380:	4650      	mov	r0, sl
 8007382:	f001 fec4 	bl	800910e <__ssprint_r>
 8007386:	2800      	cmp	r0, #0
 8007388:	f040 80d4 	bne.w	8007534 <_svfprintf_r+0x12f4>
 800738c:	a925      	add	r1, sp, #148	; 0x94
 800738e:	3f10      	subs	r7, #16
 8007390:	460c      	mov	r4, r1
 8007392:	e7b5      	b.n	8007300 <_svfprintf_r+0x10c0>
 8007394:	460c      	mov	r4, r1
 8007396:	e7cb      	b.n	8007330 <_svfprintf_r+0x10f0>
 8007398:	aa22      	add	r2, sp, #136	; 0x88
 800739a:	4649      	mov	r1, r9
 800739c:	4650      	mov	r0, sl
 800739e:	f001 feb6 	bl	800910e <__ssprint_r>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	f040 80c6 	bne.w	8007534 <_svfprintf_r+0x12f4>
 80073a8:	ac25      	add	r4, sp, #148	; 0x94
 80073aa:	e719      	b.n	80071e0 <_svfprintf_r+0xfa0>
 80073ac:	aa22      	add	r2, sp, #136	; 0x88
 80073ae:	4649      	mov	r1, r9
 80073b0:	4650      	mov	r0, sl
 80073b2:	f001 feac 	bl	800910e <__ssprint_r>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	f040 80bc 	bne.w	8007534 <_svfprintf_r+0x12f4>
 80073bc:	ac25      	add	r4, sp, #148	; 0x94
 80073be:	e726      	b.n	800720e <_svfprintf_r+0xfce>
 80073c0:	0800acbc 	.word	0x0800acbc
 80073c4:	9a05      	ldr	r2, [sp, #20]
 80073c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073c8:	2a01      	cmp	r2, #1
 80073ca:	f106 0601 	add.w	r6, r6, #1
 80073ce:	f103 0301 	add.w	r3, r3, #1
 80073d2:	f104 0508 	add.w	r5, r4, #8
 80073d6:	dc02      	bgt.n	80073de <_svfprintf_r+0x119e>
 80073d8:	f018 0f01 	tst.w	r8, #1
 80073dc:	d07e      	beq.n	80074dc <_svfprintf_r+0x129c>
 80073de:	2201      	movs	r2, #1
 80073e0:	2b07      	cmp	r3, #7
 80073e2:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80073e6:	f8c4 b000 	str.w	fp, [r4]
 80073ea:	6062      	str	r2, [r4, #4]
 80073ec:	dd08      	ble.n	8007400 <_svfprintf_r+0x11c0>
 80073ee:	aa22      	add	r2, sp, #136	; 0x88
 80073f0:	4649      	mov	r1, r9
 80073f2:	4650      	mov	r0, sl
 80073f4:	f001 fe8b 	bl	800910e <__ssprint_r>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	f040 809b 	bne.w	8007534 <_svfprintf_r+0x12f4>
 80073fe:	ad25      	add	r5, sp, #148	; 0x94
 8007400:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007402:	602b      	str	r3, [r5, #0]
 8007404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007406:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007408:	606b      	str	r3, [r5, #4]
 800740a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800740c:	4413      	add	r3, r2
 800740e:	9324      	str	r3, [sp, #144]	; 0x90
 8007410:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007412:	3301      	adds	r3, #1
 8007414:	2b07      	cmp	r3, #7
 8007416:	9323      	str	r3, [sp, #140]	; 0x8c
 8007418:	dc32      	bgt.n	8007480 <_svfprintf_r+0x1240>
 800741a:	3508      	adds	r5, #8
 800741c:	9b05      	ldr	r3, [sp, #20]
 800741e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007422:	1e5c      	subs	r4, r3, #1
 8007424:	2200      	movs	r2, #0
 8007426:	2300      	movs	r3, #0
 8007428:	f7f9 fb4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800742c:	2800      	cmp	r0, #0
 800742e:	d130      	bne.n	8007492 <_svfprintf_r+0x1252>
 8007430:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8007432:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007434:	9a05      	ldr	r2, [sp, #20]
 8007436:	3101      	adds	r1, #1
 8007438:	3b01      	subs	r3, #1
 800743a:	f10b 0001 	add.w	r0, fp, #1
 800743e:	4413      	add	r3, r2
 8007440:	2907      	cmp	r1, #7
 8007442:	e9c5 0400 	strd	r0, r4, [r5]
 8007446:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 800744a:	dd50      	ble.n	80074ee <_svfprintf_r+0x12ae>
 800744c:	aa22      	add	r2, sp, #136	; 0x88
 800744e:	4649      	mov	r1, r9
 8007450:	4650      	mov	r0, sl
 8007452:	f001 fe5c 	bl	800910e <__ssprint_r>
 8007456:	2800      	cmp	r0, #0
 8007458:	d16c      	bne.n	8007534 <_svfprintf_r+0x12f4>
 800745a:	ad25      	add	r5, sp, #148	; 0x94
 800745c:	ab1e      	add	r3, sp, #120	; 0x78
 800745e:	602b      	str	r3, [r5, #0]
 8007460:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007462:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007464:	606b      	str	r3, [r5, #4]
 8007466:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007468:	4413      	add	r3, r2
 800746a:	9324      	str	r3, [sp, #144]	; 0x90
 800746c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800746e:	3301      	adds	r3, #1
 8007470:	2b07      	cmp	r3, #7
 8007472:	9323      	str	r3, [sp, #140]	; 0x8c
 8007474:	f73f adb5 	bgt.w	8006fe2 <_svfprintf_r+0xda2>
 8007478:	f105 0408 	add.w	r4, r5, #8
 800747c:	f7ff bac2 	b.w	8006a04 <_svfprintf_r+0x7c4>
 8007480:	aa22      	add	r2, sp, #136	; 0x88
 8007482:	4649      	mov	r1, r9
 8007484:	4650      	mov	r0, sl
 8007486:	f001 fe42 	bl	800910e <__ssprint_r>
 800748a:	2800      	cmp	r0, #0
 800748c:	d152      	bne.n	8007534 <_svfprintf_r+0x12f4>
 800748e:	ad25      	add	r5, sp, #148	; 0x94
 8007490:	e7c4      	b.n	800741c <_svfprintf_r+0x11dc>
 8007492:	2c00      	cmp	r4, #0
 8007494:	dde2      	ble.n	800745c <_svfprintf_r+0x121c>
 8007496:	4e58      	ldr	r6, [pc, #352]	; (80075f8 <_svfprintf_r+0x13b8>)
 8007498:	2710      	movs	r7, #16
 800749a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800749e:	2c10      	cmp	r4, #16
 80074a0:	f103 0301 	add.w	r3, r3, #1
 80074a4:	f105 0108 	add.w	r1, r5, #8
 80074a8:	602e      	str	r6, [r5, #0]
 80074aa:	dc07      	bgt.n	80074bc <_svfprintf_r+0x127c>
 80074ac:	606c      	str	r4, [r5, #4]
 80074ae:	2b07      	cmp	r3, #7
 80074b0:	4414      	add	r4, r2
 80074b2:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80074b6:	dcc9      	bgt.n	800744c <_svfprintf_r+0x120c>
 80074b8:	460d      	mov	r5, r1
 80074ba:	e7cf      	b.n	800745c <_svfprintf_r+0x121c>
 80074bc:	3210      	adds	r2, #16
 80074be:	2b07      	cmp	r3, #7
 80074c0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80074c4:	606f      	str	r7, [r5, #4]
 80074c6:	dd06      	ble.n	80074d6 <_svfprintf_r+0x1296>
 80074c8:	aa22      	add	r2, sp, #136	; 0x88
 80074ca:	4649      	mov	r1, r9
 80074cc:	4650      	mov	r0, sl
 80074ce:	f001 fe1e 	bl	800910e <__ssprint_r>
 80074d2:	bb78      	cbnz	r0, 8007534 <_svfprintf_r+0x12f4>
 80074d4:	a925      	add	r1, sp, #148	; 0x94
 80074d6:	3c10      	subs	r4, #16
 80074d8:	460d      	mov	r5, r1
 80074da:	e7de      	b.n	800749a <_svfprintf_r+0x125a>
 80074dc:	2201      	movs	r2, #1
 80074de:	2b07      	cmp	r3, #7
 80074e0:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80074e4:	f8c4 b000 	str.w	fp, [r4]
 80074e8:	6062      	str	r2, [r4, #4]
 80074ea:	ddb7      	ble.n	800745c <_svfprintf_r+0x121c>
 80074ec:	e7ae      	b.n	800744c <_svfprintf_r+0x120c>
 80074ee:	3508      	adds	r5, #8
 80074f0:	e7b4      	b.n	800745c <_svfprintf_r+0x121c>
 80074f2:	460c      	mov	r4, r1
 80074f4:	f7ff ba86 	b.w	8006a04 <_svfprintf_r+0x7c4>
 80074f8:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80074fc:	1a9d      	subs	r5, r3, r2
 80074fe:	2d00      	cmp	r5, #0
 8007500:	f77f aa84 	ble.w	8006a0c <_svfprintf_r+0x7cc>
 8007504:	4e3d      	ldr	r6, [pc, #244]	; (80075fc <_svfprintf_r+0x13bc>)
 8007506:	2710      	movs	r7, #16
 8007508:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800750c:	2d10      	cmp	r5, #16
 800750e:	f103 0301 	add.w	r3, r3, #1
 8007512:	6026      	str	r6, [r4, #0]
 8007514:	dc18      	bgt.n	8007548 <_svfprintf_r+0x1308>
 8007516:	6065      	str	r5, [r4, #4]
 8007518:	2b07      	cmp	r3, #7
 800751a:	4415      	add	r5, r2
 800751c:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8007520:	f77f aa74 	ble.w	8006a0c <_svfprintf_r+0x7cc>
 8007524:	aa22      	add	r2, sp, #136	; 0x88
 8007526:	4649      	mov	r1, r9
 8007528:	4650      	mov	r0, sl
 800752a:	f001 fdf0 	bl	800910e <__ssprint_r>
 800752e:	2800      	cmp	r0, #0
 8007530:	f43f aa6c 	beq.w	8006a0c <_svfprintf_r+0x7cc>
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	f43f a88a 	beq.w	8006650 <_svfprintf_r+0x410>
 800753c:	4619      	mov	r1, r3
 800753e:	4650      	mov	r0, sl
 8007540:	f000 ff36 	bl	80083b0 <_free_r>
 8007544:	f7ff b884 	b.w	8006650 <_svfprintf_r+0x410>
 8007548:	3210      	adds	r2, #16
 800754a:	2b07      	cmp	r3, #7
 800754c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8007550:	6067      	str	r7, [r4, #4]
 8007552:	dc02      	bgt.n	800755a <_svfprintf_r+0x131a>
 8007554:	3408      	adds	r4, #8
 8007556:	3d10      	subs	r5, #16
 8007558:	e7d6      	b.n	8007508 <_svfprintf_r+0x12c8>
 800755a:	aa22      	add	r2, sp, #136	; 0x88
 800755c:	4649      	mov	r1, r9
 800755e:	4650      	mov	r0, sl
 8007560:	f001 fdd5 	bl	800910e <__ssprint_r>
 8007564:	2800      	cmp	r0, #0
 8007566:	d1e5      	bne.n	8007534 <_svfprintf_r+0x12f4>
 8007568:	ac25      	add	r4, sp, #148	; 0x94
 800756a:	e7f4      	b.n	8007556 <_svfprintf_r+0x1316>
 800756c:	9903      	ldr	r1, [sp, #12]
 800756e:	4650      	mov	r0, sl
 8007570:	f000 ff1e 	bl	80083b0 <_free_r>
 8007574:	f7ff ba62 	b.w	8006a3c <_svfprintf_r+0x7fc>
 8007578:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800757a:	2b00      	cmp	r3, #0
 800757c:	f43f a868 	beq.w	8006650 <_svfprintf_r+0x410>
 8007580:	aa22      	add	r2, sp, #136	; 0x88
 8007582:	4649      	mov	r1, r9
 8007584:	4650      	mov	r0, sl
 8007586:	f001 fdc2 	bl	800910e <__ssprint_r>
 800758a:	f7ff b861 	b.w	8006650 <_svfprintf_r+0x410>
 800758e:	ea56 0207 	orrs.w	r2, r6, r7
 8007592:	f8cd 800c 	str.w	r8, [sp, #12]
 8007596:	f43f ab78 	beq.w	8006c8a <_svfprintf_r+0xa4a>
 800759a:	2b01      	cmp	r3, #1
 800759c:	f43f ac0d 	beq.w	8006dba <_svfprintf_r+0xb7a>
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80075a6:	f43f ac55 	beq.w	8006e54 <_svfprintf_r+0xc14>
 80075aa:	08f2      	lsrs	r2, r6, #3
 80075ac:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80075b0:	08f8      	lsrs	r0, r7, #3
 80075b2:	f006 0307 	and.w	r3, r6, #7
 80075b6:	4607      	mov	r7, r0
 80075b8:	4616      	mov	r6, r2
 80075ba:	3330      	adds	r3, #48	; 0x30
 80075bc:	ea56 0207 	orrs.w	r2, r6, r7
 80075c0:	4659      	mov	r1, fp
 80075c2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80075c6:	d1f0      	bne.n	80075aa <_svfprintf_r+0x136a>
 80075c8:	9a03      	ldr	r2, [sp, #12]
 80075ca:	07d2      	lsls	r2, r2, #31
 80075cc:	d506      	bpl.n	80075dc <_svfprintf_r+0x139c>
 80075ce:	2b30      	cmp	r3, #48	; 0x30
 80075d0:	d004      	beq.n	80075dc <_svfprintf_r+0x139c>
 80075d2:	2330      	movs	r3, #48	; 0x30
 80075d4:	f80b 3c01 	strb.w	r3, [fp, #-1]
 80075d8:	f1a1 0b02 	sub.w	fp, r1, #2
 80075dc:	ab4e      	add	r3, sp, #312	; 0x138
 80075de:	eba3 030b 	sub.w	r3, r3, fp
 80075e2:	9e04      	ldr	r6, [sp, #16]
 80075e4:	9304      	str	r3, [sp, #16]
 80075e6:	2300      	movs	r3, #0
 80075e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80075ec:	9303      	str	r3, [sp, #12]
 80075ee:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80075f2:	461d      	mov	r5, r3
 80075f4:	f7ff b94c 	b.w	8006890 <_svfprintf_r+0x650>
 80075f8:	0800acbc 	.word	0x0800acbc
 80075fc:	0800acac 	.word	0x0800acac

08007600 <register_fini>:
 8007600:	4b02      	ldr	r3, [pc, #8]	; (800760c <register_fini+0xc>)
 8007602:	b113      	cbz	r3, 800760a <register_fini+0xa>
 8007604:	4802      	ldr	r0, [pc, #8]	; (8007610 <register_fini+0x10>)
 8007606:	f000 b805 	b.w	8007614 <atexit>
 800760a:	4770      	bx	lr
 800760c:	00000000 	.word	0x00000000
 8007610:	080082e1 	.word	0x080082e1

08007614 <atexit>:
 8007614:	2300      	movs	r3, #0
 8007616:	4601      	mov	r1, r0
 8007618:	461a      	mov	r2, r3
 800761a:	4618      	mov	r0, r3
 800761c:	f001 be00 	b.w	8009220 <__register_exitproc>

08007620 <quorem>:
 8007620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007624:	6903      	ldr	r3, [r0, #16]
 8007626:	690c      	ldr	r4, [r1, #16]
 8007628:	42a3      	cmp	r3, r4
 800762a:	4607      	mov	r7, r0
 800762c:	f2c0 8081 	blt.w	8007732 <quorem+0x112>
 8007630:	3c01      	subs	r4, #1
 8007632:	f101 0814 	add.w	r8, r1, #20
 8007636:	f100 0514 	add.w	r5, r0, #20
 800763a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800763e:	9301      	str	r3, [sp, #4]
 8007640:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007644:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007648:	3301      	adds	r3, #1
 800764a:	429a      	cmp	r2, r3
 800764c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007650:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007654:	fbb2 f6f3 	udiv	r6, r2, r3
 8007658:	d331      	bcc.n	80076be <quorem+0x9e>
 800765a:	f04f 0e00 	mov.w	lr, #0
 800765e:	4640      	mov	r0, r8
 8007660:	46ac      	mov	ip, r5
 8007662:	46f2      	mov	sl, lr
 8007664:	f850 2b04 	ldr.w	r2, [r0], #4
 8007668:	b293      	uxth	r3, r2
 800766a:	fb06 e303 	mla	r3, r6, r3, lr
 800766e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007672:	b29b      	uxth	r3, r3
 8007674:	ebaa 0303 	sub.w	r3, sl, r3
 8007678:	0c12      	lsrs	r2, r2, #16
 800767a:	f8dc a000 	ldr.w	sl, [ip]
 800767e:	fb06 e202 	mla	r2, r6, r2, lr
 8007682:	fa13 f38a 	uxtah	r3, r3, sl
 8007686:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800768a:	fa1f fa82 	uxth.w	sl, r2
 800768e:	f8dc 2000 	ldr.w	r2, [ip]
 8007692:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007696:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800769a:	b29b      	uxth	r3, r3
 800769c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076a0:	4581      	cmp	r9, r0
 80076a2:	f84c 3b04 	str.w	r3, [ip], #4
 80076a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076aa:	d2db      	bcs.n	8007664 <quorem+0x44>
 80076ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80076b0:	b92b      	cbnz	r3, 80076be <quorem+0x9e>
 80076b2:	9b01      	ldr	r3, [sp, #4]
 80076b4:	3b04      	subs	r3, #4
 80076b6:	429d      	cmp	r5, r3
 80076b8:	461a      	mov	r2, r3
 80076ba:	d32e      	bcc.n	800771a <quorem+0xfa>
 80076bc:	613c      	str	r4, [r7, #16]
 80076be:	4638      	mov	r0, r7
 80076c0:	f001 fbca 	bl	8008e58 <__mcmp>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	db24      	blt.n	8007712 <quorem+0xf2>
 80076c8:	3601      	adds	r6, #1
 80076ca:	4628      	mov	r0, r5
 80076cc:	f04f 0c00 	mov.w	ip, #0
 80076d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80076d4:	f8d0 e000 	ldr.w	lr, [r0]
 80076d8:	b293      	uxth	r3, r2
 80076da:	ebac 0303 	sub.w	r3, ip, r3
 80076de:	0c12      	lsrs	r2, r2, #16
 80076e0:	fa13 f38e 	uxtah	r3, r3, lr
 80076e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076f2:	45c1      	cmp	r9, r8
 80076f4:	f840 3b04 	str.w	r3, [r0], #4
 80076f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80076fc:	d2e8      	bcs.n	80076d0 <quorem+0xb0>
 80076fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007702:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007706:	b922      	cbnz	r2, 8007712 <quorem+0xf2>
 8007708:	3b04      	subs	r3, #4
 800770a:	429d      	cmp	r5, r3
 800770c:	461a      	mov	r2, r3
 800770e:	d30a      	bcc.n	8007726 <quorem+0x106>
 8007710:	613c      	str	r4, [r7, #16]
 8007712:	4630      	mov	r0, r6
 8007714:	b003      	add	sp, #12
 8007716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771a:	6812      	ldr	r2, [r2, #0]
 800771c:	3b04      	subs	r3, #4
 800771e:	2a00      	cmp	r2, #0
 8007720:	d1cc      	bne.n	80076bc <quorem+0x9c>
 8007722:	3c01      	subs	r4, #1
 8007724:	e7c7      	b.n	80076b6 <quorem+0x96>
 8007726:	6812      	ldr	r2, [r2, #0]
 8007728:	3b04      	subs	r3, #4
 800772a:	2a00      	cmp	r2, #0
 800772c:	d1f0      	bne.n	8007710 <quorem+0xf0>
 800772e:	3c01      	subs	r4, #1
 8007730:	e7eb      	b.n	800770a <quorem+0xea>
 8007732:	2000      	movs	r0, #0
 8007734:	e7ee      	b.n	8007714 <quorem+0xf4>
	...

08007738 <_dtoa_r>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	ed2d 8b02 	vpush	{d8}
 8007740:	b095      	sub	sp, #84	; 0x54
 8007742:	ec57 6b10 	vmov	r6, r7, d0
 8007746:	9105      	str	r1, [sp, #20]
 8007748:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800774a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800774c:	9209      	str	r2, [sp, #36]	; 0x24
 800774e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007752:	4604      	mov	r4, r0
 8007754:	930f      	str	r3, [sp, #60]	; 0x3c
 8007756:	b141      	cbz	r1, 800776a <_dtoa_r+0x32>
 8007758:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800775a:	604a      	str	r2, [r1, #4]
 800775c:	2301      	movs	r3, #1
 800775e:	4093      	lsls	r3, r2
 8007760:	608b      	str	r3, [r1, #8]
 8007762:	f001 f96e 	bl	8008a42 <_Bfree>
 8007766:	2300      	movs	r3, #0
 8007768:	6423      	str	r3, [r4, #64]	; 0x40
 800776a:	1e3b      	subs	r3, r7, #0
 800776c:	bfb9      	ittee	lt
 800776e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007772:	9303      	strlt	r3, [sp, #12]
 8007774:	2300      	movge	r3, #0
 8007776:	602b      	strge	r3, [r5, #0]
 8007778:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800777c:	4ba2      	ldr	r3, [pc, #648]	; (8007a08 <_dtoa_r+0x2d0>)
 800777e:	bfbc      	itt	lt
 8007780:	2201      	movlt	r2, #1
 8007782:	602a      	strlt	r2, [r5, #0]
 8007784:	ea33 0309 	bics.w	r3, r3, r9
 8007788:	d11b      	bne.n	80077c2 <_dtoa_r+0x8a>
 800778a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800778c:	f242 730f 	movw	r3, #9999	; 0x270f
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007796:	4333      	orrs	r3, r6
 8007798:	f000 8578 	beq.w	800828c <_dtoa_r+0xb54>
 800779c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800779e:	b90b      	cbnz	r3, 80077a4 <_dtoa_r+0x6c>
 80077a0:	4b9a      	ldr	r3, [pc, #616]	; (8007a0c <_dtoa_r+0x2d4>)
 80077a2:	e024      	b.n	80077ee <_dtoa_r+0xb6>
 80077a4:	4b99      	ldr	r3, [pc, #612]	; (8007a0c <_dtoa_r+0x2d4>)
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	3303      	adds	r3, #3
 80077aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	9800      	ldr	r0, [sp, #0]
 80077b0:	b015      	add	sp, #84	; 0x54
 80077b2:	ecbd 8b02 	vpop	{d8}
 80077b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ba:	4b95      	ldr	r3, [pc, #596]	; (8007a10 <_dtoa_r+0x2d8>)
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	3308      	adds	r3, #8
 80077c0:	e7f3      	b.n	80077aa <_dtoa_r+0x72>
 80077c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077c6:	2200      	movs	r2, #0
 80077c8:	ec51 0b17 	vmov	r0, r1, d7
 80077cc:	2300      	movs	r3, #0
 80077ce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80077d2:	f7f9 f979 	bl	8000ac8 <__aeabi_dcmpeq>
 80077d6:	4680      	mov	r8, r0
 80077d8:	b158      	cbz	r0, 80077f2 <_dtoa_r+0xba>
 80077da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077dc:	2301      	movs	r3, #1
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 854f 	beq.w	8008286 <_dtoa_r+0xb4e>
 80077e8:	488a      	ldr	r0, [pc, #552]	; (8007a14 <_dtoa_r+0x2dc>)
 80077ea:	6018      	str	r0, [r3, #0]
 80077ec:	1e43      	subs	r3, r0, #1
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	e7dd      	b.n	80077ae <_dtoa_r+0x76>
 80077f2:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80077f6:	aa12      	add	r2, sp, #72	; 0x48
 80077f8:	a913      	add	r1, sp, #76	; 0x4c
 80077fa:	4620      	mov	r0, r4
 80077fc:	f001 fbd0 	bl	8008fa0 <__d2b>
 8007800:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007804:	4683      	mov	fp, r0
 8007806:	2d00      	cmp	r5, #0
 8007808:	d07c      	beq.n	8007904 <_dtoa_r+0x1cc>
 800780a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800780c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007814:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007818:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800781c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007820:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007824:	4b7c      	ldr	r3, [pc, #496]	; (8007a18 <_dtoa_r+0x2e0>)
 8007826:	2200      	movs	r2, #0
 8007828:	4630      	mov	r0, r6
 800782a:	4639      	mov	r1, r7
 800782c:	f7f8 fd2c 	bl	8000288 <__aeabi_dsub>
 8007830:	a36f      	add	r3, pc, #444	; (adr r3, 80079f0 <_dtoa_r+0x2b8>)
 8007832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007836:	f7f8 fedf 	bl	80005f8 <__aeabi_dmul>
 800783a:	a36f      	add	r3, pc, #444	; (adr r3, 80079f8 <_dtoa_r+0x2c0>)
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f7f8 fd24 	bl	800028c <__adddf3>
 8007844:	4606      	mov	r6, r0
 8007846:	4628      	mov	r0, r5
 8007848:	460f      	mov	r7, r1
 800784a:	f7f8 fe6b 	bl	8000524 <__aeabi_i2d>
 800784e:	a36c      	add	r3, pc, #432	; (adr r3, 8007a00 <_dtoa_r+0x2c8>)
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	f7f8 fed0 	bl	80005f8 <__aeabi_dmul>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4630      	mov	r0, r6
 800785e:	4639      	mov	r1, r7
 8007860:	f7f8 fd14 	bl	800028c <__adddf3>
 8007864:	4606      	mov	r6, r0
 8007866:	460f      	mov	r7, r1
 8007868:	f7f9 f976 	bl	8000b58 <__aeabi_d2iz>
 800786c:	2200      	movs	r2, #0
 800786e:	4682      	mov	sl, r0
 8007870:	2300      	movs	r3, #0
 8007872:	4630      	mov	r0, r6
 8007874:	4639      	mov	r1, r7
 8007876:	f7f9 f931 	bl	8000adc <__aeabi_dcmplt>
 800787a:	b148      	cbz	r0, 8007890 <_dtoa_r+0x158>
 800787c:	4650      	mov	r0, sl
 800787e:	f7f8 fe51 	bl	8000524 <__aeabi_i2d>
 8007882:	4632      	mov	r2, r6
 8007884:	463b      	mov	r3, r7
 8007886:	f7f9 f91f 	bl	8000ac8 <__aeabi_dcmpeq>
 800788a:	b908      	cbnz	r0, 8007890 <_dtoa_r+0x158>
 800788c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007890:	f1ba 0f16 	cmp.w	sl, #22
 8007894:	d854      	bhi.n	8007940 <_dtoa_r+0x208>
 8007896:	4b61      	ldr	r3, [pc, #388]	; (8007a1c <_dtoa_r+0x2e4>)
 8007898:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078a4:	f7f9 f91a 	bl	8000adc <__aeabi_dcmplt>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d04b      	beq.n	8007944 <_dtoa_r+0x20c>
 80078ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078b0:	2300      	movs	r3, #0
 80078b2:	930e      	str	r3, [sp, #56]	; 0x38
 80078b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078b6:	1b5d      	subs	r5, r3, r5
 80078b8:	1e6b      	subs	r3, r5, #1
 80078ba:	9304      	str	r3, [sp, #16]
 80078bc:	bf43      	ittte	mi
 80078be:	2300      	movmi	r3, #0
 80078c0:	f1c5 0801 	rsbmi	r8, r5, #1
 80078c4:	9304      	strmi	r3, [sp, #16]
 80078c6:	f04f 0800 	movpl.w	r8, #0
 80078ca:	f1ba 0f00 	cmp.w	sl, #0
 80078ce:	db3b      	blt.n	8007948 <_dtoa_r+0x210>
 80078d0:	9b04      	ldr	r3, [sp, #16]
 80078d2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80078d6:	4453      	add	r3, sl
 80078d8:	9304      	str	r3, [sp, #16]
 80078da:	2300      	movs	r3, #0
 80078dc:	9306      	str	r3, [sp, #24]
 80078de:	9b05      	ldr	r3, [sp, #20]
 80078e0:	2b09      	cmp	r3, #9
 80078e2:	d86a      	bhi.n	80079ba <_dtoa_r+0x282>
 80078e4:	2b05      	cmp	r3, #5
 80078e6:	bfc4      	itt	gt
 80078e8:	3b04      	subgt	r3, #4
 80078ea:	9305      	strgt	r3, [sp, #20]
 80078ec:	9b05      	ldr	r3, [sp, #20]
 80078ee:	f1a3 0302 	sub.w	r3, r3, #2
 80078f2:	bfcc      	ite	gt
 80078f4:	2500      	movgt	r5, #0
 80078f6:	2501      	movle	r5, #1
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d86a      	bhi.n	80079d2 <_dtoa_r+0x29a>
 80078fc:	e8df f003 	tbb	[pc, r3]
 8007900:	5b4d4f2c 	.word	0x5b4d4f2c
 8007904:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007908:	441d      	add	r5, r3
 800790a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800790e:	2b20      	cmp	r3, #32
 8007910:	bfc1      	itttt	gt
 8007912:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007916:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800791a:	fa09 f303 	lslgt.w	r3, r9, r3
 800791e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007922:	bfda      	itte	le
 8007924:	f1c3 0320 	rsble	r3, r3, #32
 8007928:	fa06 f003 	lslle.w	r0, r6, r3
 800792c:	4318      	orrgt	r0, r3
 800792e:	f7f8 fde9 	bl	8000504 <__aeabi_ui2d>
 8007932:	2301      	movs	r3, #1
 8007934:	4606      	mov	r6, r0
 8007936:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800793a:	3d01      	subs	r5, #1
 800793c:	9310      	str	r3, [sp, #64]	; 0x40
 800793e:	e771      	b.n	8007824 <_dtoa_r+0xec>
 8007940:	2301      	movs	r3, #1
 8007942:	e7b6      	b.n	80078b2 <_dtoa_r+0x17a>
 8007944:	900e      	str	r0, [sp, #56]	; 0x38
 8007946:	e7b5      	b.n	80078b4 <_dtoa_r+0x17c>
 8007948:	f1ca 0300 	rsb	r3, sl, #0
 800794c:	9306      	str	r3, [sp, #24]
 800794e:	2300      	movs	r3, #0
 8007950:	eba8 080a 	sub.w	r8, r8, sl
 8007954:	930d      	str	r3, [sp, #52]	; 0x34
 8007956:	e7c2      	b.n	80078de <_dtoa_r+0x1a6>
 8007958:	2300      	movs	r3, #0
 800795a:	9308      	str	r3, [sp, #32]
 800795c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800795e:	2b00      	cmp	r3, #0
 8007960:	dc3a      	bgt.n	80079d8 <_dtoa_r+0x2a0>
 8007962:	f04f 0901 	mov.w	r9, #1
 8007966:	f8cd 9004 	str.w	r9, [sp, #4]
 800796a:	464b      	mov	r3, r9
 800796c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007970:	2200      	movs	r2, #0
 8007972:	6462      	str	r2, [r4, #68]	; 0x44
 8007974:	2204      	movs	r2, #4
 8007976:	f102 0014 	add.w	r0, r2, #20
 800797a:	4298      	cmp	r0, r3
 800797c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800797e:	d931      	bls.n	80079e4 <_dtoa_r+0x2ac>
 8007980:	4620      	mov	r0, r4
 8007982:	f001 f839 	bl	80089f8 <_Balloc>
 8007986:	9000      	str	r0, [sp, #0]
 8007988:	2800      	cmp	r0, #0
 800798a:	d14d      	bne.n	8007a28 <_dtoa_r+0x2f0>
 800798c:	4b24      	ldr	r3, [pc, #144]	; (8007a20 <_dtoa_r+0x2e8>)
 800798e:	4602      	mov	r2, r0
 8007990:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007994:	4823      	ldr	r0, [pc, #140]	; (8007a24 <_dtoa_r+0x2ec>)
 8007996:	f001 fc83 	bl	80092a0 <__assert_func>
 800799a:	2301      	movs	r3, #1
 800799c:	e7dd      	b.n	800795a <_dtoa_r+0x222>
 800799e:	2300      	movs	r3, #0
 80079a0:	9308      	str	r3, [sp, #32]
 80079a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a4:	eb0a 0903 	add.w	r9, sl, r3
 80079a8:	f109 0301 	add.w	r3, r9, #1
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	9301      	str	r3, [sp, #4]
 80079b0:	bfb8      	it	lt
 80079b2:	2301      	movlt	r3, #1
 80079b4:	e7dc      	b.n	8007970 <_dtoa_r+0x238>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e7f2      	b.n	80079a0 <_dtoa_r+0x268>
 80079ba:	2501      	movs	r5, #1
 80079bc:	2300      	movs	r3, #0
 80079be:	9305      	str	r3, [sp, #20]
 80079c0:	9508      	str	r5, [sp, #32]
 80079c2:	f04f 39ff 	mov.w	r9, #4294967295
 80079c6:	2200      	movs	r2, #0
 80079c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80079cc:	2312      	movs	r3, #18
 80079ce:	9209      	str	r2, [sp, #36]	; 0x24
 80079d0:	e7ce      	b.n	8007970 <_dtoa_r+0x238>
 80079d2:	2301      	movs	r3, #1
 80079d4:	9308      	str	r3, [sp, #32]
 80079d6:	e7f4      	b.n	80079c2 <_dtoa_r+0x28a>
 80079d8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80079dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80079e0:	464b      	mov	r3, r9
 80079e2:	e7c5      	b.n	8007970 <_dtoa_r+0x238>
 80079e4:	3101      	adds	r1, #1
 80079e6:	6461      	str	r1, [r4, #68]	; 0x44
 80079e8:	0052      	lsls	r2, r2, #1
 80079ea:	e7c4      	b.n	8007976 <_dtoa_r+0x23e>
 80079ec:	f3af 8000 	nop.w
 80079f0:	636f4361 	.word	0x636f4361
 80079f4:	3fd287a7 	.word	0x3fd287a7
 80079f8:	8b60c8b3 	.word	0x8b60c8b3
 80079fc:	3fc68a28 	.word	0x3fc68a28
 8007a00:	509f79fb 	.word	0x509f79fb
 8007a04:	3fd34413 	.word	0x3fd34413
 8007a08:	7ff00000 	.word	0x7ff00000
 8007a0c:	0800accc 	.word	0x0800accc
 8007a10:	0800acd0 	.word	0x0800acd0
 8007a14:	0800acab 	.word	0x0800acab
 8007a18:	3ff80000 	.word	0x3ff80000
 8007a1c:	0800add8 	.word	0x0800add8
 8007a20:	0800acd9 	.word	0x0800acd9
 8007a24:	0800acea 	.word	0x0800acea
 8007a28:	9b00      	ldr	r3, [sp, #0]
 8007a2a:	6423      	str	r3, [r4, #64]	; 0x40
 8007a2c:	9b01      	ldr	r3, [sp, #4]
 8007a2e:	2b0e      	cmp	r3, #14
 8007a30:	f200 80ad 	bhi.w	8007b8e <_dtoa_r+0x456>
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	f000 80aa 	beq.w	8007b8e <_dtoa_r+0x456>
 8007a3a:	f1ba 0f00 	cmp.w	sl, #0
 8007a3e:	dd36      	ble.n	8007aae <_dtoa_r+0x376>
 8007a40:	4ac2      	ldr	r2, [pc, #776]	; (8007d4c <_dtoa_r+0x614>)
 8007a42:	f00a 030f 	and.w	r3, sl, #15
 8007a46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a4a:	ed93 7b00 	vldr	d7, [r3]
 8007a4e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007a52:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007a56:	eeb0 8a47 	vmov.f32	s16, s14
 8007a5a:	eef0 8a67 	vmov.f32	s17, s15
 8007a5e:	d016      	beq.n	8007a8e <_dtoa_r+0x356>
 8007a60:	4bbb      	ldr	r3, [pc, #748]	; (8007d50 <_dtoa_r+0x618>)
 8007a62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007a66:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a6a:	f7f8 feef 	bl	800084c <__aeabi_ddiv>
 8007a6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a72:	f007 070f 	and.w	r7, r7, #15
 8007a76:	2503      	movs	r5, #3
 8007a78:	4eb5      	ldr	r6, [pc, #724]	; (8007d50 <_dtoa_r+0x618>)
 8007a7a:	b957      	cbnz	r7, 8007a92 <_dtoa_r+0x35a>
 8007a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a80:	ec53 2b18 	vmov	r2, r3, d8
 8007a84:	f7f8 fee2 	bl	800084c <__aeabi_ddiv>
 8007a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a8c:	e029      	b.n	8007ae2 <_dtoa_r+0x3aa>
 8007a8e:	2502      	movs	r5, #2
 8007a90:	e7f2      	b.n	8007a78 <_dtoa_r+0x340>
 8007a92:	07f9      	lsls	r1, r7, #31
 8007a94:	d508      	bpl.n	8007aa8 <_dtoa_r+0x370>
 8007a96:	ec51 0b18 	vmov	r0, r1, d8
 8007a9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a9e:	f7f8 fdab 	bl	80005f8 <__aeabi_dmul>
 8007aa2:	ec41 0b18 	vmov	d8, r0, r1
 8007aa6:	3501      	adds	r5, #1
 8007aa8:	107f      	asrs	r7, r7, #1
 8007aaa:	3608      	adds	r6, #8
 8007aac:	e7e5      	b.n	8007a7a <_dtoa_r+0x342>
 8007aae:	f000 80a6 	beq.w	8007bfe <_dtoa_r+0x4c6>
 8007ab2:	f1ca 0600 	rsb	r6, sl, #0
 8007ab6:	4ba5      	ldr	r3, [pc, #660]	; (8007d4c <_dtoa_r+0x614>)
 8007ab8:	4fa5      	ldr	r7, [pc, #660]	; (8007d50 <_dtoa_r+0x618>)
 8007aba:	f006 020f 	and.w	r2, r6, #15
 8007abe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007aca:	f7f8 fd95 	bl	80005f8 <__aeabi_dmul>
 8007ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad2:	1136      	asrs	r6, r6, #4
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	2502      	movs	r5, #2
 8007ad8:	2e00      	cmp	r6, #0
 8007ada:	f040 8085 	bne.w	8007be8 <_dtoa_r+0x4b0>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1d2      	bne.n	8007a88 <_dtoa_r+0x350>
 8007ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 808c 	beq.w	8007c02 <_dtoa_r+0x4ca>
 8007aea:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007aee:	4b99      	ldr	r3, [pc, #612]	; (8007d54 <_dtoa_r+0x61c>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	4630      	mov	r0, r6
 8007af4:	4639      	mov	r1, r7
 8007af6:	f7f8 fff1 	bl	8000adc <__aeabi_dcmplt>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	f000 8081 	beq.w	8007c02 <_dtoa_r+0x4ca>
 8007b00:	9b01      	ldr	r3, [sp, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d07d      	beq.n	8007c02 <_dtoa_r+0x4ca>
 8007b06:	f1b9 0f00 	cmp.w	r9, #0
 8007b0a:	dd3c      	ble.n	8007b86 <_dtoa_r+0x44e>
 8007b0c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b10:	9307      	str	r3, [sp, #28]
 8007b12:	2200      	movs	r2, #0
 8007b14:	4b90      	ldr	r3, [pc, #576]	; (8007d58 <_dtoa_r+0x620>)
 8007b16:	4630      	mov	r0, r6
 8007b18:	4639      	mov	r1, r7
 8007b1a:	f7f8 fd6d 	bl	80005f8 <__aeabi_dmul>
 8007b1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b22:	3501      	adds	r5, #1
 8007b24:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007b28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f7f8 fcf9 	bl	8000524 <__aeabi_i2d>
 8007b32:	4632      	mov	r2, r6
 8007b34:	463b      	mov	r3, r7
 8007b36:	f7f8 fd5f 	bl	80005f8 <__aeabi_dmul>
 8007b3a:	4b88      	ldr	r3, [pc, #544]	; (8007d5c <_dtoa_r+0x624>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f7f8 fba5 	bl	800028c <__adddf3>
 8007b42:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b4a:	9303      	str	r3, [sp, #12]
 8007b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d15c      	bne.n	8007c0c <_dtoa_r+0x4d4>
 8007b52:	4b83      	ldr	r3, [pc, #524]	; (8007d60 <_dtoa_r+0x628>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	4630      	mov	r0, r6
 8007b58:	4639      	mov	r1, r7
 8007b5a:	f7f8 fb95 	bl	8000288 <__aeabi_dsub>
 8007b5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b62:	4606      	mov	r6, r0
 8007b64:	460f      	mov	r7, r1
 8007b66:	f7f8 ffd7 	bl	8000b18 <__aeabi_dcmpgt>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	f040 8295 	bne.w	800809a <_dtoa_r+0x962>
 8007b70:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007b74:	4630      	mov	r0, r6
 8007b76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b7a:	4639      	mov	r1, r7
 8007b7c:	f7f8 ffae 	bl	8000adc <__aeabi_dcmplt>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	f040 8287 	bne.w	8008094 <_dtoa_r+0x95c>
 8007b86:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007b8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f2c0 8157 	blt.w	8007e44 <_dtoa_r+0x70c>
 8007b96:	f1ba 0f0e 	cmp.w	sl, #14
 8007b9a:	f300 8153 	bgt.w	8007e44 <_dtoa_r+0x70c>
 8007b9e:	4b6b      	ldr	r3, [pc, #428]	; (8007d4c <_dtoa_r+0x614>)
 8007ba0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007ba4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f280 80e2 	bge.w	8007d74 <_dtoa_r+0x63c>
 8007bb0:	9b01      	ldr	r3, [sp, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f300 80de 	bgt.w	8007d74 <_dtoa_r+0x63c>
 8007bb8:	f040 826c 	bne.w	8008094 <_dtoa_r+0x95c>
 8007bbc:	4b68      	ldr	r3, [pc, #416]	; (8007d60 <_dtoa_r+0x628>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	f7f8 fd18 	bl	80005f8 <__aeabi_dmul>
 8007bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bcc:	f7f8 ff9a 	bl	8000b04 <__aeabi_dcmpge>
 8007bd0:	9e01      	ldr	r6, [sp, #4]
 8007bd2:	4637      	mov	r7, r6
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	f040 8242 	bne.w	800805e <_dtoa_r+0x926>
 8007bda:	9d00      	ldr	r5, [sp, #0]
 8007bdc:	2331      	movs	r3, #49	; 0x31
 8007bde:	f805 3b01 	strb.w	r3, [r5], #1
 8007be2:	f10a 0a01 	add.w	sl, sl, #1
 8007be6:	e23e      	b.n	8008066 <_dtoa_r+0x92e>
 8007be8:	07f2      	lsls	r2, r6, #31
 8007bea:	d505      	bpl.n	8007bf8 <_dtoa_r+0x4c0>
 8007bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bf0:	f7f8 fd02 	bl	80005f8 <__aeabi_dmul>
 8007bf4:	3501      	adds	r5, #1
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	1076      	asrs	r6, r6, #1
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	e76c      	b.n	8007ad8 <_dtoa_r+0x3a0>
 8007bfe:	2502      	movs	r5, #2
 8007c00:	e76f      	b.n	8007ae2 <_dtoa_r+0x3aa>
 8007c02:	9b01      	ldr	r3, [sp, #4]
 8007c04:	f8cd a01c 	str.w	sl, [sp, #28]
 8007c08:	930c      	str	r3, [sp, #48]	; 0x30
 8007c0a:	e78d      	b.n	8007b28 <_dtoa_r+0x3f0>
 8007c0c:	9900      	ldr	r1, [sp, #0]
 8007c0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c12:	4b4e      	ldr	r3, [pc, #312]	; (8007d4c <_dtoa_r+0x614>)
 8007c14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c18:	4401      	add	r1, r0
 8007c1a:	9102      	str	r1, [sp, #8]
 8007c1c:	9908      	ldr	r1, [sp, #32]
 8007c1e:	eeb0 8a47 	vmov.f32	s16, s14
 8007c22:	eef0 8a67 	vmov.f32	s17, s15
 8007c26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c2e:	2900      	cmp	r1, #0
 8007c30:	d045      	beq.n	8007cbe <_dtoa_r+0x586>
 8007c32:	494c      	ldr	r1, [pc, #304]	; (8007d64 <_dtoa_r+0x62c>)
 8007c34:	2000      	movs	r0, #0
 8007c36:	f7f8 fe09 	bl	800084c <__aeabi_ddiv>
 8007c3a:	ec53 2b18 	vmov	r2, r3, d8
 8007c3e:	f7f8 fb23 	bl	8000288 <__aeabi_dsub>
 8007c42:	9d00      	ldr	r5, [sp, #0]
 8007c44:	ec41 0b18 	vmov	d8, r0, r1
 8007c48:	4639      	mov	r1, r7
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7f8 ff84 	bl	8000b58 <__aeabi_d2iz>
 8007c50:	900c      	str	r0, [sp, #48]	; 0x30
 8007c52:	f7f8 fc67 	bl	8000524 <__aeabi_i2d>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	4639      	mov	r1, r7
 8007c5e:	f7f8 fb13 	bl	8000288 <__aeabi_dsub>
 8007c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c64:	3330      	adds	r3, #48	; 0x30
 8007c66:	f805 3b01 	strb.w	r3, [r5], #1
 8007c6a:	ec53 2b18 	vmov	r2, r3, d8
 8007c6e:	4606      	mov	r6, r0
 8007c70:	460f      	mov	r7, r1
 8007c72:	f7f8 ff33 	bl	8000adc <__aeabi_dcmplt>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d165      	bne.n	8007d46 <_dtoa_r+0x60e>
 8007c7a:	4632      	mov	r2, r6
 8007c7c:	463b      	mov	r3, r7
 8007c7e:	4935      	ldr	r1, [pc, #212]	; (8007d54 <_dtoa_r+0x61c>)
 8007c80:	2000      	movs	r0, #0
 8007c82:	f7f8 fb01 	bl	8000288 <__aeabi_dsub>
 8007c86:	ec53 2b18 	vmov	r2, r3, d8
 8007c8a:	f7f8 ff27 	bl	8000adc <__aeabi_dcmplt>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	f040 80b8 	bne.w	8007e04 <_dtoa_r+0x6cc>
 8007c94:	9b02      	ldr	r3, [sp, #8]
 8007c96:	429d      	cmp	r5, r3
 8007c98:	f43f af75 	beq.w	8007b86 <_dtoa_r+0x44e>
 8007c9c:	4b2e      	ldr	r3, [pc, #184]	; (8007d58 <_dtoa_r+0x620>)
 8007c9e:	ec51 0b18 	vmov	r0, r1, d8
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f7f8 fca8 	bl	80005f8 <__aeabi_dmul>
 8007ca8:	4b2b      	ldr	r3, [pc, #172]	; (8007d58 <_dtoa_r+0x620>)
 8007caa:	ec41 0b18 	vmov	d8, r0, r1
 8007cae:	2200      	movs	r2, #0
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	4639      	mov	r1, r7
 8007cb4:	f7f8 fca0 	bl	80005f8 <__aeabi_dmul>
 8007cb8:	4606      	mov	r6, r0
 8007cba:	460f      	mov	r7, r1
 8007cbc:	e7c4      	b.n	8007c48 <_dtoa_r+0x510>
 8007cbe:	ec51 0b17 	vmov	r0, r1, d7
 8007cc2:	f7f8 fc99 	bl	80005f8 <__aeabi_dmul>
 8007cc6:	9b02      	ldr	r3, [sp, #8]
 8007cc8:	9d00      	ldr	r5, [sp, #0]
 8007cca:	930c      	str	r3, [sp, #48]	; 0x30
 8007ccc:	ec41 0b18 	vmov	d8, r0, r1
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	f7f8 ff40 	bl	8000b58 <__aeabi_d2iz>
 8007cd8:	9011      	str	r0, [sp, #68]	; 0x44
 8007cda:	f7f8 fc23 	bl	8000524 <__aeabi_i2d>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	4639      	mov	r1, r7
 8007ce6:	f7f8 facf 	bl	8000288 <__aeabi_dsub>
 8007cea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cec:	3330      	adds	r3, #48	; 0x30
 8007cee:	f805 3b01 	strb.w	r3, [r5], #1
 8007cf2:	9b02      	ldr	r3, [sp, #8]
 8007cf4:	429d      	cmp	r5, r3
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	460f      	mov	r7, r1
 8007cfa:	f04f 0200 	mov.w	r2, #0
 8007cfe:	d133      	bne.n	8007d68 <_dtoa_r+0x630>
 8007d00:	4b18      	ldr	r3, [pc, #96]	; (8007d64 <_dtoa_r+0x62c>)
 8007d02:	ec51 0b18 	vmov	r0, r1, d8
 8007d06:	f7f8 fac1 	bl	800028c <__adddf3>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4630      	mov	r0, r6
 8007d10:	4639      	mov	r1, r7
 8007d12:	f7f8 ff01 	bl	8000b18 <__aeabi_dcmpgt>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d174      	bne.n	8007e04 <_dtoa_r+0x6cc>
 8007d1a:	ec53 2b18 	vmov	r2, r3, d8
 8007d1e:	4911      	ldr	r1, [pc, #68]	; (8007d64 <_dtoa_r+0x62c>)
 8007d20:	2000      	movs	r0, #0
 8007d22:	f7f8 fab1 	bl	8000288 <__aeabi_dsub>
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	4639      	mov	r1, r7
 8007d2e:	f7f8 fed5 	bl	8000adc <__aeabi_dcmplt>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	f43f af27 	beq.w	8007b86 <_dtoa_r+0x44e>
 8007d38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d3a:	1e6b      	subs	r3, r5, #1
 8007d3c:	930c      	str	r3, [sp, #48]	; 0x30
 8007d3e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d42:	2b30      	cmp	r3, #48	; 0x30
 8007d44:	d0f8      	beq.n	8007d38 <_dtoa_r+0x600>
 8007d46:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007d4a:	e049      	b.n	8007de0 <_dtoa_r+0x6a8>
 8007d4c:	0800add8 	.word	0x0800add8
 8007d50:	0800adb0 	.word	0x0800adb0
 8007d54:	3ff00000 	.word	0x3ff00000
 8007d58:	40240000 	.word	0x40240000
 8007d5c:	401c0000 	.word	0x401c0000
 8007d60:	40140000 	.word	0x40140000
 8007d64:	3fe00000 	.word	0x3fe00000
 8007d68:	4baf      	ldr	r3, [pc, #700]	; (8008028 <_dtoa_r+0x8f0>)
 8007d6a:	f7f8 fc45 	bl	80005f8 <__aeabi_dmul>
 8007d6e:	4606      	mov	r6, r0
 8007d70:	460f      	mov	r7, r1
 8007d72:	e7ad      	b.n	8007cd0 <_dtoa_r+0x598>
 8007d74:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d78:	9d00      	ldr	r5, [sp, #0]
 8007d7a:	4642      	mov	r2, r8
 8007d7c:	464b      	mov	r3, r9
 8007d7e:	4630      	mov	r0, r6
 8007d80:	4639      	mov	r1, r7
 8007d82:	f7f8 fd63 	bl	800084c <__aeabi_ddiv>
 8007d86:	f7f8 fee7 	bl	8000b58 <__aeabi_d2iz>
 8007d8a:	9002      	str	r0, [sp, #8]
 8007d8c:	f7f8 fbca 	bl	8000524 <__aeabi_i2d>
 8007d90:	4642      	mov	r2, r8
 8007d92:	464b      	mov	r3, r9
 8007d94:	f7f8 fc30 	bl	80005f8 <__aeabi_dmul>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	4639      	mov	r1, r7
 8007da0:	f7f8 fa72 	bl	8000288 <__aeabi_dsub>
 8007da4:	9e02      	ldr	r6, [sp, #8]
 8007da6:	9f01      	ldr	r7, [sp, #4]
 8007da8:	3630      	adds	r6, #48	; 0x30
 8007daa:	f805 6b01 	strb.w	r6, [r5], #1
 8007dae:	9e00      	ldr	r6, [sp, #0]
 8007db0:	1bae      	subs	r6, r5, r6
 8007db2:	42b7      	cmp	r7, r6
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	d137      	bne.n	8007e2a <_dtoa_r+0x6f2>
 8007dba:	f7f8 fa67 	bl	800028c <__adddf3>
 8007dbe:	4642      	mov	r2, r8
 8007dc0:	464b      	mov	r3, r9
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	460f      	mov	r7, r1
 8007dc6:	f7f8 fea7 	bl	8000b18 <__aeabi_dcmpgt>
 8007dca:	b9c8      	cbnz	r0, 8007e00 <_dtoa_r+0x6c8>
 8007dcc:	4642      	mov	r2, r8
 8007dce:	464b      	mov	r3, r9
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	4639      	mov	r1, r7
 8007dd4:	f7f8 fe78 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dd8:	b110      	cbz	r0, 8007de0 <_dtoa_r+0x6a8>
 8007dda:	9b02      	ldr	r3, [sp, #8]
 8007ddc:	07d9      	lsls	r1, r3, #31
 8007dde:	d40f      	bmi.n	8007e00 <_dtoa_r+0x6c8>
 8007de0:	4620      	mov	r0, r4
 8007de2:	4659      	mov	r1, fp
 8007de4:	f000 fe2d 	bl	8008a42 <_Bfree>
 8007de8:	2300      	movs	r3, #0
 8007dea:	702b      	strb	r3, [r5, #0]
 8007dec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007dee:	f10a 0001 	add.w	r0, sl, #1
 8007df2:	6018      	str	r0, [r3, #0]
 8007df4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f43f acd9 	beq.w	80077ae <_dtoa_r+0x76>
 8007dfc:	601d      	str	r5, [r3, #0]
 8007dfe:	e4d6      	b.n	80077ae <_dtoa_r+0x76>
 8007e00:	f8cd a01c 	str.w	sl, [sp, #28]
 8007e04:	462b      	mov	r3, r5
 8007e06:	461d      	mov	r5, r3
 8007e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e0c:	2a39      	cmp	r2, #57	; 0x39
 8007e0e:	d108      	bne.n	8007e22 <_dtoa_r+0x6ea>
 8007e10:	9a00      	ldr	r2, [sp, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d1f7      	bne.n	8007e06 <_dtoa_r+0x6ce>
 8007e16:	9a07      	ldr	r2, [sp, #28]
 8007e18:	9900      	ldr	r1, [sp, #0]
 8007e1a:	3201      	adds	r2, #1
 8007e1c:	9207      	str	r2, [sp, #28]
 8007e1e:	2230      	movs	r2, #48	; 0x30
 8007e20:	700a      	strb	r2, [r1, #0]
 8007e22:	781a      	ldrb	r2, [r3, #0]
 8007e24:	3201      	adds	r2, #1
 8007e26:	701a      	strb	r2, [r3, #0]
 8007e28:	e78d      	b.n	8007d46 <_dtoa_r+0x60e>
 8007e2a:	4b7f      	ldr	r3, [pc, #508]	; (8008028 <_dtoa_r+0x8f0>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f7f8 fbe3 	bl	80005f8 <__aeabi_dmul>
 8007e32:	2200      	movs	r2, #0
 8007e34:	2300      	movs	r3, #0
 8007e36:	4606      	mov	r6, r0
 8007e38:	460f      	mov	r7, r1
 8007e3a:	f7f8 fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d09b      	beq.n	8007d7a <_dtoa_r+0x642>
 8007e42:	e7cd      	b.n	8007de0 <_dtoa_r+0x6a8>
 8007e44:	9a08      	ldr	r2, [sp, #32]
 8007e46:	2a00      	cmp	r2, #0
 8007e48:	f000 80c4 	beq.w	8007fd4 <_dtoa_r+0x89c>
 8007e4c:	9a05      	ldr	r2, [sp, #20]
 8007e4e:	2a01      	cmp	r2, #1
 8007e50:	f300 80a8 	bgt.w	8007fa4 <_dtoa_r+0x86c>
 8007e54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e56:	2a00      	cmp	r2, #0
 8007e58:	f000 80a0 	beq.w	8007f9c <_dtoa_r+0x864>
 8007e5c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e60:	9e06      	ldr	r6, [sp, #24]
 8007e62:	4645      	mov	r5, r8
 8007e64:	9a04      	ldr	r2, [sp, #16]
 8007e66:	2101      	movs	r1, #1
 8007e68:	441a      	add	r2, r3
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	4498      	add	r8, r3
 8007e6e:	9204      	str	r2, [sp, #16]
 8007e70:	f000 fe8a 	bl	8008b88 <__i2b>
 8007e74:	4607      	mov	r7, r0
 8007e76:	2d00      	cmp	r5, #0
 8007e78:	dd0b      	ble.n	8007e92 <_dtoa_r+0x75a>
 8007e7a:	9b04      	ldr	r3, [sp, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dd08      	ble.n	8007e92 <_dtoa_r+0x75a>
 8007e80:	42ab      	cmp	r3, r5
 8007e82:	9a04      	ldr	r2, [sp, #16]
 8007e84:	bfa8      	it	ge
 8007e86:	462b      	movge	r3, r5
 8007e88:	eba8 0803 	sub.w	r8, r8, r3
 8007e8c:	1aed      	subs	r5, r5, r3
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	9304      	str	r3, [sp, #16]
 8007e92:	9b06      	ldr	r3, [sp, #24]
 8007e94:	b1fb      	cbz	r3, 8007ed6 <_dtoa_r+0x79e>
 8007e96:	9b08      	ldr	r3, [sp, #32]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 809f 	beq.w	8007fdc <_dtoa_r+0x8a4>
 8007e9e:	2e00      	cmp	r6, #0
 8007ea0:	dd11      	ble.n	8007ec6 <_dtoa_r+0x78e>
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	4632      	mov	r2, r6
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f000 ff2a 	bl	8008d00 <__pow5mult>
 8007eac:	465a      	mov	r2, fp
 8007eae:	4601      	mov	r1, r0
 8007eb0:	4607      	mov	r7, r0
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 fe7e 	bl	8008bb4 <__multiply>
 8007eb8:	4659      	mov	r1, fp
 8007eba:	9007      	str	r0, [sp, #28]
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f000 fdc0 	bl	8008a42 <_Bfree>
 8007ec2:	9b07      	ldr	r3, [sp, #28]
 8007ec4:	469b      	mov	fp, r3
 8007ec6:	9b06      	ldr	r3, [sp, #24]
 8007ec8:	1b9a      	subs	r2, r3, r6
 8007eca:	d004      	beq.n	8007ed6 <_dtoa_r+0x79e>
 8007ecc:	4659      	mov	r1, fp
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 ff16 	bl	8008d00 <__pow5mult>
 8007ed4:	4683      	mov	fp, r0
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f000 fe55 	bl	8008b88 <__i2b>
 8007ede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	dd7c      	ble.n	8007fe0 <_dtoa_r+0x8a8>
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	4601      	mov	r1, r0
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 ff08 	bl	8008d00 <__pow5mult>
 8007ef0:	9b05      	ldr	r3, [sp, #20]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	4606      	mov	r6, r0
 8007ef6:	dd76      	ble.n	8007fe6 <_dtoa_r+0x8ae>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	9306      	str	r3, [sp, #24]
 8007efc:	6933      	ldr	r3, [r6, #16]
 8007efe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f02:	6918      	ldr	r0, [r3, #16]
 8007f04:	f000 fdf0 	bl	8008ae8 <__hi0bits>
 8007f08:	f1c0 0020 	rsb	r0, r0, #32
 8007f0c:	9b04      	ldr	r3, [sp, #16]
 8007f0e:	4418      	add	r0, r3
 8007f10:	f010 001f 	ands.w	r0, r0, #31
 8007f14:	f000 8086 	beq.w	8008024 <_dtoa_r+0x8ec>
 8007f18:	f1c0 0320 	rsb	r3, r0, #32
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	dd7f      	ble.n	8008020 <_dtoa_r+0x8e8>
 8007f20:	f1c0 001c 	rsb	r0, r0, #28
 8007f24:	9b04      	ldr	r3, [sp, #16]
 8007f26:	4403      	add	r3, r0
 8007f28:	4480      	add	r8, r0
 8007f2a:	4405      	add	r5, r0
 8007f2c:	9304      	str	r3, [sp, #16]
 8007f2e:	f1b8 0f00 	cmp.w	r8, #0
 8007f32:	dd05      	ble.n	8007f40 <_dtoa_r+0x808>
 8007f34:	4659      	mov	r1, fp
 8007f36:	4642      	mov	r2, r8
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f000 ff21 	bl	8008d80 <__lshift>
 8007f3e:	4683      	mov	fp, r0
 8007f40:	9b04      	ldr	r3, [sp, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dd05      	ble.n	8007f52 <_dtoa_r+0x81a>
 8007f46:	4631      	mov	r1, r6
 8007f48:	461a      	mov	r2, r3
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f000 ff18 	bl	8008d80 <__lshift>
 8007f50:	4606      	mov	r6, r0
 8007f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d069      	beq.n	800802c <_dtoa_r+0x8f4>
 8007f58:	4631      	mov	r1, r6
 8007f5a:	4658      	mov	r0, fp
 8007f5c:	f000 ff7c 	bl	8008e58 <__mcmp>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	da63      	bge.n	800802c <_dtoa_r+0x8f4>
 8007f64:	2300      	movs	r3, #0
 8007f66:	4659      	mov	r1, fp
 8007f68:	220a      	movs	r2, #10
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 fd72 	bl	8008a54 <__multadd>
 8007f70:	9b08      	ldr	r3, [sp, #32]
 8007f72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f76:	4683      	mov	fp, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 818e 	beq.w	800829a <_dtoa_r+0xb62>
 8007f7e:	4639      	mov	r1, r7
 8007f80:	2300      	movs	r3, #0
 8007f82:	220a      	movs	r2, #10
 8007f84:	4620      	mov	r0, r4
 8007f86:	f000 fd65 	bl	8008a54 <__multadd>
 8007f8a:	f1b9 0f00 	cmp.w	r9, #0
 8007f8e:	4607      	mov	r7, r0
 8007f90:	f300 808e 	bgt.w	80080b0 <_dtoa_r+0x978>
 8007f94:	9b05      	ldr	r3, [sp, #20]
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	dc50      	bgt.n	800803c <_dtoa_r+0x904>
 8007f9a:	e089      	b.n	80080b0 <_dtoa_r+0x978>
 8007f9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fa2:	e75d      	b.n	8007e60 <_dtoa_r+0x728>
 8007fa4:	9b01      	ldr	r3, [sp, #4]
 8007fa6:	1e5e      	subs	r6, r3, #1
 8007fa8:	9b06      	ldr	r3, [sp, #24]
 8007faa:	42b3      	cmp	r3, r6
 8007fac:	bfbf      	itttt	lt
 8007fae:	9b06      	ldrlt	r3, [sp, #24]
 8007fb0:	9606      	strlt	r6, [sp, #24]
 8007fb2:	1af2      	sublt	r2, r6, r3
 8007fb4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007fb6:	bfb6      	itet	lt
 8007fb8:	189b      	addlt	r3, r3, r2
 8007fba:	1b9e      	subge	r6, r3, r6
 8007fbc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007fbe:	9b01      	ldr	r3, [sp, #4]
 8007fc0:	bfb8      	it	lt
 8007fc2:	2600      	movlt	r6, #0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	bfb5      	itete	lt
 8007fc8:	eba8 0503 	sublt.w	r5, r8, r3
 8007fcc:	9b01      	ldrge	r3, [sp, #4]
 8007fce:	2300      	movlt	r3, #0
 8007fd0:	4645      	movge	r5, r8
 8007fd2:	e747      	b.n	8007e64 <_dtoa_r+0x72c>
 8007fd4:	9e06      	ldr	r6, [sp, #24]
 8007fd6:	9f08      	ldr	r7, [sp, #32]
 8007fd8:	4645      	mov	r5, r8
 8007fda:	e74c      	b.n	8007e76 <_dtoa_r+0x73e>
 8007fdc:	9a06      	ldr	r2, [sp, #24]
 8007fde:	e775      	b.n	8007ecc <_dtoa_r+0x794>
 8007fe0:	9b05      	ldr	r3, [sp, #20]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	dc18      	bgt.n	8008018 <_dtoa_r+0x8e0>
 8007fe6:	9b02      	ldr	r3, [sp, #8]
 8007fe8:	b9b3      	cbnz	r3, 8008018 <_dtoa_r+0x8e0>
 8007fea:	9b03      	ldr	r3, [sp, #12]
 8007fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ff0:	b9a3      	cbnz	r3, 800801c <_dtoa_r+0x8e4>
 8007ff2:	9b03      	ldr	r3, [sp, #12]
 8007ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ff8:	0d1b      	lsrs	r3, r3, #20
 8007ffa:	051b      	lsls	r3, r3, #20
 8007ffc:	b12b      	cbz	r3, 800800a <_dtoa_r+0x8d2>
 8007ffe:	9b04      	ldr	r3, [sp, #16]
 8008000:	3301      	adds	r3, #1
 8008002:	9304      	str	r3, [sp, #16]
 8008004:	f108 0801 	add.w	r8, r8, #1
 8008008:	2301      	movs	r3, #1
 800800a:	9306      	str	r3, [sp, #24]
 800800c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800800e:	2b00      	cmp	r3, #0
 8008010:	f47f af74 	bne.w	8007efc <_dtoa_r+0x7c4>
 8008014:	2001      	movs	r0, #1
 8008016:	e779      	b.n	8007f0c <_dtoa_r+0x7d4>
 8008018:	2300      	movs	r3, #0
 800801a:	e7f6      	b.n	800800a <_dtoa_r+0x8d2>
 800801c:	9b02      	ldr	r3, [sp, #8]
 800801e:	e7f4      	b.n	800800a <_dtoa_r+0x8d2>
 8008020:	d085      	beq.n	8007f2e <_dtoa_r+0x7f6>
 8008022:	4618      	mov	r0, r3
 8008024:	301c      	adds	r0, #28
 8008026:	e77d      	b.n	8007f24 <_dtoa_r+0x7ec>
 8008028:	40240000 	.word	0x40240000
 800802c:	9b01      	ldr	r3, [sp, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	dc38      	bgt.n	80080a4 <_dtoa_r+0x96c>
 8008032:	9b05      	ldr	r3, [sp, #20]
 8008034:	2b02      	cmp	r3, #2
 8008036:	dd35      	ble.n	80080a4 <_dtoa_r+0x96c>
 8008038:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800803c:	f1b9 0f00 	cmp.w	r9, #0
 8008040:	d10d      	bne.n	800805e <_dtoa_r+0x926>
 8008042:	4631      	mov	r1, r6
 8008044:	464b      	mov	r3, r9
 8008046:	2205      	movs	r2, #5
 8008048:	4620      	mov	r0, r4
 800804a:	f000 fd03 	bl	8008a54 <__multadd>
 800804e:	4601      	mov	r1, r0
 8008050:	4606      	mov	r6, r0
 8008052:	4658      	mov	r0, fp
 8008054:	f000 ff00 	bl	8008e58 <__mcmp>
 8008058:	2800      	cmp	r0, #0
 800805a:	f73f adbe 	bgt.w	8007bda <_dtoa_r+0x4a2>
 800805e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008060:	9d00      	ldr	r5, [sp, #0]
 8008062:	ea6f 0a03 	mvn.w	sl, r3
 8008066:	f04f 0800 	mov.w	r8, #0
 800806a:	4631      	mov	r1, r6
 800806c:	4620      	mov	r0, r4
 800806e:	f000 fce8 	bl	8008a42 <_Bfree>
 8008072:	2f00      	cmp	r7, #0
 8008074:	f43f aeb4 	beq.w	8007de0 <_dtoa_r+0x6a8>
 8008078:	f1b8 0f00 	cmp.w	r8, #0
 800807c:	d005      	beq.n	800808a <_dtoa_r+0x952>
 800807e:	45b8      	cmp	r8, r7
 8008080:	d003      	beq.n	800808a <_dtoa_r+0x952>
 8008082:	4641      	mov	r1, r8
 8008084:	4620      	mov	r0, r4
 8008086:	f000 fcdc 	bl	8008a42 <_Bfree>
 800808a:	4639      	mov	r1, r7
 800808c:	4620      	mov	r0, r4
 800808e:	f000 fcd8 	bl	8008a42 <_Bfree>
 8008092:	e6a5      	b.n	8007de0 <_dtoa_r+0x6a8>
 8008094:	2600      	movs	r6, #0
 8008096:	4637      	mov	r7, r6
 8008098:	e7e1      	b.n	800805e <_dtoa_r+0x926>
 800809a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800809c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80080a0:	4637      	mov	r7, r6
 80080a2:	e59a      	b.n	8007bda <_dtoa_r+0x4a2>
 80080a4:	9b08      	ldr	r3, [sp, #32]
 80080a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 80fc 	beq.w	80082a8 <_dtoa_r+0xb70>
 80080b0:	2d00      	cmp	r5, #0
 80080b2:	dd05      	ble.n	80080c0 <_dtoa_r+0x988>
 80080b4:	4639      	mov	r1, r7
 80080b6:	462a      	mov	r2, r5
 80080b8:	4620      	mov	r0, r4
 80080ba:	f000 fe61 	bl	8008d80 <__lshift>
 80080be:	4607      	mov	r7, r0
 80080c0:	9b06      	ldr	r3, [sp, #24]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d05b      	beq.n	800817e <_dtoa_r+0xa46>
 80080c6:	6879      	ldr	r1, [r7, #4]
 80080c8:	4620      	mov	r0, r4
 80080ca:	f000 fc95 	bl	80089f8 <_Balloc>
 80080ce:	4605      	mov	r5, r0
 80080d0:	b920      	cbnz	r0, 80080dc <_dtoa_r+0x9a4>
 80080d2:	4b80      	ldr	r3, [pc, #512]	; (80082d4 <_dtoa_r+0xb9c>)
 80080d4:	4602      	mov	r2, r0
 80080d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80080da:	e45b      	b.n	8007994 <_dtoa_r+0x25c>
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	3202      	adds	r2, #2
 80080e0:	0092      	lsls	r2, r2, #2
 80080e2:	f107 010c 	add.w	r1, r7, #12
 80080e6:	300c      	adds	r0, #12
 80080e8:	f000 fc6c 	bl	80089c4 <memcpy>
 80080ec:	2201      	movs	r2, #1
 80080ee:	4629      	mov	r1, r5
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 fe45 	bl	8008d80 <__lshift>
 80080f6:	9b00      	ldr	r3, [sp, #0]
 80080f8:	3301      	adds	r3, #1
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	9b00      	ldr	r3, [sp, #0]
 80080fe:	444b      	add	r3, r9
 8008100:	9307      	str	r3, [sp, #28]
 8008102:	9b02      	ldr	r3, [sp, #8]
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	46b8      	mov	r8, r7
 800810a:	9306      	str	r3, [sp, #24]
 800810c:	4607      	mov	r7, r0
 800810e:	9b01      	ldr	r3, [sp, #4]
 8008110:	4631      	mov	r1, r6
 8008112:	3b01      	subs	r3, #1
 8008114:	4658      	mov	r0, fp
 8008116:	9302      	str	r3, [sp, #8]
 8008118:	f7ff fa82 	bl	8007620 <quorem>
 800811c:	4603      	mov	r3, r0
 800811e:	3330      	adds	r3, #48	; 0x30
 8008120:	9004      	str	r0, [sp, #16]
 8008122:	4641      	mov	r1, r8
 8008124:	4658      	mov	r0, fp
 8008126:	9308      	str	r3, [sp, #32]
 8008128:	f000 fe96 	bl	8008e58 <__mcmp>
 800812c:	463a      	mov	r2, r7
 800812e:	4681      	mov	r9, r0
 8008130:	4631      	mov	r1, r6
 8008132:	4620      	mov	r0, r4
 8008134:	f000 feac 	bl	8008e90 <__mdiff>
 8008138:	68c2      	ldr	r2, [r0, #12]
 800813a:	9b08      	ldr	r3, [sp, #32]
 800813c:	4605      	mov	r5, r0
 800813e:	bb02      	cbnz	r2, 8008182 <_dtoa_r+0xa4a>
 8008140:	4601      	mov	r1, r0
 8008142:	4658      	mov	r0, fp
 8008144:	f000 fe88 	bl	8008e58 <__mcmp>
 8008148:	9b08      	ldr	r3, [sp, #32]
 800814a:	4602      	mov	r2, r0
 800814c:	4629      	mov	r1, r5
 800814e:	4620      	mov	r0, r4
 8008150:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008154:	f000 fc75 	bl	8008a42 <_Bfree>
 8008158:	9b05      	ldr	r3, [sp, #20]
 800815a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800815c:	9d01      	ldr	r5, [sp, #4]
 800815e:	ea43 0102 	orr.w	r1, r3, r2
 8008162:	9b06      	ldr	r3, [sp, #24]
 8008164:	430b      	orrs	r3, r1
 8008166:	9b08      	ldr	r3, [sp, #32]
 8008168:	d10d      	bne.n	8008186 <_dtoa_r+0xa4e>
 800816a:	2b39      	cmp	r3, #57	; 0x39
 800816c:	d029      	beq.n	80081c2 <_dtoa_r+0xa8a>
 800816e:	f1b9 0f00 	cmp.w	r9, #0
 8008172:	dd01      	ble.n	8008178 <_dtoa_r+0xa40>
 8008174:	9b04      	ldr	r3, [sp, #16]
 8008176:	3331      	adds	r3, #49	; 0x31
 8008178:	9a02      	ldr	r2, [sp, #8]
 800817a:	7013      	strb	r3, [r2, #0]
 800817c:	e775      	b.n	800806a <_dtoa_r+0x932>
 800817e:	4638      	mov	r0, r7
 8008180:	e7b9      	b.n	80080f6 <_dtoa_r+0x9be>
 8008182:	2201      	movs	r2, #1
 8008184:	e7e2      	b.n	800814c <_dtoa_r+0xa14>
 8008186:	f1b9 0f00 	cmp.w	r9, #0
 800818a:	db06      	blt.n	800819a <_dtoa_r+0xa62>
 800818c:	9905      	ldr	r1, [sp, #20]
 800818e:	ea41 0909 	orr.w	r9, r1, r9
 8008192:	9906      	ldr	r1, [sp, #24]
 8008194:	ea59 0101 	orrs.w	r1, r9, r1
 8008198:	d120      	bne.n	80081dc <_dtoa_r+0xaa4>
 800819a:	2a00      	cmp	r2, #0
 800819c:	ddec      	ble.n	8008178 <_dtoa_r+0xa40>
 800819e:	4659      	mov	r1, fp
 80081a0:	2201      	movs	r2, #1
 80081a2:	4620      	mov	r0, r4
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	f000 fdeb 	bl	8008d80 <__lshift>
 80081aa:	4631      	mov	r1, r6
 80081ac:	4683      	mov	fp, r0
 80081ae:	f000 fe53 	bl	8008e58 <__mcmp>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	9b01      	ldr	r3, [sp, #4]
 80081b6:	dc02      	bgt.n	80081be <_dtoa_r+0xa86>
 80081b8:	d1de      	bne.n	8008178 <_dtoa_r+0xa40>
 80081ba:	07da      	lsls	r2, r3, #31
 80081bc:	d5dc      	bpl.n	8008178 <_dtoa_r+0xa40>
 80081be:	2b39      	cmp	r3, #57	; 0x39
 80081c0:	d1d8      	bne.n	8008174 <_dtoa_r+0xa3c>
 80081c2:	9a02      	ldr	r2, [sp, #8]
 80081c4:	2339      	movs	r3, #57	; 0x39
 80081c6:	7013      	strb	r3, [r2, #0]
 80081c8:	462b      	mov	r3, r5
 80081ca:	461d      	mov	r5, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081d2:	2a39      	cmp	r2, #57	; 0x39
 80081d4:	d050      	beq.n	8008278 <_dtoa_r+0xb40>
 80081d6:	3201      	adds	r2, #1
 80081d8:	701a      	strb	r2, [r3, #0]
 80081da:	e746      	b.n	800806a <_dtoa_r+0x932>
 80081dc:	2a00      	cmp	r2, #0
 80081de:	dd03      	ble.n	80081e8 <_dtoa_r+0xab0>
 80081e0:	2b39      	cmp	r3, #57	; 0x39
 80081e2:	d0ee      	beq.n	80081c2 <_dtoa_r+0xa8a>
 80081e4:	3301      	adds	r3, #1
 80081e6:	e7c7      	b.n	8008178 <_dtoa_r+0xa40>
 80081e8:	9a01      	ldr	r2, [sp, #4]
 80081ea:	9907      	ldr	r1, [sp, #28]
 80081ec:	f802 3c01 	strb.w	r3, [r2, #-1]
 80081f0:	428a      	cmp	r2, r1
 80081f2:	d02a      	beq.n	800824a <_dtoa_r+0xb12>
 80081f4:	4659      	mov	r1, fp
 80081f6:	2300      	movs	r3, #0
 80081f8:	220a      	movs	r2, #10
 80081fa:	4620      	mov	r0, r4
 80081fc:	f000 fc2a 	bl	8008a54 <__multadd>
 8008200:	45b8      	cmp	r8, r7
 8008202:	4683      	mov	fp, r0
 8008204:	f04f 0300 	mov.w	r3, #0
 8008208:	f04f 020a 	mov.w	r2, #10
 800820c:	4641      	mov	r1, r8
 800820e:	4620      	mov	r0, r4
 8008210:	d107      	bne.n	8008222 <_dtoa_r+0xaea>
 8008212:	f000 fc1f 	bl	8008a54 <__multadd>
 8008216:	4680      	mov	r8, r0
 8008218:	4607      	mov	r7, r0
 800821a:	9b01      	ldr	r3, [sp, #4]
 800821c:	3301      	adds	r3, #1
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	e775      	b.n	800810e <_dtoa_r+0x9d6>
 8008222:	f000 fc17 	bl	8008a54 <__multadd>
 8008226:	4639      	mov	r1, r7
 8008228:	4680      	mov	r8, r0
 800822a:	2300      	movs	r3, #0
 800822c:	220a      	movs	r2, #10
 800822e:	4620      	mov	r0, r4
 8008230:	f000 fc10 	bl	8008a54 <__multadd>
 8008234:	4607      	mov	r7, r0
 8008236:	e7f0      	b.n	800821a <_dtoa_r+0xae2>
 8008238:	f1b9 0f00 	cmp.w	r9, #0
 800823c:	9a00      	ldr	r2, [sp, #0]
 800823e:	bfcc      	ite	gt
 8008240:	464d      	movgt	r5, r9
 8008242:	2501      	movle	r5, #1
 8008244:	4415      	add	r5, r2
 8008246:	f04f 0800 	mov.w	r8, #0
 800824a:	4659      	mov	r1, fp
 800824c:	2201      	movs	r2, #1
 800824e:	4620      	mov	r0, r4
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	f000 fd95 	bl	8008d80 <__lshift>
 8008256:	4631      	mov	r1, r6
 8008258:	4683      	mov	fp, r0
 800825a:	f000 fdfd 	bl	8008e58 <__mcmp>
 800825e:	2800      	cmp	r0, #0
 8008260:	dcb2      	bgt.n	80081c8 <_dtoa_r+0xa90>
 8008262:	d102      	bne.n	800826a <_dtoa_r+0xb32>
 8008264:	9b01      	ldr	r3, [sp, #4]
 8008266:	07db      	lsls	r3, r3, #31
 8008268:	d4ae      	bmi.n	80081c8 <_dtoa_r+0xa90>
 800826a:	462b      	mov	r3, r5
 800826c:	461d      	mov	r5, r3
 800826e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008272:	2a30      	cmp	r2, #48	; 0x30
 8008274:	d0fa      	beq.n	800826c <_dtoa_r+0xb34>
 8008276:	e6f8      	b.n	800806a <_dtoa_r+0x932>
 8008278:	9a00      	ldr	r2, [sp, #0]
 800827a:	429a      	cmp	r2, r3
 800827c:	d1a5      	bne.n	80081ca <_dtoa_r+0xa92>
 800827e:	f10a 0a01 	add.w	sl, sl, #1
 8008282:	2331      	movs	r3, #49	; 0x31
 8008284:	e779      	b.n	800817a <_dtoa_r+0xa42>
 8008286:	4b14      	ldr	r3, [pc, #80]	; (80082d8 <_dtoa_r+0xba0>)
 8008288:	f7ff bab1 	b.w	80077ee <_dtoa_r+0xb6>
 800828c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800828e:	2b00      	cmp	r3, #0
 8008290:	f47f aa93 	bne.w	80077ba <_dtoa_r+0x82>
 8008294:	4b11      	ldr	r3, [pc, #68]	; (80082dc <_dtoa_r+0xba4>)
 8008296:	f7ff baaa 	b.w	80077ee <_dtoa_r+0xb6>
 800829a:	f1b9 0f00 	cmp.w	r9, #0
 800829e:	dc03      	bgt.n	80082a8 <_dtoa_r+0xb70>
 80082a0:	9b05      	ldr	r3, [sp, #20]
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	f73f aeca 	bgt.w	800803c <_dtoa_r+0x904>
 80082a8:	9d00      	ldr	r5, [sp, #0]
 80082aa:	4631      	mov	r1, r6
 80082ac:	4658      	mov	r0, fp
 80082ae:	f7ff f9b7 	bl	8007620 <quorem>
 80082b2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80082b6:	f805 3b01 	strb.w	r3, [r5], #1
 80082ba:	9a00      	ldr	r2, [sp, #0]
 80082bc:	1aaa      	subs	r2, r5, r2
 80082be:	4591      	cmp	r9, r2
 80082c0:	ddba      	ble.n	8008238 <_dtoa_r+0xb00>
 80082c2:	4659      	mov	r1, fp
 80082c4:	2300      	movs	r3, #0
 80082c6:	220a      	movs	r2, #10
 80082c8:	4620      	mov	r0, r4
 80082ca:	f000 fbc3 	bl	8008a54 <__multadd>
 80082ce:	4683      	mov	fp, r0
 80082d0:	e7eb      	b.n	80082aa <_dtoa_r+0xb72>
 80082d2:	bf00      	nop
 80082d4:	0800acd9 	.word	0x0800acd9
 80082d8:	0800acaa 	.word	0x0800acaa
 80082dc:	0800acd0 	.word	0x0800acd0

080082e0 <__libc_fini_array>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d07      	ldr	r5, [pc, #28]	; (8008300 <__libc_fini_array+0x20>)
 80082e4:	4c07      	ldr	r4, [pc, #28]	; (8008304 <__libc_fini_array+0x24>)
 80082e6:	1b64      	subs	r4, r4, r5
 80082e8:	10a4      	asrs	r4, r4, #2
 80082ea:	b91c      	cbnz	r4, 80082f4 <__libc_fini_array+0x14>
 80082ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082f0:	f002 bc84 	b.w	800abfc <_fini>
 80082f4:	3c01      	subs	r4, #1
 80082f6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80082fa:	4798      	blx	r3
 80082fc:	e7f5      	b.n	80082ea <__libc_fini_array+0xa>
 80082fe:	bf00      	nop
 8008300:	0800b024 	.word	0x0800b024
 8008304:	0800b028 	.word	0x0800b028

08008308 <_malloc_trim_r>:
 8008308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800830c:	4606      	mov	r6, r0
 800830e:	2008      	movs	r0, #8
 8008310:	460c      	mov	r4, r1
 8008312:	f000 ff77 	bl	8009204 <sysconf>
 8008316:	4f23      	ldr	r7, [pc, #140]	; (80083a4 <_malloc_trim_r+0x9c>)
 8008318:	4680      	mov	r8, r0
 800831a:	4630      	mov	r0, r6
 800831c:	f000 fb60 	bl	80089e0 <__malloc_lock>
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	685d      	ldr	r5, [r3, #4]
 8008324:	f025 0503 	bic.w	r5, r5, #3
 8008328:	1b2c      	subs	r4, r5, r4
 800832a:	3c11      	subs	r4, #17
 800832c:	4444      	add	r4, r8
 800832e:	fbb4 f4f8 	udiv	r4, r4, r8
 8008332:	3c01      	subs	r4, #1
 8008334:	fb08 f404 	mul.w	r4, r8, r4
 8008338:	45a0      	cmp	r8, r4
 800833a:	dd05      	ble.n	8008348 <_malloc_trim_r+0x40>
 800833c:	4630      	mov	r0, r6
 800833e:	f000 fb55 	bl	80089ec <__malloc_unlock>
 8008342:	2000      	movs	r0, #0
 8008344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008348:	2100      	movs	r1, #0
 800834a:	4630      	mov	r0, r6
 800834c:	f000 febc 	bl	80090c8 <_sbrk_r>
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	442b      	add	r3, r5
 8008354:	4298      	cmp	r0, r3
 8008356:	d1f1      	bne.n	800833c <_malloc_trim_r+0x34>
 8008358:	4261      	negs	r1, r4
 800835a:	4630      	mov	r0, r6
 800835c:	f000 feb4 	bl	80090c8 <_sbrk_r>
 8008360:	3001      	adds	r0, #1
 8008362:	d110      	bne.n	8008386 <_malloc_trim_r+0x7e>
 8008364:	2100      	movs	r1, #0
 8008366:	4630      	mov	r0, r6
 8008368:	f000 feae 	bl	80090c8 <_sbrk_r>
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	1a83      	subs	r3, r0, r2
 8008370:	2b0f      	cmp	r3, #15
 8008372:	dde3      	ble.n	800833c <_malloc_trim_r+0x34>
 8008374:	490c      	ldr	r1, [pc, #48]	; (80083a8 <_malloc_trim_r+0xa0>)
 8008376:	6809      	ldr	r1, [r1, #0]
 8008378:	1a40      	subs	r0, r0, r1
 800837a:	490c      	ldr	r1, [pc, #48]	; (80083ac <_malloc_trim_r+0xa4>)
 800837c:	f043 0301 	orr.w	r3, r3, #1
 8008380:	6008      	str	r0, [r1, #0]
 8008382:	6053      	str	r3, [r2, #4]
 8008384:	e7da      	b.n	800833c <_malloc_trim_r+0x34>
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	4a08      	ldr	r2, [pc, #32]	; (80083ac <_malloc_trim_r+0xa4>)
 800838a:	1b2d      	subs	r5, r5, r4
 800838c:	f045 0501 	orr.w	r5, r5, #1
 8008390:	605d      	str	r5, [r3, #4]
 8008392:	6813      	ldr	r3, [r2, #0]
 8008394:	4630      	mov	r0, r6
 8008396:	1b1c      	subs	r4, r3, r4
 8008398:	6014      	str	r4, [r2, #0]
 800839a:	f000 fb27 	bl	80089ec <__malloc_unlock>
 800839e:	2001      	movs	r0, #1
 80083a0:	e7d0      	b.n	8008344 <_malloc_trim_r+0x3c>
 80083a2:	bf00      	nop
 80083a4:	2000043c 	.word	0x2000043c
 80083a8:	20000844 	.word	0x20000844
 80083ac:	20000a14 	.word	0x20000a14

080083b0 <_free_r>:
 80083b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b2:	4605      	mov	r5, r0
 80083b4:	460f      	mov	r7, r1
 80083b6:	2900      	cmp	r1, #0
 80083b8:	f000 80b1 	beq.w	800851e <_free_r+0x16e>
 80083bc:	f000 fb10 	bl	80089e0 <__malloc_lock>
 80083c0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80083c4:	4856      	ldr	r0, [pc, #344]	; (8008520 <_free_r+0x170>)
 80083c6:	f022 0401 	bic.w	r4, r2, #1
 80083ca:	f1a7 0308 	sub.w	r3, r7, #8
 80083ce:	eb03 0c04 	add.w	ip, r3, r4
 80083d2:	6881      	ldr	r1, [r0, #8]
 80083d4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80083d8:	4561      	cmp	r1, ip
 80083da:	f026 0603 	bic.w	r6, r6, #3
 80083de:	f002 0201 	and.w	r2, r2, #1
 80083e2:	d11b      	bne.n	800841c <_free_r+0x6c>
 80083e4:	4434      	add	r4, r6
 80083e6:	b93a      	cbnz	r2, 80083f8 <_free_r+0x48>
 80083e8:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80083ec:	1a9b      	subs	r3, r3, r2
 80083ee:	4414      	add	r4, r2
 80083f0:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80083f4:	60ca      	str	r2, [r1, #12]
 80083f6:	6091      	str	r1, [r2, #8]
 80083f8:	f044 0201 	orr.w	r2, r4, #1
 80083fc:	605a      	str	r2, [r3, #4]
 80083fe:	6083      	str	r3, [r0, #8]
 8008400:	4b48      	ldr	r3, [pc, #288]	; (8008524 <_free_r+0x174>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	42a3      	cmp	r3, r4
 8008406:	d804      	bhi.n	8008412 <_free_r+0x62>
 8008408:	4b47      	ldr	r3, [pc, #284]	; (8008528 <_free_r+0x178>)
 800840a:	4628      	mov	r0, r5
 800840c:	6819      	ldr	r1, [r3, #0]
 800840e:	f7ff ff7b 	bl	8008308 <_malloc_trim_r>
 8008412:	4628      	mov	r0, r5
 8008414:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008418:	f000 bae8 	b.w	80089ec <__malloc_unlock>
 800841c:	f8cc 6004 	str.w	r6, [ip, #4]
 8008420:	2a00      	cmp	r2, #0
 8008422:	d138      	bne.n	8008496 <_free_r+0xe6>
 8008424:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8008428:	1a5b      	subs	r3, r3, r1
 800842a:	440c      	add	r4, r1
 800842c:	6899      	ldr	r1, [r3, #8]
 800842e:	f100 0708 	add.w	r7, r0, #8
 8008432:	42b9      	cmp	r1, r7
 8008434:	d031      	beq.n	800849a <_free_r+0xea>
 8008436:	68df      	ldr	r7, [r3, #12]
 8008438:	60cf      	str	r7, [r1, #12]
 800843a:	60b9      	str	r1, [r7, #8]
 800843c:	eb0c 0106 	add.w	r1, ip, r6
 8008440:	6849      	ldr	r1, [r1, #4]
 8008442:	07c9      	lsls	r1, r1, #31
 8008444:	d40b      	bmi.n	800845e <_free_r+0xae>
 8008446:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800844a:	4434      	add	r4, r6
 800844c:	bb3a      	cbnz	r2, 800849e <_free_r+0xee>
 800844e:	4e37      	ldr	r6, [pc, #220]	; (800852c <_free_r+0x17c>)
 8008450:	42b1      	cmp	r1, r6
 8008452:	d124      	bne.n	800849e <_free_r+0xee>
 8008454:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008458:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800845c:	2201      	movs	r2, #1
 800845e:	f044 0101 	orr.w	r1, r4, #1
 8008462:	6059      	str	r1, [r3, #4]
 8008464:	511c      	str	r4, [r3, r4]
 8008466:	2a00      	cmp	r2, #0
 8008468:	d1d3      	bne.n	8008412 <_free_r+0x62>
 800846a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800846e:	d21b      	bcs.n	80084a8 <_free_r+0xf8>
 8008470:	0961      	lsrs	r1, r4, #5
 8008472:	08e2      	lsrs	r2, r4, #3
 8008474:	2401      	movs	r4, #1
 8008476:	408c      	lsls	r4, r1
 8008478:	6841      	ldr	r1, [r0, #4]
 800847a:	3201      	adds	r2, #1
 800847c:	430c      	orrs	r4, r1
 800847e:	6044      	str	r4, [r0, #4]
 8008480:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8008484:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8008488:	3908      	subs	r1, #8
 800848a:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800848e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8008492:	60e3      	str	r3, [r4, #12]
 8008494:	e7bd      	b.n	8008412 <_free_r+0x62>
 8008496:	2200      	movs	r2, #0
 8008498:	e7d0      	b.n	800843c <_free_r+0x8c>
 800849a:	2201      	movs	r2, #1
 800849c:	e7ce      	b.n	800843c <_free_r+0x8c>
 800849e:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80084a2:	60ce      	str	r6, [r1, #12]
 80084a4:	60b1      	str	r1, [r6, #8]
 80084a6:	e7da      	b.n	800845e <_free_r+0xae>
 80084a8:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80084ac:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80084b0:	d214      	bcs.n	80084dc <_free_r+0x12c>
 80084b2:	09a2      	lsrs	r2, r4, #6
 80084b4:	3238      	adds	r2, #56	; 0x38
 80084b6:	1c51      	adds	r1, r2, #1
 80084b8:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80084bc:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80084c0:	428e      	cmp	r6, r1
 80084c2:	d125      	bne.n	8008510 <_free_r+0x160>
 80084c4:	2401      	movs	r4, #1
 80084c6:	1092      	asrs	r2, r2, #2
 80084c8:	fa04 f202 	lsl.w	r2, r4, r2
 80084cc:	6844      	ldr	r4, [r0, #4]
 80084ce:	4322      	orrs	r2, r4
 80084d0:	6042      	str	r2, [r0, #4]
 80084d2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80084d6:	60b3      	str	r3, [r6, #8]
 80084d8:	60cb      	str	r3, [r1, #12]
 80084da:	e79a      	b.n	8008412 <_free_r+0x62>
 80084dc:	2a14      	cmp	r2, #20
 80084de:	d801      	bhi.n	80084e4 <_free_r+0x134>
 80084e0:	325b      	adds	r2, #91	; 0x5b
 80084e2:	e7e8      	b.n	80084b6 <_free_r+0x106>
 80084e4:	2a54      	cmp	r2, #84	; 0x54
 80084e6:	d802      	bhi.n	80084ee <_free_r+0x13e>
 80084e8:	0b22      	lsrs	r2, r4, #12
 80084ea:	326e      	adds	r2, #110	; 0x6e
 80084ec:	e7e3      	b.n	80084b6 <_free_r+0x106>
 80084ee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80084f2:	d802      	bhi.n	80084fa <_free_r+0x14a>
 80084f4:	0be2      	lsrs	r2, r4, #15
 80084f6:	3277      	adds	r2, #119	; 0x77
 80084f8:	e7dd      	b.n	80084b6 <_free_r+0x106>
 80084fa:	f240 5154 	movw	r1, #1364	; 0x554
 80084fe:	428a      	cmp	r2, r1
 8008500:	bf9a      	itte	ls
 8008502:	0ca2      	lsrls	r2, r4, #18
 8008504:	327c      	addls	r2, #124	; 0x7c
 8008506:	227e      	movhi	r2, #126	; 0x7e
 8008508:	e7d5      	b.n	80084b6 <_free_r+0x106>
 800850a:	6889      	ldr	r1, [r1, #8]
 800850c:	428e      	cmp	r6, r1
 800850e:	d004      	beq.n	800851a <_free_r+0x16a>
 8008510:	684a      	ldr	r2, [r1, #4]
 8008512:	f022 0203 	bic.w	r2, r2, #3
 8008516:	42a2      	cmp	r2, r4
 8008518:	d8f7      	bhi.n	800850a <_free_r+0x15a>
 800851a:	68ce      	ldr	r6, [r1, #12]
 800851c:	e7d9      	b.n	80084d2 <_free_r+0x122>
 800851e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008520:	2000043c 	.word	0x2000043c
 8008524:	20000848 	.word	0x20000848
 8008528:	20000a44 	.word	0x20000a44
 800852c:	20000444 	.word	0x20000444

08008530 <_localeconv_r>:
 8008530:	4800      	ldr	r0, [pc, #0]	; (8008534 <_localeconv_r+0x4>)
 8008532:	4770      	bx	lr
 8008534:	2000093c 	.word	0x2000093c

08008538 <__retarget_lock_init_recursive>:
 8008538:	4770      	bx	lr

0800853a <__retarget_lock_close_recursive>:
 800853a:	4770      	bx	lr

0800853c <__retarget_lock_acquire_recursive>:
 800853c:	4770      	bx	lr

0800853e <__retarget_lock_release_recursive>:
 800853e:	4770      	bx	lr

08008540 <_malloc_r>:
 8008540:	f101 030b 	add.w	r3, r1, #11
 8008544:	2b16      	cmp	r3, #22
 8008546:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854a:	4605      	mov	r5, r0
 800854c:	d906      	bls.n	800855c <_malloc_r+0x1c>
 800854e:	f033 0707 	bics.w	r7, r3, #7
 8008552:	d504      	bpl.n	800855e <_malloc_r+0x1e>
 8008554:	230c      	movs	r3, #12
 8008556:	602b      	str	r3, [r5, #0]
 8008558:	2400      	movs	r4, #0
 800855a:	e1ae      	b.n	80088ba <_malloc_r+0x37a>
 800855c:	2710      	movs	r7, #16
 800855e:	42b9      	cmp	r1, r7
 8008560:	d8f8      	bhi.n	8008554 <_malloc_r+0x14>
 8008562:	4628      	mov	r0, r5
 8008564:	f000 fa3c 	bl	80089e0 <__malloc_lock>
 8008568:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800856c:	4ec3      	ldr	r6, [pc, #780]	; (800887c <_malloc_r+0x33c>)
 800856e:	d238      	bcs.n	80085e2 <_malloc_r+0xa2>
 8008570:	f107 0208 	add.w	r2, r7, #8
 8008574:	4432      	add	r2, r6
 8008576:	f1a2 0108 	sub.w	r1, r2, #8
 800857a:	6854      	ldr	r4, [r2, #4]
 800857c:	428c      	cmp	r4, r1
 800857e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8008582:	d102      	bne.n	800858a <_malloc_r+0x4a>
 8008584:	68d4      	ldr	r4, [r2, #12]
 8008586:	42a2      	cmp	r2, r4
 8008588:	d010      	beq.n	80085ac <_malloc_r+0x6c>
 800858a:	6863      	ldr	r3, [r4, #4]
 800858c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008590:	f023 0303 	bic.w	r3, r3, #3
 8008594:	60ca      	str	r2, [r1, #12]
 8008596:	4423      	add	r3, r4
 8008598:	6091      	str	r1, [r2, #8]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	f042 0201 	orr.w	r2, r2, #1
 80085a0:	605a      	str	r2, [r3, #4]
 80085a2:	4628      	mov	r0, r5
 80085a4:	f000 fa22 	bl	80089ec <__malloc_unlock>
 80085a8:	3408      	adds	r4, #8
 80085aa:	e186      	b.n	80088ba <_malloc_r+0x37a>
 80085ac:	3302      	adds	r3, #2
 80085ae:	4ab4      	ldr	r2, [pc, #720]	; (8008880 <_malloc_r+0x340>)
 80085b0:	6934      	ldr	r4, [r6, #16]
 80085b2:	4294      	cmp	r4, r2
 80085b4:	4611      	mov	r1, r2
 80085b6:	d077      	beq.n	80086a8 <_malloc_r+0x168>
 80085b8:	6860      	ldr	r0, [r4, #4]
 80085ba:	f020 0c03 	bic.w	ip, r0, #3
 80085be:	ebac 0007 	sub.w	r0, ip, r7
 80085c2:	280f      	cmp	r0, #15
 80085c4:	dd48      	ble.n	8008658 <_malloc_r+0x118>
 80085c6:	19e1      	adds	r1, r4, r7
 80085c8:	f040 0301 	orr.w	r3, r0, #1
 80085cc:	f047 0701 	orr.w	r7, r7, #1
 80085d0:	6067      	str	r7, [r4, #4]
 80085d2:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80085d6:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80085da:	604b      	str	r3, [r1, #4]
 80085dc:	f844 000c 	str.w	r0, [r4, ip]
 80085e0:	e7df      	b.n	80085a2 <_malloc_r+0x62>
 80085e2:	0a7b      	lsrs	r3, r7, #9
 80085e4:	d02a      	beq.n	800863c <_malloc_r+0xfc>
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	d812      	bhi.n	8008610 <_malloc_r+0xd0>
 80085ea:	09bb      	lsrs	r3, r7, #6
 80085ec:	3338      	adds	r3, #56	; 0x38
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80085f4:	f1a2 0c08 	sub.w	ip, r2, #8
 80085f8:	6854      	ldr	r4, [r2, #4]
 80085fa:	4564      	cmp	r4, ip
 80085fc:	d006      	beq.n	800860c <_malloc_r+0xcc>
 80085fe:	6862      	ldr	r2, [r4, #4]
 8008600:	f022 0203 	bic.w	r2, r2, #3
 8008604:	1bd0      	subs	r0, r2, r7
 8008606:	280f      	cmp	r0, #15
 8008608:	dd1c      	ble.n	8008644 <_malloc_r+0x104>
 800860a:	3b01      	subs	r3, #1
 800860c:	3301      	adds	r3, #1
 800860e:	e7ce      	b.n	80085ae <_malloc_r+0x6e>
 8008610:	2b14      	cmp	r3, #20
 8008612:	d801      	bhi.n	8008618 <_malloc_r+0xd8>
 8008614:	335b      	adds	r3, #91	; 0x5b
 8008616:	e7ea      	b.n	80085ee <_malloc_r+0xae>
 8008618:	2b54      	cmp	r3, #84	; 0x54
 800861a:	d802      	bhi.n	8008622 <_malloc_r+0xe2>
 800861c:	0b3b      	lsrs	r3, r7, #12
 800861e:	336e      	adds	r3, #110	; 0x6e
 8008620:	e7e5      	b.n	80085ee <_malloc_r+0xae>
 8008622:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008626:	d802      	bhi.n	800862e <_malloc_r+0xee>
 8008628:	0bfb      	lsrs	r3, r7, #15
 800862a:	3377      	adds	r3, #119	; 0x77
 800862c:	e7df      	b.n	80085ee <_malloc_r+0xae>
 800862e:	f240 5254 	movw	r2, #1364	; 0x554
 8008632:	4293      	cmp	r3, r2
 8008634:	d804      	bhi.n	8008640 <_malloc_r+0x100>
 8008636:	0cbb      	lsrs	r3, r7, #18
 8008638:	337c      	adds	r3, #124	; 0x7c
 800863a:	e7d8      	b.n	80085ee <_malloc_r+0xae>
 800863c:	233f      	movs	r3, #63	; 0x3f
 800863e:	e7d6      	b.n	80085ee <_malloc_r+0xae>
 8008640:	237e      	movs	r3, #126	; 0x7e
 8008642:	e7d4      	b.n	80085ee <_malloc_r+0xae>
 8008644:	2800      	cmp	r0, #0
 8008646:	68e1      	ldr	r1, [r4, #12]
 8008648:	db04      	blt.n	8008654 <_malloc_r+0x114>
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	60d9      	str	r1, [r3, #12]
 800864e:	608b      	str	r3, [r1, #8]
 8008650:	18a3      	adds	r3, r4, r2
 8008652:	e7a2      	b.n	800859a <_malloc_r+0x5a>
 8008654:	460c      	mov	r4, r1
 8008656:	e7d0      	b.n	80085fa <_malloc_r+0xba>
 8008658:	2800      	cmp	r0, #0
 800865a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800865e:	db07      	blt.n	8008670 <_malloc_r+0x130>
 8008660:	44a4      	add	ip, r4
 8008662:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008666:	f043 0301 	orr.w	r3, r3, #1
 800866a:	f8cc 3004 	str.w	r3, [ip, #4]
 800866e:	e798      	b.n	80085a2 <_malloc_r+0x62>
 8008670:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8008674:	6870      	ldr	r0, [r6, #4]
 8008676:	f080 809e 	bcs.w	80087b6 <_malloc_r+0x276>
 800867a:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800867e:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8008682:	f04f 0c01 	mov.w	ip, #1
 8008686:	3201      	adds	r2, #1
 8008688:	fa0c fc0e 	lsl.w	ip, ip, lr
 800868c:	ea4c 0000 	orr.w	r0, ip, r0
 8008690:	6070      	str	r0, [r6, #4]
 8008692:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8008696:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800869a:	3808      	subs	r0, #8
 800869c:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80086a0:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80086a4:	f8cc 400c 	str.w	r4, [ip, #12]
 80086a8:	2001      	movs	r0, #1
 80086aa:	109a      	asrs	r2, r3, #2
 80086ac:	fa00 f202 	lsl.w	r2, r0, r2
 80086b0:	6870      	ldr	r0, [r6, #4]
 80086b2:	4290      	cmp	r0, r2
 80086b4:	d326      	bcc.n	8008704 <_malloc_r+0x1c4>
 80086b6:	4210      	tst	r0, r2
 80086b8:	d106      	bne.n	80086c8 <_malloc_r+0x188>
 80086ba:	f023 0303 	bic.w	r3, r3, #3
 80086be:	0052      	lsls	r2, r2, #1
 80086c0:	4210      	tst	r0, r2
 80086c2:	f103 0304 	add.w	r3, r3, #4
 80086c6:	d0fa      	beq.n	80086be <_malloc_r+0x17e>
 80086c8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80086cc:	46c1      	mov	r9, r8
 80086ce:	469e      	mov	lr, r3
 80086d0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80086d4:	454c      	cmp	r4, r9
 80086d6:	f040 80b3 	bne.w	8008840 <_malloc_r+0x300>
 80086da:	f10e 0e01 	add.w	lr, lr, #1
 80086de:	f01e 0f03 	tst.w	lr, #3
 80086e2:	f109 0908 	add.w	r9, r9, #8
 80086e6:	d1f3      	bne.n	80086d0 <_malloc_r+0x190>
 80086e8:	0798      	lsls	r0, r3, #30
 80086ea:	f040 80ec 	bne.w	80088c6 <_malloc_r+0x386>
 80086ee:	6873      	ldr	r3, [r6, #4]
 80086f0:	ea23 0302 	bic.w	r3, r3, r2
 80086f4:	6073      	str	r3, [r6, #4]
 80086f6:	6870      	ldr	r0, [r6, #4]
 80086f8:	0052      	lsls	r2, r2, #1
 80086fa:	4290      	cmp	r0, r2
 80086fc:	d302      	bcc.n	8008704 <_malloc_r+0x1c4>
 80086fe:	2a00      	cmp	r2, #0
 8008700:	f040 80ee 	bne.w	80088e0 <_malloc_r+0x3a0>
 8008704:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8008708:	f8db 1004 	ldr.w	r1, [fp, #4]
 800870c:	f021 0903 	bic.w	r9, r1, #3
 8008710:	45b9      	cmp	r9, r7
 8008712:	d304      	bcc.n	800871e <_malloc_r+0x1de>
 8008714:	eba9 0207 	sub.w	r2, r9, r7
 8008718:	2a0f      	cmp	r2, #15
 800871a:	f300 8149 	bgt.w	80089b0 <_malloc_r+0x470>
 800871e:	4a59      	ldr	r2, [pc, #356]	; (8008884 <_malloc_r+0x344>)
 8008720:	6811      	ldr	r1, [r2, #0]
 8008722:	3110      	adds	r1, #16
 8008724:	eb0b 0309 	add.w	r3, fp, r9
 8008728:	4439      	add	r1, r7
 800872a:	2008      	movs	r0, #8
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	9100      	str	r1, [sp, #0]
 8008730:	f000 fd68 	bl	8009204 <sysconf>
 8008734:	4a54      	ldr	r2, [pc, #336]	; (8008888 <_malloc_r+0x348>)
 8008736:	e9dd 1300 	ldrd	r1, r3, [sp]
 800873a:	4680      	mov	r8, r0
 800873c:	6810      	ldr	r0, [r2, #0]
 800873e:	3001      	adds	r0, #1
 8008740:	bf1f      	itttt	ne
 8008742:	f101 31ff 	addne.w	r1, r1, #4294967295
 8008746:	4441      	addne	r1, r8
 8008748:	f1c8 0000 	rsbne	r0, r8, #0
 800874c:	4001      	andne	r1, r0
 800874e:	4628      	mov	r0, r5
 8008750:	e9cd 1300 	strd	r1, r3, [sp]
 8008754:	f000 fcb8 	bl	80090c8 <_sbrk_r>
 8008758:	1c42      	adds	r2, r0, #1
 800875a:	4604      	mov	r4, r0
 800875c:	f000 80fc 	beq.w	8008958 <_malloc_r+0x418>
 8008760:	9b01      	ldr	r3, [sp, #4]
 8008762:	9900      	ldr	r1, [sp, #0]
 8008764:	4a48      	ldr	r2, [pc, #288]	; (8008888 <_malloc_r+0x348>)
 8008766:	4283      	cmp	r3, r0
 8008768:	d902      	bls.n	8008770 <_malloc_r+0x230>
 800876a:	45b3      	cmp	fp, r6
 800876c:	f040 80f4 	bne.w	8008958 <_malloc_r+0x418>
 8008770:	f8df a120 	ldr.w	sl, [pc, #288]	; 8008894 <_malloc_r+0x354>
 8008774:	f8da 0000 	ldr.w	r0, [sl]
 8008778:	42a3      	cmp	r3, r4
 800877a:	eb00 0e01 	add.w	lr, r0, r1
 800877e:	f8ca e000 	str.w	lr, [sl]
 8008782:	f108 3cff 	add.w	ip, r8, #4294967295
 8008786:	f040 80ad 	bne.w	80088e4 <_malloc_r+0x3a4>
 800878a:	ea13 0f0c 	tst.w	r3, ip
 800878e:	f040 80a9 	bne.w	80088e4 <_malloc_r+0x3a4>
 8008792:	68b3      	ldr	r3, [r6, #8]
 8008794:	4449      	add	r1, r9
 8008796:	f041 0101 	orr.w	r1, r1, #1
 800879a:	6059      	str	r1, [r3, #4]
 800879c:	4a3b      	ldr	r2, [pc, #236]	; (800888c <_malloc_r+0x34c>)
 800879e:	f8da 3000 	ldr.w	r3, [sl]
 80087a2:	6811      	ldr	r1, [r2, #0]
 80087a4:	428b      	cmp	r3, r1
 80087a6:	bf88      	it	hi
 80087a8:	6013      	strhi	r3, [r2, #0]
 80087aa:	4a39      	ldr	r2, [pc, #228]	; (8008890 <_malloc_r+0x350>)
 80087ac:	6811      	ldr	r1, [r2, #0]
 80087ae:	428b      	cmp	r3, r1
 80087b0:	bf88      	it	hi
 80087b2:	6013      	strhi	r3, [r2, #0]
 80087b4:	e0d0      	b.n	8008958 <_malloc_r+0x418>
 80087b6:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80087ba:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80087be:	d218      	bcs.n	80087f2 <_malloc_r+0x2b2>
 80087c0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80087c4:	3238      	adds	r2, #56	; 0x38
 80087c6:	f102 0e01 	add.w	lr, r2, #1
 80087ca:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80087ce:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80087d2:	45f0      	cmp	r8, lr
 80087d4:	d12b      	bne.n	800882e <_malloc_r+0x2ee>
 80087d6:	1092      	asrs	r2, r2, #2
 80087d8:	f04f 0c01 	mov.w	ip, #1
 80087dc:	fa0c f202 	lsl.w	r2, ip, r2
 80087e0:	4310      	orrs	r0, r2
 80087e2:	6070      	str	r0, [r6, #4]
 80087e4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80087e8:	f8c8 4008 	str.w	r4, [r8, #8]
 80087ec:	f8ce 400c 	str.w	r4, [lr, #12]
 80087f0:	e75a      	b.n	80086a8 <_malloc_r+0x168>
 80087f2:	2a14      	cmp	r2, #20
 80087f4:	d801      	bhi.n	80087fa <_malloc_r+0x2ba>
 80087f6:	325b      	adds	r2, #91	; 0x5b
 80087f8:	e7e5      	b.n	80087c6 <_malloc_r+0x286>
 80087fa:	2a54      	cmp	r2, #84	; 0x54
 80087fc:	d803      	bhi.n	8008806 <_malloc_r+0x2c6>
 80087fe:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8008802:	326e      	adds	r2, #110	; 0x6e
 8008804:	e7df      	b.n	80087c6 <_malloc_r+0x286>
 8008806:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800880a:	d803      	bhi.n	8008814 <_malloc_r+0x2d4>
 800880c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8008810:	3277      	adds	r2, #119	; 0x77
 8008812:	e7d8      	b.n	80087c6 <_malloc_r+0x286>
 8008814:	f240 5e54 	movw	lr, #1364	; 0x554
 8008818:	4572      	cmp	r2, lr
 800881a:	bf9a      	itte	ls
 800881c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8008820:	327c      	addls	r2, #124	; 0x7c
 8008822:	227e      	movhi	r2, #126	; 0x7e
 8008824:	e7cf      	b.n	80087c6 <_malloc_r+0x286>
 8008826:	f8de e008 	ldr.w	lr, [lr, #8]
 800882a:	45f0      	cmp	r8, lr
 800882c:	d005      	beq.n	800883a <_malloc_r+0x2fa>
 800882e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008832:	f022 0203 	bic.w	r2, r2, #3
 8008836:	4562      	cmp	r2, ip
 8008838:	d8f5      	bhi.n	8008826 <_malloc_r+0x2e6>
 800883a:	f8de 800c 	ldr.w	r8, [lr, #12]
 800883e:	e7d1      	b.n	80087e4 <_malloc_r+0x2a4>
 8008840:	6860      	ldr	r0, [r4, #4]
 8008842:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8008846:	f020 0003 	bic.w	r0, r0, #3
 800884a:	eba0 0a07 	sub.w	sl, r0, r7
 800884e:	f1ba 0f0f 	cmp.w	sl, #15
 8008852:	dd21      	ble.n	8008898 <_malloc_r+0x358>
 8008854:	68a3      	ldr	r3, [r4, #8]
 8008856:	19e2      	adds	r2, r4, r7
 8008858:	f047 0701 	orr.w	r7, r7, #1
 800885c:	6067      	str	r7, [r4, #4]
 800885e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8008862:	f8cc 3008 	str.w	r3, [ip, #8]
 8008866:	f04a 0301 	orr.w	r3, sl, #1
 800886a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800886e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8008872:	6053      	str	r3, [r2, #4]
 8008874:	f844 a000 	str.w	sl, [r4, r0]
 8008878:	e693      	b.n	80085a2 <_malloc_r+0x62>
 800887a:	bf00      	nop
 800887c:	2000043c 	.word	0x2000043c
 8008880:	20000444 	.word	0x20000444
 8008884:	20000a44 	.word	0x20000a44
 8008888:	20000844 	.word	0x20000844
 800888c:	20000a3c 	.word	0x20000a3c
 8008890:	20000a40 	.word	0x20000a40
 8008894:	20000a14 	.word	0x20000a14
 8008898:	f1ba 0f00 	cmp.w	sl, #0
 800889c:	db11      	blt.n	80088c2 <_malloc_r+0x382>
 800889e:	4420      	add	r0, r4
 80088a0:	6843      	ldr	r3, [r0, #4]
 80088a2:	f043 0301 	orr.w	r3, r3, #1
 80088a6:	6043      	str	r3, [r0, #4]
 80088a8:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80088ac:	4628      	mov	r0, r5
 80088ae:	f8c3 c00c 	str.w	ip, [r3, #12]
 80088b2:	f8cc 3008 	str.w	r3, [ip, #8]
 80088b6:	f000 f899 	bl	80089ec <__malloc_unlock>
 80088ba:	4620      	mov	r0, r4
 80088bc:	b003      	add	sp, #12
 80088be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c2:	4664      	mov	r4, ip
 80088c4:	e706      	b.n	80086d4 <_malloc_r+0x194>
 80088c6:	f858 0908 	ldr.w	r0, [r8], #-8
 80088ca:	4540      	cmp	r0, r8
 80088cc:	f103 33ff 	add.w	r3, r3, #4294967295
 80088d0:	f43f af0a 	beq.w	80086e8 <_malloc_r+0x1a8>
 80088d4:	e70f      	b.n	80086f6 <_malloc_r+0x1b6>
 80088d6:	3304      	adds	r3, #4
 80088d8:	0052      	lsls	r2, r2, #1
 80088da:	4210      	tst	r0, r2
 80088dc:	d0fb      	beq.n	80088d6 <_malloc_r+0x396>
 80088de:	e6f3      	b.n	80086c8 <_malloc_r+0x188>
 80088e0:	4673      	mov	r3, lr
 80088e2:	e7fa      	b.n	80088da <_malloc_r+0x39a>
 80088e4:	6810      	ldr	r0, [r2, #0]
 80088e6:	3001      	adds	r0, #1
 80088e8:	bf1b      	ittet	ne
 80088ea:	1ae3      	subne	r3, r4, r3
 80088ec:	4473      	addne	r3, lr
 80088ee:	6014      	streq	r4, [r2, #0]
 80088f0:	f8ca 3000 	strne.w	r3, [sl]
 80088f4:	f014 0307 	ands.w	r3, r4, #7
 80088f8:	bf1a      	itte	ne
 80088fa:	f1c3 0008 	rsbne	r0, r3, #8
 80088fe:	1824      	addne	r4, r4, r0
 8008900:	4618      	moveq	r0, r3
 8008902:	1862      	adds	r2, r4, r1
 8008904:	ea02 010c 	and.w	r1, r2, ip
 8008908:	4480      	add	r8, r0
 800890a:	eba8 0801 	sub.w	r8, r8, r1
 800890e:	ea08 080c 	and.w	r8, r8, ip
 8008912:	4641      	mov	r1, r8
 8008914:	4628      	mov	r0, r5
 8008916:	9301      	str	r3, [sp, #4]
 8008918:	9200      	str	r2, [sp, #0]
 800891a:	f000 fbd5 	bl	80090c8 <_sbrk_r>
 800891e:	1c43      	adds	r3, r0, #1
 8008920:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008924:	d105      	bne.n	8008932 <_malloc_r+0x3f2>
 8008926:	b32b      	cbz	r3, 8008974 <_malloc_r+0x434>
 8008928:	f1a3 0008 	sub.w	r0, r3, #8
 800892c:	4410      	add	r0, r2
 800892e:	f04f 0800 	mov.w	r8, #0
 8008932:	f8da 2000 	ldr.w	r2, [sl]
 8008936:	60b4      	str	r4, [r6, #8]
 8008938:	1b00      	subs	r0, r0, r4
 800893a:	4440      	add	r0, r8
 800893c:	4442      	add	r2, r8
 800893e:	f040 0001 	orr.w	r0, r0, #1
 8008942:	45b3      	cmp	fp, r6
 8008944:	f8ca 2000 	str.w	r2, [sl]
 8008948:	6060      	str	r0, [r4, #4]
 800894a:	f43f af27 	beq.w	800879c <_malloc_r+0x25c>
 800894e:	f1b9 0f0f 	cmp.w	r9, #15
 8008952:	d812      	bhi.n	800897a <_malloc_r+0x43a>
 8008954:	2301      	movs	r3, #1
 8008956:	6063      	str	r3, [r4, #4]
 8008958:	68b3      	ldr	r3, [r6, #8]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f023 0303 	bic.w	r3, r3, #3
 8008960:	42bb      	cmp	r3, r7
 8008962:	eba3 0207 	sub.w	r2, r3, r7
 8008966:	d301      	bcc.n	800896c <_malloc_r+0x42c>
 8008968:	2a0f      	cmp	r2, #15
 800896a:	dc21      	bgt.n	80089b0 <_malloc_r+0x470>
 800896c:	4628      	mov	r0, r5
 800896e:	f000 f83d 	bl	80089ec <__malloc_unlock>
 8008972:	e5f1      	b.n	8008558 <_malloc_r+0x18>
 8008974:	4610      	mov	r0, r2
 8008976:	4698      	mov	r8, r3
 8008978:	e7db      	b.n	8008932 <_malloc_r+0x3f2>
 800897a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800897e:	f1a9 090c 	sub.w	r9, r9, #12
 8008982:	f029 0907 	bic.w	r9, r9, #7
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	ea43 0309 	orr.w	r3, r3, r9
 800898e:	f8cb 3004 	str.w	r3, [fp, #4]
 8008992:	2205      	movs	r2, #5
 8008994:	eb0b 0309 	add.w	r3, fp, r9
 8008998:	f1b9 0f0f 	cmp.w	r9, #15
 800899c:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80089a0:	f67f aefc 	bls.w	800879c <_malloc_r+0x25c>
 80089a4:	f10b 0108 	add.w	r1, fp, #8
 80089a8:	4628      	mov	r0, r5
 80089aa:	f7ff fd01 	bl	80083b0 <_free_r>
 80089ae:	e6f5      	b.n	800879c <_malloc_r+0x25c>
 80089b0:	68b4      	ldr	r4, [r6, #8]
 80089b2:	f047 0301 	orr.w	r3, r7, #1
 80089b6:	4427      	add	r7, r4
 80089b8:	f042 0201 	orr.w	r2, r2, #1
 80089bc:	6063      	str	r3, [r4, #4]
 80089be:	60b7      	str	r7, [r6, #8]
 80089c0:	607a      	str	r2, [r7, #4]
 80089c2:	e5ee      	b.n	80085a2 <_malloc_r+0x62>

080089c4 <memcpy>:
 80089c4:	440a      	add	r2, r1
 80089c6:	4291      	cmp	r1, r2
 80089c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80089cc:	d100      	bne.n	80089d0 <memcpy+0xc>
 80089ce:	4770      	bx	lr
 80089d0:	b510      	push	{r4, lr}
 80089d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089da:	4291      	cmp	r1, r2
 80089dc:	d1f9      	bne.n	80089d2 <memcpy+0xe>
 80089de:	bd10      	pop	{r4, pc}

080089e0 <__malloc_lock>:
 80089e0:	4801      	ldr	r0, [pc, #4]	; (80089e8 <__malloc_lock+0x8>)
 80089e2:	f7ff bdab 	b.w	800853c <__retarget_lock_acquire_recursive>
 80089e6:	bf00      	nop
 80089e8:	20000bcc 	.word	0x20000bcc

080089ec <__malloc_unlock>:
 80089ec:	4801      	ldr	r0, [pc, #4]	; (80089f4 <__malloc_unlock+0x8>)
 80089ee:	f7ff bda6 	b.w	800853e <__retarget_lock_release_recursive>
 80089f2:	bf00      	nop
 80089f4:	20000bcc 	.word	0x20000bcc

080089f8 <_Balloc>:
 80089f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80089fa:	b570      	push	{r4, r5, r6, lr}
 80089fc:	4605      	mov	r5, r0
 80089fe:	460c      	mov	r4, r1
 8008a00:	b17b      	cbz	r3, 8008a22 <_Balloc+0x2a>
 8008a02:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8008a04:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008a08:	b9a0      	cbnz	r0, 8008a34 <_Balloc+0x3c>
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	fa01 f604 	lsl.w	r6, r1, r4
 8008a10:	1d72      	adds	r2, r6, #5
 8008a12:	0092      	lsls	r2, r2, #2
 8008a14:	4628      	mov	r0, r5
 8008a16:	f000 fc61 	bl	80092dc <_calloc_r>
 8008a1a:	b148      	cbz	r0, 8008a30 <_Balloc+0x38>
 8008a1c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8008a20:	e00b      	b.n	8008a3a <_Balloc+0x42>
 8008a22:	2221      	movs	r2, #33	; 0x21
 8008a24:	2104      	movs	r1, #4
 8008a26:	f000 fc59 	bl	80092dc <_calloc_r>
 8008a2a:	64e8      	str	r0, [r5, #76]	; 0x4c
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d1e8      	bne.n	8008a02 <_Balloc+0xa>
 8008a30:	2000      	movs	r0, #0
 8008a32:	bd70      	pop	{r4, r5, r6, pc}
 8008a34:	6802      	ldr	r2, [r0, #0]
 8008a36:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a40:	e7f7      	b.n	8008a32 <_Balloc+0x3a>

08008a42 <_Bfree>:
 8008a42:	b131      	cbz	r1, 8008a52 <_Bfree+0x10>
 8008a44:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008a46:	684a      	ldr	r2, [r1, #4]
 8008a48:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008a4c:	6008      	str	r0, [r1, #0]
 8008a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008a52:	4770      	bx	lr

08008a54 <__multadd>:
 8008a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a58:	690e      	ldr	r6, [r1, #16]
 8008a5a:	4607      	mov	r7, r0
 8008a5c:	4698      	mov	r8, r3
 8008a5e:	460c      	mov	r4, r1
 8008a60:	f101 0014 	add.w	r0, r1, #20
 8008a64:	2300      	movs	r3, #0
 8008a66:	6805      	ldr	r5, [r0, #0]
 8008a68:	b2a9      	uxth	r1, r5
 8008a6a:	fb02 8101 	mla	r1, r2, r1, r8
 8008a6e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008a72:	0c2d      	lsrs	r5, r5, #16
 8008a74:	fb02 c505 	mla	r5, r2, r5, ip
 8008a78:	b289      	uxth	r1, r1
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008a80:	429e      	cmp	r6, r3
 8008a82:	f840 1b04 	str.w	r1, [r0], #4
 8008a86:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008a8a:	dcec      	bgt.n	8008a66 <__multadd+0x12>
 8008a8c:	f1b8 0f00 	cmp.w	r8, #0
 8008a90:	d022      	beq.n	8008ad8 <__multadd+0x84>
 8008a92:	68a3      	ldr	r3, [r4, #8]
 8008a94:	42b3      	cmp	r3, r6
 8008a96:	dc19      	bgt.n	8008acc <__multadd+0x78>
 8008a98:	6861      	ldr	r1, [r4, #4]
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	3101      	adds	r1, #1
 8008a9e:	f7ff ffab 	bl	80089f8 <_Balloc>
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	b928      	cbnz	r0, 8008ab2 <__multadd+0x5e>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <__multadd+0x8c>)
 8008aaa:	480e      	ldr	r0, [pc, #56]	; (8008ae4 <__multadd+0x90>)
 8008aac:	21b5      	movs	r1, #181	; 0xb5
 8008aae:	f000 fbf7 	bl	80092a0 <__assert_func>
 8008ab2:	6922      	ldr	r2, [r4, #16]
 8008ab4:	3202      	adds	r2, #2
 8008ab6:	f104 010c 	add.w	r1, r4, #12
 8008aba:	0092      	lsls	r2, r2, #2
 8008abc:	300c      	adds	r0, #12
 8008abe:	f7ff ff81 	bl	80089c4 <memcpy>
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	4638      	mov	r0, r7
 8008ac6:	f7ff ffbc 	bl	8008a42 <_Bfree>
 8008aca:	462c      	mov	r4, r5
 8008acc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008ad0:	3601      	adds	r6, #1
 8008ad2:	f8c3 8014 	str.w	r8, [r3, #20]
 8008ad6:	6126      	str	r6, [r4, #16]
 8008ad8:	4620      	mov	r0, r4
 8008ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ade:	bf00      	nop
 8008ae0:	0800acd9 	.word	0x0800acd9
 8008ae4:	0800ad49 	.word	0x0800ad49

08008ae8 <__hi0bits>:
 8008ae8:	0c03      	lsrs	r3, r0, #16
 8008aea:	041b      	lsls	r3, r3, #16
 8008aec:	b9d3      	cbnz	r3, 8008b24 <__hi0bits+0x3c>
 8008aee:	0400      	lsls	r0, r0, #16
 8008af0:	2310      	movs	r3, #16
 8008af2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008af6:	bf04      	itt	eq
 8008af8:	0200      	lsleq	r0, r0, #8
 8008afa:	3308      	addeq	r3, #8
 8008afc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b00:	bf04      	itt	eq
 8008b02:	0100      	lsleq	r0, r0, #4
 8008b04:	3304      	addeq	r3, #4
 8008b06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b0a:	bf04      	itt	eq
 8008b0c:	0080      	lsleq	r0, r0, #2
 8008b0e:	3302      	addeq	r3, #2
 8008b10:	2800      	cmp	r0, #0
 8008b12:	db05      	blt.n	8008b20 <__hi0bits+0x38>
 8008b14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b18:	f103 0301 	add.w	r3, r3, #1
 8008b1c:	bf08      	it	eq
 8008b1e:	2320      	moveq	r3, #32
 8008b20:	4618      	mov	r0, r3
 8008b22:	4770      	bx	lr
 8008b24:	2300      	movs	r3, #0
 8008b26:	e7e4      	b.n	8008af2 <__hi0bits+0xa>

08008b28 <__lo0bits>:
 8008b28:	6803      	ldr	r3, [r0, #0]
 8008b2a:	f013 0207 	ands.w	r2, r3, #7
 8008b2e:	4601      	mov	r1, r0
 8008b30:	d00b      	beq.n	8008b4a <__lo0bits+0x22>
 8008b32:	07da      	lsls	r2, r3, #31
 8008b34:	d424      	bmi.n	8008b80 <__lo0bits+0x58>
 8008b36:	0798      	lsls	r0, r3, #30
 8008b38:	bf49      	itett	mi
 8008b3a:	085b      	lsrmi	r3, r3, #1
 8008b3c:	089b      	lsrpl	r3, r3, #2
 8008b3e:	2001      	movmi	r0, #1
 8008b40:	600b      	strmi	r3, [r1, #0]
 8008b42:	bf5c      	itt	pl
 8008b44:	600b      	strpl	r3, [r1, #0]
 8008b46:	2002      	movpl	r0, #2
 8008b48:	4770      	bx	lr
 8008b4a:	b298      	uxth	r0, r3
 8008b4c:	b9b0      	cbnz	r0, 8008b7c <__lo0bits+0x54>
 8008b4e:	0c1b      	lsrs	r3, r3, #16
 8008b50:	2010      	movs	r0, #16
 8008b52:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b56:	bf04      	itt	eq
 8008b58:	0a1b      	lsreq	r3, r3, #8
 8008b5a:	3008      	addeq	r0, #8
 8008b5c:	071a      	lsls	r2, r3, #28
 8008b5e:	bf04      	itt	eq
 8008b60:	091b      	lsreq	r3, r3, #4
 8008b62:	3004      	addeq	r0, #4
 8008b64:	079a      	lsls	r2, r3, #30
 8008b66:	bf04      	itt	eq
 8008b68:	089b      	lsreq	r3, r3, #2
 8008b6a:	3002      	addeq	r0, #2
 8008b6c:	07da      	lsls	r2, r3, #31
 8008b6e:	d403      	bmi.n	8008b78 <__lo0bits+0x50>
 8008b70:	085b      	lsrs	r3, r3, #1
 8008b72:	f100 0001 	add.w	r0, r0, #1
 8008b76:	d005      	beq.n	8008b84 <__lo0bits+0x5c>
 8008b78:	600b      	str	r3, [r1, #0]
 8008b7a:	4770      	bx	lr
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	e7e8      	b.n	8008b52 <__lo0bits+0x2a>
 8008b80:	2000      	movs	r0, #0
 8008b82:	4770      	bx	lr
 8008b84:	2020      	movs	r0, #32
 8008b86:	4770      	bx	lr

08008b88 <__i2b>:
 8008b88:	b510      	push	{r4, lr}
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	2101      	movs	r1, #1
 8008b8e:	f7ff ff33 	bl	80089f8 <_Balloc>
 8008b92:	4602      	mov	r2, r0
 8008b94:	b928      	cbnz	r0, 8008ba2 <__i2b+0x1a>
 8008b96:	4b05      	ldr	r3, [pc, #20]	; (8008bac <__i2b+0x24>)
 8008b98:	4805      	ldr	r0, [pc, #20]	; (8008bb0 <__i2b+0x28>)
 8008b9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b9e:	f000 fb7f 	bl	80092a0 <__assert_func>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	6144      	str	r4, [r0, #20]
 8008ba6:	6103      	str	r3, [r0, #16]
 8008ba8:	bd10      	pop	{r4, pc}
 8008baa:	bf00      	nop
 8008bac:	0800acd9 	.word	0x0800acd9
 8008bb0:	0800ad49 	.word	0x0800ad49

08008bb4 <__multiply>:
 8008bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb8:	4614      	mov	r4, r2
 8008bba:	690a      	ldr	r2, [r1, #16]
 8008bbc:	6923      	ldr	r3, [r4, #16]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	bfb8      	it	lt
 8008bc2:	460b      	movlt	r3, r1
 8008bc4:	460d      	mov	r5, r1
 8008bc6:	bfbc      	itt	lt
 8008bc8:	4625      	movlt	r5, r4
 8008bca:	461c      	movlt	r4, r3
 8008bcc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008bd0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008bd4:	68ab      	ldr	r3, [r5, #8]
 8008bd6:	6869      	ldr	r1, [r5, #4]
 8008bd8:	eb0a 0709 	add.w	r7, sl, r9
 8008bdc:	42bb      	cmp	r3, r7
 8008bde:	b085      	sub	sp, #20
 8008be0:	bfb8      	it	lt
 8008be2:	3101      	addlt	r1, #1
 8008be4:	f7ff ff08 	bl	80089f8 <_Balloc>
 8008be8:	b930      	cbnz	r0, 8008bf8 <__multiply+0x44>
 8008bea:	4602      	mov	r2, r0
 8008bec:	4b42      	ldr	r3, [pc, #264]	; (8008cf8 <__multiply+0x144>)
 8008bee:	4843      	ldr	r0, [pc, #268]	; (8008cfc <__multiply+0x148>)
 8008bf0:	f240 115d 	movw	r1, #349	; 0x15d
 8008bf4:	f000 fb54 	bl	80092a0 <__assert_func>
 8008bf8:	f100 0614 	add.w	r6, r0, #20
 8008bfc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008c00:	4633      	mov	r3, r6
 8008c02:	2200      	movs	r2, #0
 8008c04:	4543      	cmp	r3, r8
 8008c06:	d31e      	bcc.n	8008c46 <__multiply+0x92>
 8008c08:	f105 0c14 	add.w	ip, r5, #20
 8008c0c:	f104 0314 	add.w	r3, r4, #20
 8008c10:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008c14:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008c18:	9202      	str	r2, [sp, #8]
 8008c1a:	ebac 0205 	sub.w	r2, ip, r5
 8008c1e:	3a15      	subs	r2, #21
 8008c20:	f022 0203 	bic.w	r2, r2, #3
 8008c24:	3204      	adds	r2, #4
 8008c26:	f105 0115 	add.w	r1, r5, #21
 8008c2a:	458c      	cmp	ip, r1
 8008c2c:	bf38      	it	cc
 8008c2e:	2204      	movcc	r2, #4
 8008c30:	9201      	str	r2, [sp, #4]
 8008c32:	9a02      	ldr	r2, [sp, #8]
 8008c34:	9303      	str	r3, [sp, #12]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d808      	bhi.n	8008c4c <__multiply+0x98>
 8008c3a:	2f00      	cmp	r7, #0
 8008c3c:	dc55      	bgt.n	8008cea <__multiply+0x136>
 8008c3e:	6107      	str	r7, [r0, #16]
 8008c40:	b005      	add	sp, #20
 8008c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c46:	f843 2b04 	str.w	r2, [r3], #4
 8008c4a:	e7db      	b.n	8008c04 <__multiply+0x50>
 8008c4c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c50:	f1ba 0f00 	cmp.w	sl, #0
 8008c54:	d020      	beq.n	8008c98 <__multiply+0xe4>
 8008c56:	f105 0e14 	add.w	lr, r5, #20
 8008c5a:	46b1      	mov	r9, r6
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008c62:	f8d9 b000 	ldr.w	fp, [r9]
 8008c66:	b2a1      	uxth	r1, r4
 8008c68:	fa1f fb8b 	uxth.w	fp, fp
 8008c6c:	fb0a b101 	mla	r1, sl, r1, fp
 8008c70:	4411      	add	r1, r2
 8008c72:	f8d9 2000 	ldr.w	r2, [r9]
 8008c76:	0c24      	lsrs	r4, r4, #16
 8008c78:	0c12      	lsrs	r2, r2, #16
 8008c7a:	fb0a 2404 	mla	r4, sl, r4, r2
 8008c7e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008c82:	b289      	uxth	r1, r1
 8008c84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008c88:	45f4      	cmp	ip, lr
 8008c8a:	f849 1b04 	str.w	r1, [r9], #4
 8008c8e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008c92:	d8e4      	bhi.n	8008c5e <__multiply+0xaa>
 8008c94:	9901      	ldr	r1, [sp, #4]
 8008c96:	5072      	str	r2, [r6, r1]
 8008c98:	9a03      	ldr	r2, [sp, #12]
 8008c9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	f1b9 0f00 	cmp.w	r9, #0
 8008ca4:	d01f      	beq.n	8008ce6 <__multiply+0x132>
 8008ca6:	6834      	ldr	r4, [r6, #0]
 8008ca8:	f105 0114 	add.w	r1, r5, #20
 8008cac:	46b6      	mov	lr, r6
 8008cae:	f04f 0a00 	mov.w	sl, #0
 8008cb2:	880a      	ldrh	r2, [r1, #0]
 8008cb4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008cb8:	fb09 b202 	mla	r2, r9, r2, fp
 8008cbc:	4492      	add	sl, r2
 8008cbe:	b2a4      	uxth	r4, r4
 8008cc0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008cc4:	f84e 4b04 	str.w	r4, [lr], #4
 8008cc8:	f851 4b04 	ldr.w	r4, [r1], #4
 8008ccc:	f8be 2000 	ldrh.w	r2, [lr]
 8008cd0:	0c24      	lsrs	r4, r4, #16
 8008cd2:	fb09 2404 	mla	r4, r9, r4, r2
 8008cd6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008cda:	458c      	cmp	ip, r1
 8008cdc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008ce0:	d8e7      	bhi.n	8008cb2 <__multiply+0xfe>
 8008ce2:	9a01      	ldr	r2, [sp, #4]
 8008ce4:	50b4      	str	r4, [r6, r2]
 8008ce6:	3604      	adds	r6, #4
 8008ce8:	e7a3      	b.n	8008c32 <__multiply+0x7e>
 8008cea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1a5      	bne.n	8008c3e <__multiply+0x8a>
 8008cf2:	3f01      	subs	r7, #1
 8008cf4:	e7a1      	b.n	8008c3a <__multiply+0x86>
 8008cf6:	bf00      	nop
 8008cf8:	0800acd9 	.word	0x0800acd9
 8008cfc:	0800ad49 	.word	0x0800ad49

08008d00 <__pow5mult>:
 8008d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d04:	4615      	mov	r5, r2
 8008d06:	f012 0203 	ands.w	r2, r2, #3
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	460f      	mov	r7, r1
 8008d0e:	d007      	beq.n	8008d20 <__pow5mult+0x20>
 8008d10:	4c1a      	ldr	r4, [pc, #104]	; (8008d7c <__pow5mult+0x7c>)
 8008d12:	3a01      	subs	r2, #1
 8008d14:	2300      	movs	r3, #0
 8008d16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d1a:	f7ff fe9b 	bl	8008a54 <__multadd>
 8008d1e:	4607      	mov	r7, r0
 8008d20:	10ad      	asrs	r5, r5, #2
 8008d22:	d027      	beq.n	8008d74 <__pow5mult+0x74>
 8008d24:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8008d26:	b944      	cbnz	r4, 8008d3a <__pow5mult+0x3a>
 8008d28:	f240 2171 	movw	r1, #625	; 0x271
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f7ff ff2b 	bl	8008b88 <__i2b>
 8008d32:	2300      	movs	r3, #0
 8008d34:	64b0      	str	r0, [r6, #72]	; 0x48
 8008d36:	4604      	mov	r4, r0
 8008d38:	6003      	str	r3, [r0, #0]
 8008d3a:	f04f 0900 	mov.w	r9, #0
 8008d3e:	07eb      	lsls	r3, r5, #31
 8008d40:	d50a      	bpl.n	8008d58 <__pow5mult+0x58>
 8008d42:	4639      	mov	r1, r7
 8008d44:	4622      	mov	r2, r4
 8008d46:	4630      	mov	r0, r6
 8008d48:	f7ff ff34 	bl	8008bb4 <__multiply>
 8008d4c:	4639      	mov	r1, r7
 8008d4e:	4680      	mov	r8, r0
 8008d50:	4630      	mov	r0, r6
 8008d52:	f7ff fe76 	bl	8008a42 <_Bfree>
 8008d56:	4647      	mov	r7, r8
 8008d58:	106d      	asrs	r5, r5, #1
 8008d5a:	d00b      	beq.n	8008d74 <__pow5mult+0x74>
 8008d5c:	6820      	ldr	r0, [r4, #0]
 8008d5e:	b938      	cbnz	r0, 8008d70 <__pow5mult+0x70>
 8008d60:	4622      	mov	r2, r4
 8008d62:	4621      	mov	r1, r4
 8008d64:	4630      	mov	r0, r6
 8008d66:	f7ff ff25 	bl	8008bb4 <__multiply>
 8008d6a:	6020      	str	r0, [r4, #0]
 8008d6c:	f8c0 9000 	str.w	r9, [r0]
 8008d70:	4604      	mov	r4, r0
 8008d72:	e7e4      	b.n	8008d3e <__pow5mult+0x3e>
 8008d74:	4638      	mov	r0, r7
 8008d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d7a:	bf00      	nop
 8008d7c:	0800aea0 	.word	0x0800aea0

08008d80 <__lshift>:
 8008d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d84:	460c      	mov	r4, r1
 8008d86:	6849      	ldr	r1, [r1, #4]
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d8e:	68a3      	ldr	r3, [r4, #8]
 8008d90:	4607      	mov	r7, r0
 8008d92:	4691      	mov	r9, r2
 8008d94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d98:	f108 0601 	add.w	r6, r8, #1
 8008d9c:	42b3      	cmp	r3, r6
 8008d9e:	db0b      	blt.n	8008db8 <__lshift+0x38>
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff fe29 	bl	80089f8 <_Balloc>
 8008da6:	4605      	mov	r5, r0
 8008da8:	b948      	cbnz	r0, 8008dbe <__lshift+0x3e>
 8008daa:	4602      	mov	r2, r0
 8008dac:	4b28      	ldr	r3, [pc, #160]	; (8008e50 <__lshift+0xd0>)
 8008dae:	4829      	ldr	r0, [pc, #164]	; (8008e54 <__lshift+0xd4>)
 8008db0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008db4:	f000 fa74 	bl	80092a0 <__assert_func>
 8008db8:	3101      	adds	r1, #1
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	e7ee      	b.n	8008d9c <__lshift+0x1c>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f100 0114 	add.w	r1, r0, #20
 8008dc4:	f100 0210 	add.w	r2, r0, #16
 8008dc8:	4618      	mov	r0, r3
 8008dca:	4553      	cmp	r3, sl
 8008dcc:	db33      	blt.n	8008e36 <__lshift+0xb6>
 8008dce:	6920      	ldr	r0, [r4, #16]
 8008dd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008dd4:	f104 0314 	add.w	r3, r4, #20
 8008dd8:	f019 091f 	ands.w	r9, r9, #31
 8008ddc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008de0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008de4:	d02b      	beq.n	8008e3e <__lshift+0xbe>
 8008de6:	f1c9 0e20 	rsb	lr, r9, #32
 8008dea:	468a      	mov	sl, r1
 8008dec:	2200      	movs	r2, #0
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	fa00 f009 	lsl.w	r0, r0, r9
 8008df4:	4302      	orrs	r2, r0
 8008df6:	f84a 2b04 	str.w	r2, [sl], #4
 8008dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dfe:	459c      	cmp	ip, r3
 8008e00:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e04:	d8f3      	bhi.n	8008dee <__lshift+0x6e>
 8008e06:	ebac 0304 	sub.w	r3, ip, r4
 8008e0a:	3b15      	subs	r3, #21
 8008e0c:	f023 0303 	bic.w	r3, r3, #3
 8008e10:	3304      	adds	r3, #4
 8008e12:	f104 0015 	add.w	r0, r4, #21
 8008e16:	4584      	cmp	ip, r0
 8008e18:	bf38      	it	cc
 8008e1a:	2304      	movcc	r3, #4
 8008e1c:	50ca      	str	r2, [r1, r3]
 8008e1e:	b10a      	cbz	r2, 8008e24 <__lshift+0xa4>
 8008e20:	f108 0602 	add.w	r6, r8, #2
 8008e24:	3e01      	subs	r6, #1
 8008e26:	4638      	mov	r0, r7
 8008e28:	612e      	str	r6, [r5, #16]
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	f7ff fe09 	bl	8008a42 <_Bfree>
 8008e30:	4628      	mov	r0, r5
 8008e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e36:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	e7c5      	b.n	8008dca <__lshift+0x4a>
 8008e3e:	3904      	subs	r1, #4
 8008e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e44:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e48:	459c      	cmp	ip, r3
 8008e4a:	d8f9      	bhi.n	8008e40 <__lshift+0xc0>
 8008e4c:	e7ea      	b.n	8008e24 <__lshift+0xa4>
 8008e4e:	bf00      	nop
 8008e50:	0800acd9 	.word	0x0800acd9
 8008e54:	0800ad49 	.word	0x0800ad49

08008e58 <__mcmp>:
 8008e58:	b530      	push	{r4, r5, lr}
 8008e5a:	6902      	ldr	r2, [r0, #16]
 8008e5c:	690c      	ldr	r4, [r1, #16]
 8008e5e:	1b12      	subs	r2, r2, r4
 8008e60:	d10e      	bne.n	8008e80 <__mcmp+0x28>
 8008e62:	f100 0314 	add.w	r3, r0, #20
 8008e66:	3114      	adds	r1, #20
 8008e68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e78:	42a5      	cmp	r5, r4
 8008e7a:	d003      	beq.n	8008e84 <__mcmp+0x2c>
 8008e7c:	d305      	bcc.n	8008e8a <__mcmp+0x32>
 8008e7e:	2201      	movs	r2, #1
 8008e80:	4610      	mov	r0, r2
 8008e82:	bd30      	pop	{r4, r5, pc}
 8008e84:	4283      	cmp	r3, r0
 8008e86:	d3f3      	bcc.n	8008e70 <__mcmp+0x18>
 8008e88:	e7fa      	b.n	8008e80 <__mcmp+0x28>
 8008e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e8e:	e7f7      	b.n	8008e80 <__mcmp+0x28>

08008e90 <__mdiff>:
 8008e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	460c      	mov	r4, r1
 8008e96:	4606      	mov	r6, r0
 8008e98:	4611      	mov	r1, r2
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	4617      	mov	r7, r2
 8008e9e:	f7ff ffdb 	bl	8008e58 <__mcmp>
 8008ea2:	1e05      	subs	r5, r0, #0
 8008ea4:	d110      	bne.n	8008ec8 <__mdiff+0x38>
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f7ff fda5 	bl	80089f8 <_Balloc>
 8008eae:	b930      	cbnz	r0, 8008ebe <__mdiff+0x2e>
 8008eb0:	4b39      	ldr	r3, [pc, #228]	; (8008f98 <__mdiff+0x108>)
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	f240 2132 	movw	r1, #562	; 0x232
 8008eb8:	4838      	ldr	r0, [pc, #224]	; (8008f9c <__mdiff+0x10c>)
 8008eba:	f000 f9f1 	bl	80092a0 <__assert_func>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec8:	bfa4      	itt	ge
 8008eca:	463b      	movge	r3, r7
 8008ecc:	4627      	movge	r7, r4
 8008ece:	4630      	mov	r0, r6
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	bfa6      	itte	ge
 8008ed4:	461c      	movge	r4, r3
 8008ed6:	2500      	movge	r5, #0
 8008ed8:	2501      	movlt	r5, #1
 8008eda:	f7ff fd8d 	bl	80089f8 <_Balloc>
 8008ede:	b920      	cbnz	r0, 8008eea <__mdiff+0x5a>
 8008ee0:	4b2d      	ldr	r3, [pc, #180]	; (8008f98 <__mdiff+0x108>)
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ee8:	e7e6      	b.n	8008eb8 <__mdiff+0x28>
 8008eea:	693e      	ldr	r6, [r7, #16]
 8008eec:	60c5      	str	r5, [r0, #12]
 8008eee:	6925      	ldr	r5, [r4, #16]
 8008ef0:	f107 0114 	add.w	r1, r7, #20
 8008ef4:	f104 0914 	add.w	r9, r4, #20
 8008ef8:	f100 0e14 	add.w	lr, r0, #20
 8008efc:	f107 0210 	add.w	r2, r7, #16
 8008f00:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008f04:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008f08:	46f2      	mov	sl, lr
 8008f0a:	2700      	movs	r7, #0
 8008f0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f14:	fa1f f883 	uxth.w	r8, r3
 8008f18:	fa17 f78b 	uxtah	r7, r7, fp
 8008f1c:	0c1b      	lsrs	r3, r3, #16
 8008f1e:	eba7 0808 	sub.w	r8, r7, r8
 8008f22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f2a:	fa1f f888 	uxth.w	r8, r8
 8008f2e:	141f      	asrs	r7, r3, #16
 8008f30:	454d      	cmp	r5, r9
 8008f32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f36:	f84a 3b04 	str.w	r3, [sl], #4
 8008f3a:	d8e7      	bhi.n	8008f0c <__mdiff+0x7c>
 8008f3c:	1b2b      	subs	r3, r5, r4
 8008f3e:	3b15      	subs	r3, #21
 8008f40:	f023 0303 	bic.w	r3, r3, #3
 8008f44:	3304      	adds	r3, #4
 8008f46:	3415      	adds	r4, #21
 8008f48:	42a5      	cmp	r5, r4
 8008f4a:	bf38      	it	cc
 8008f4c:	2304      	movcc	r3, #4
 8008f4e:	4419      	add	r1, r3
 8008f50:	4473      	add	r3, lr
 8008f52:	469e      	mov	lr, r3
 8008f54:	460d      	mov	r5, r1
 8008f56:	4565      	cmp	r5, ip
 8008f58:	d30e      	bcc.n	8008f78 <__mdiff+0xe8>
 8008f5a:	f10c 0203 	add.w	r2, ip, #3
 8008f5e:	1a52      	subs	r2, r2, r1
 8008f60:	f022 0203 	bic.w	r2, r2, #3
 8008f64:	3903      	subs	r1, #3
 8008f66:	458c      	cmp	ip, r1
 8008f68:	bf38      	it	cc
 8008f6a:	2200      	movcc	r2, #0
 8008f6c:	441a      	add	r2, r3
 8008f6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f72:	b17b      	cbz	r3, 8008f94 <__mdiff+0x104>
 8008f74:	6106      	str	r6, [r0, #16]
 8008f76:	e7a5      	b.n	8008ec4 <__mdiff+0x34>
 8008f78:	f855 8b04 	ldr.w	r8, [r5], #4
 8008f7c:	fa17 f488 	uxtah	r4, r7, r8
 8008f80:	1422      	asrs	r2, r4, #16
 8008f82:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008f86:	b2a4      	uxth	r4, r4
 8008f88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008f8c:	f84e 4b04 	str.w	r4, [lr], #4
 8008f90:	1417      	asrs	r7, r2, #16
 8008f92:	e7e0      	b.n	8008f56 <__mdiff+0xc6>
 8008f94:	3e01      	subs	r6, #1
 8008f96:	e7ea      	b.n	8008f6e <__mdiff+0xde>
 8008f98:	0800acd9 	.word	0x0800acd9
 8008f9c:	0800ad49 	.word	0x0800ad49

08008fa0 <__d2b>:
 8008fa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fa4:	4689      	mov	r9, r1
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	ec57 6b10 	vmov	r6, r7, d0
 8008fac:	4690      	mov	r8, r2
 8008fae:	f7ff fd23 	bl	80089f8 <_Balloc>
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	b930      	cbnz	r0, 8008fc4 <__d2b+0x24>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	4b25      	ldr	r3, [pc, #148]	; (8009050 <__d2b+0xb0>)
 8008fba:	4826      	ldr	r0, [pc, #152]	; (8009054 <__d2b+0xb4>)
 8008fbc:	f240 310a 	movw	r1, #778	; 0x30a
 8008fc0:	f000 f96e 	bl	80092a0 <__assert_func>
 8008fc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008fc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fcc:	bb35      	cbnz	r5, 800901c <__d2b+0x7c>
 8008fce:	2e00      	cmp	r6, #0
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	d028      	beq.n	8009026 <__d2b+0x86>
 8008fd4:	4668      	mov	r0, sp
 8008fd6:	9600      	str	r6, [sp, #0]
 8008fd8:	f7ff fda6 	bl	8008b28 <__lo0bits>
 8008fdc:	9900      	ldr	r1, [sp, #0]
 8008fde:	b300      	cbz	r0, 8009022 <__d2b+0x82>
 8008fe0:	9a01      	ldr	r2, [sp, #4]
 8008fe2:	f1c0 0320 	rsb	r3, r0, #32
 8008fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fea:	430b      	orrs	r3, r1
 8008fec:	40c2      	lsrs	r2, r0
 8008fee:	6163      	str	r3, [r4, #20]
 8008ff0:	9201      	str	r2, [sp, #4]
 8008ff2:	9b01      	ldr	r3, [sp, #4]
 8008ff4:	61a3      	str	r3, [r4, #24]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	bf14      	ite	ne
 8008ffa:	2202      	movne	r2, #2
 8008ffc:	2201      	moveq	r2, #1
 8008ffe:	6122      	str	r2, [r4, #16]
 8009000:	b1d5      	cbz	r5, 8009038 <__d2b+0x98>
 8009002:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009006:	4405      	add	r5, r0
 8009008:	f8c9 5000 	str.w	r5, [r9]
 800900c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009010:	f8c8 0000 	str.w	r0, [r8]
 8009014:	4620      	mov	r0, r4
 8009016:	b003      	add	sp, #12
 8009018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800901c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009020:	e7d5      	b.n	8008fce <__d2b+0x2e>
 8009022:	6161      	str	r1, [r4, #20]
 8009024:	e7e5      	b.n	8008ff2 <__d2b+0x52>
 8009026:	a801      	add	r0, sp, #4
 8009028:	f7ff fd7e 	bl	8008b28 <__lo0bits>
 800902c:	9b01      	ldr	r3, [sp, #4]
 800902e:	6163      	str	r3, [r4, #20]
 8009030:	2201      	movs	r2, #1
 8009032:	6122      	str	r2, [r4, #16]
 8009034:	3020      	adds	r0, #32
 8009036:	e7e3      	b.n	8009000 <__d2b+0x60>
 8009038:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800903c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009040:	f8c9 0000 	str.w	r0, [r9]
 8009044:	6918      	ldr	r0, [r3, #16]
 8009046:	f7ff fd4f 	bl	8008ae8 <__hi0bits>
 800904a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800904e:	e7df      	b.n	8009010 <__d2b+0x70>
 8009050:	0800acd9 	.word	0x0800acd9
 8009054:	0800ad49 	.word	0x0800ad49

08009058 <frexp>:
 8009058:	b570      	push	{r4, r5, r6, lr}
 800905a:	2100      	movs	r1, #0
 800905c:	ec55 4b10 	vmov	r4, r5, d0
 8009060:	6001      	str	r1, [r0, #0]
 8009062:	4916      	ldr	r1, [pc, #88]	; (80090bc <frexp+0x64>)
 8009064:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8009068:	428a      	cmp	r2, r1
 800906a:	4606      	mov	r6, r0
 800906c:	462b      	mov	r3, r5
 800906e:	dc22      	bgt.n	80090b6 <frexp+0x5e>
 8009070:	ee10 1a10 	vmov	r1, s0
 8009074:	4311      	orrs	r1, r2
 8009076:	d01e      	beq.n	80090b6 <frexp+0x5e>
 8009078:	4911      	ldr	r1, [pc, #68]	; (80090c0 <frexp+0x68>)
 800907a:	4029      	ands	r1, r5
 800907c:	b969      	cbnz	r1, 800909a <frexp+0x42>
 800907e:	4b11      	ldr	r3, [pc, #68]	; (80090c4 <frexp+0x6c>)
 8009080:	2200      	movs	r2, #0
 8009082:	ee10 0a10 	vmov	r0, s0
 8009086:	4629      	mov	r1, r5
 8009088:	f7f7 fab6 	bl	80005f8 <__aeabi_dmul>
 800908c:	460b      	mov	r3, r1
 800908e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009092:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8009096:	4604      	mov	r4, r0
 8009098:	6031      	str	r1, [r6, #0]
 800909a:	6831      	ldr	r1, [r6, #0]
 800909c:	1512      	asrs	r2, r2, #20
 800909e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80090a2:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 80090a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80090aa:	440a      	add	r2, r1
 80090ac:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80090b0:	6032      	str	r2, [r6, #0]
 80090b2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80090b6:	ec45 4b10 	vmov	d0, r4, r5
 80090ba:	bd70      	pop	{r4, r5, r6, pc}
 80090bc:	7fefffff 	.word	0x7fefffff
 80090c0:	7ff00000 	.word	0x7ff00000
 80090c4:	43500000 	.word	0x43500000

080090c8 <_sbrk_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4d06      	ldr	r5, [pc, #24]	; (80090e4 <_sbrk_r+0x1c>)
 80090cc:	2300      	movs	r3, #0
 80090ce:	4604      	mov	r4, r0
 80090d0:	4608      	mov	r0, r1
 80090d2:	602b      	str	r3, [r5, #0]
 80090d4:	f7f9 f8ca 	bl	800226c <_sbrk>
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	d102      	bne.n	80090e2 <_sbrk_r+0x1a>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	b103      	cbz	r3, 80090e2 <_sbrk_r+0x1a>
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	20000bd4 	.word	0x20000bd4

080090e8 <strncpy>:
 80090e8:	b510      	push	{r4, lr}
 80090ea:	3901      	subs	r1, #1
 80090ec:	4603      	mov	r3, r0
 80090ee:	b132      	cbz	r2, 80090fe <strncpy+0x16>
 80090f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80090f4:	f803 4b01 	strb.w	r4, [r3], #1
 80090f8:	3a01      	subs	r2, #1
 80090fa:	2c00      	cmp	r4, #0
 80090fc:	d1f7      	bne.n	80090ee <strncpy+0x6>
 80090fe:	441a      	add	r2, r3
 8009100:	2100      	movs	r1, #0
 8009102:	4293      	cmp	r3, r2
 8009104:	d100      	bne.n	8009108 <strncpy+0x20>
 8009106:	bd10      	pop	{r4, pc}
 8009108:	f803 1b01 	strb.w	r1, [r3], #1
 800910c:	e7f9      	b.n	8009102 <strncpy+0x1a>

0800910e <__ssprint_r>:
 800910e:	6893      	ldr	r3, [r2, #8]
 8009110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	4680      	mov	r8, r0
 8009116:	460c      	mov	r4, r1
 8009118:	4617      	mov	r7, r2
 800911a:	2b00      	cmp	r3, #0
 800911c:	d061      	beq.n	80091e2 <__ssprint_r+0xd4>
 800911e:	2300      	movs	r3, #0
 8009120:	f8d2 a000 	ldr.w	sl, [r2]
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	469b      	mov	fp, r3
 8009128:	f1bb 0f00 	cmp.w	fp, #0
 800912c:	d02b      	beq.n	8009186 <__ssprint_r+0x78>
 800912e:	68a6      	ldr	r6, [r4, #8]
 8009130:	45b3      	cmp	fp, r6
 8009132:	d342      	bcc.n	80091ba <__ssprint_r+0xac>
 8009134:	89a2      	ldrh	r2, [r4, #12]
 8009136:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800913a:	d03e      	beq.n	80091ba <__ssprint_r+0xac>
 800913c:	6825      	ldr	r5, [r4, #0]
 800913e:	6921      	ldr	r1, [r4, #16]
 8009140:	eba5 0901 	sub.w	r9, r5, r1
 8009144:	6965      	ldr	r5, [r4, #20]
 8009146:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800914a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800914e:	f109 0001 	add.w	r0, r9, #1
 8009152:	106d      	asrs	r5, r5, #1
 8009154:	4458      	add	r0, fp
 8009156:	4285      	cmp	r5, r0
 8009158:	bf38      	it	cc
 800915a:	4605      	movcc	r5, r0
 800915c:	0553      	lsls	r3, r2, #21
 800915e:	d545      	bpl.n	80091ec <__ssprint_r+0xde>
 8009160:	4629      	mov	r1, r5
 8009162:	4640      	mov	r0, r8
 8009164:	f7ff f9ec 	bl	8008540 <_malloc_r>
 8009168:	4606      	mov	r6, r0
 800916a:	b9a0      	cbnz	r0, 8009196 <__ssprint_r+0x88>
 800916c:	230c      	movs	r3, #12
 800916e:	f8c8 3000 	str.w	r3, [r8]
 8009172:	89a3      	ldrh	r3, [r4, #12]
 8009174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009178:	81a3      	strh	r3, [r4, #12]
 800917a:	2300      	movs	r3, #0
 800917c:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	e02f      	b.n	80091e6 <__ssprint_r+0xd8>
 8009186:	f8da 3000 	ldr.w	r3, [sl]
 800918a:	f8da b004 	ldr.w	fp, [sl, #4]
 800918e:	9301      	str	r3, [sp, #4]
 8009190:	f10a 0a08 	add.w	sl, sl, #8
 8009194:	e7c8      	b.n	8009128 <__ssprint_r+0x1a>
 8009196:	464a      	mov	r2, r9
 8009198:	6921      	ldr	r1, [r4, #16]
 800919a:	f7ff fc13 	bl	80089c4 <memcpy>
 800919e:	89a2      	ldrh	r2, [r4, #12]
 80091a0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80091a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80091a8:	81a2      	strh	r2, [r4, #12]
 80091aa:	6126      	str	r6, [r4, #16]
 80091ac:	6165      	str	r5, [r4, #20]
 80091ae:	444e      	add	r6, r9
 80091b0:	eba5 0509 	sub.w	r5, r5, r9
 80091b4:	6026      	str	r6, [r4, #0]
 80091b6:	60a5      	str	r5, [r4, #8]
 80091b8:	465e      	mov	r6, fp
 80091ba:	455e      	cmp	r6, fp
 80091bc:	bf28      	it	cs
 80091be:	465e      	movcs	r6, fp
 80091c0:	4632      	mov	r2, r6
 80091c2:	9901      	ldr	r1, [sp, #4]
 80091c4:	6820      	ldr	r0, [r4, #0]
 80091c6:	f000 f8e1 	bl	800938c <memmove>
 80091ca:	68a2      	ldr	r2, [r4, #8]
 80091cc:	1b92      	subs	r2, r2, r6
 80091ce:	60a2      	str	r2, [r4, #8]
 80091d0:	6822      	ldr	r2, [r4, #0]
 80091d2:	4432      	add	r2, r6
 80091d4:	6022      	str	r2, [r4, #0]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	eba2 030b 	sub.w	r3, r2, fp
 80091dc:	60bb      	str	r3, [r7, #8]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1d1      	bne.n	8009186 <__ssprint_r+0x78>
 80091e2:	2000      	movs	r0, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	b003      	add	sp, #12
 80091e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ec:	462a      	mov	r2, r5
 80091ee:	4640      	mov	r0, r8
 80091f0:	f000 f8e6 	bl	80093c0 <_realloc_r>
 80091f4:	4606      	mov	r6, r0
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d1d7      	bne.n	80091aa <__ssprint_r+0x9c>
 80091fa:	6921      	ldr	r1, [r4, #16]
 80091fc:	4640      	mov	r0, r8
 80091fe:	f7ff f8d7 	bl	80083b0 <_free_r>
 8009202:	e7b3      	b.n	800916c <__ssprint_r+0x5e>

08009204 <sysconf>:
 8009204:	2808      	cmp	r0, #8
 8009206:	b508      	push	{r3, lr}
 8009208:	d006      	beq.n	8009218 <sysconf+0x14>
 800920a:	f7fc ffb1 	bl	8006170 <__errno>
 800920e:	2316      	movs	r3, #22
 8009210:	6003      	str	r3, [r0, #0]
 8009212:	f04f 30ff 	mov.w	r0, #4294967295
 8009216:	bd08      	pop	{r3, pc}
 8009218:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800921c:	e7fb      	b.n	8009216 <sysconf+0x12>
	...

08009220 <__register_exitproc>:
 8009220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009224:	4d1c      	ldr	r5, [pc, #112]	; (8009298 <__register_exitproc+0x78>)
 8009226:	4606      	mov	r6, r0
 8009228:	6828      	ldr	r0, [r5, #0]
 800922a:	4698      	mov	r8, r3
 800922c:	460f      	mov	r7, r1
 800922e:	4691      	mov	r9, r2
 8009230:	f7ff f984 	bl	800853c <__retarget_lock_acquire_recursive>
 8009234:	4b19      	ldr	r3, [pc, #100]	; (800929c <__register_exitproc+0x7c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800923c:	4628      	mov	r0, r5
 800923e:	b91c      	cbnz	r4, 8009248 <__register_exitproc+0x28>
 8009240:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8009244:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8009248:	6865      	ldr	r5, [r4, #4]
 800924a:	6800      	ldr	r0, [r0, #0]
 800924c:	2d1f      	cmp	r5, #31
 800924e:	dd05      	ble.n	800925c <__register_exitproc+0x3c>
 8009250:	f7ff f975 	bl	800853e <__retarget_lock_release_recursive>
 8009254:	f04f 30ff 	mov.w	r0, #4294967295
 8009258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800925c:	b19e      	cbz	r6, 8009286 <__register_exitproc+0x66>
 800925e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8009262:	2201      	movs	r2, #1
 8009264:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8009268:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800926c:	40aa      	lsls	r2, r5
 800926e:	4313      	orrs	r3, r2
 8009270:	2e02      	cmp	r6, #2
 8009272:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8009276:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800927a:	bf02      	ittt	eq
 800927c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8009280:	431a      	orreq	r2, r3
 8009282:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8009286:	1c6b      	adds	r3, r5, #1
 8009288:	3502      	adds	r5, #2
 800928a:	6063      	str	r3, [r4, #4]
 800928c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8009290:	f7ff f955 	bl	800853e <__retarget_lock_release_recursive>
 8009294:	2000      	movs	r0, #0
 8009296:	e7df      	b.n	8009258 <__register_exitproc+0x38>
 8009298:	20000438 	.word	0x20000438
 800929c:	0800ac74 	.word	0x0800ac74

080092a0 <__assert_func>:
 80092a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092a2:	4614      	mov	r4, r2
 80092a4:	461a      	mov	r2, r3
 80092a6:	4b09      	ldr	r3, [pc, #36]	; (80092cc <__assert_func+0x2c>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4605      	mov	r5, r0
 80092ac:	68d8      	ldr	r0, [r3, #12]
 80092ae:	b14c      	cbz	r4, 80092c4 <__assert_func+0x24>
 80092b0:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <__assert_func+0x30>)
 80092b2:	9100      	str	r1, [sp, #0]
 80092b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092b8:	4906      	ldr	r1, [pc, #24]	; (80092d4 <__assert_func+0x34>)
 80092ba:	462b      	mov	r3, r5
 80092bc:	f000 f83c 	bl	8009338 <fiprintf>
 80092c0:	f000 ff84 	bl	800a1cc <abort>
 80092c4:	4b04      	ldr	r3, [pc, #16]	; (80092d8 <__assert_func+0x38>)
 80092c6:	461c      	mov	r4, r3
 80092c8:	e7f3      	b.n	80092b2 <__assert_func+0x12>
 80092ca:	bf00      	nop
 80092cc:	2000000c 	.word	0x2000000c
 80092d0:	0800aeac 	.word	0x0800aeac
 80092d4:	0800aeb9 	.word	0x0800aeb9
 80092d8:	0800aee7 	.word	0x0800aee7

080092dc <_calloc_r>:
 80092dc:	b510      	push	{r4, lr}
 80092de:	4351      	muls	r1, r2
 80092e0:	f7ff f92e 	bl	8008540 <_malloc_r>
 80092e4:	4604      	mov	r4, r0
 80092e6:	b198      	cbz	r0, 8009310 <_calloc_r+0x34>
 80092e8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80092ec:	f022 0203 	bic.w	r2, r2, #3
 80092f0:	3a04      	subs	r2, #4
 80092f2:	2a24      	cmp	r2, #36	; 0x24
 80092f4:	d81b      	bhi.n	800932e <_calloc_r+0x52>
 80092f6:	2a13      	cmp	r2, #19
 80092f8:	d917      	bls.n	800932a <_calloc_r+0x4e>
 80092fa:	2100      	movs	r1, #0
 80092fc:	2a1b      	cmp	r2, #27
 80092fe:	e9c0 1100 	strd	r1, r1, [r0]
 8009302:	d807      	bhi.n	8009314 <_calloc_r+0x38>
 8009304:	f100 0308 	add.w	r3, r0, #8
 8009308:	2200      	movs	r2, #0
 800930a:	e9c3 2200 	strd	r2, r2, [r3]
 800930e:	609a      	str	r2, [r3, #8]
 8009310:	4620      	mov	r0, r4
 8009312:	bd10      	pop	{r4, pc}
 8009314:	2a24      	cmp	r2, #36	; 0x24
 8009316:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800931a:	bf11      	iteee	ne
 800931c:	f100 0310 	addne.w	r3, r0, #16
 8009320:	6101      	streq	r1, [r0, #16]
 8009322:	f100 0318 	addeq.w	r3, r0, #24
 8009326:	6141      	streq	r1, [r0, #20]
 8009328:	e7ee      	b.n	8009308 <_calloc_r+0x2c>
 800932a:	4603      	mov	r3, r0
 800932c:	e7ec      	b.n	8009308 <_calloc_r+0x2c>
 800932e:	2100      	movs	r1, #0
 8009330:	f7fc ff48 	bl	80061c4 <memset>
 8009334:	e7ec      	b.n	8009310 <_calloc_r+0x34>
	...

08009338 <fiprintf>:
 8009338:	b40e      	push	{r1, r2, r3}
 800933a:	b503      	push	{r0, r1, lr}
 800933c:	4601      	mov	r1, r0
 800933e:	ab03      	add	r3, sp, #12
 8009340:	4805      	ldr	r0, [pc, #20]	; (8009358 <fiprintf+0x20>)
 8009342:	f853 2b04 	ldr.w	r2, [r3], #4
 8009346:	6800      	ldr	r0, [r0, #0]
 8009348:	9301      	str	r3, [sp, #4]
 800934a:	f000 fa11 	bl	8009770 <_vfiprintf_r>
 800934e:	b002      	add	sp, #8
 8009350:	f85d eb04 	ldr.w	lr, [sp], #4
 8009354:	b003      	add	sp, #12
 8009356:	4770      	bx	lr
 8009358:	2000000c 	.word	0x2000000c

0800935c <__locale_mb_cur_max>:
 800935c:	4b01      	ldr	r3, [pc, #4]	; (8009364 <__locale_mb_cur_max+0x8>)
 800935e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8009362:	4770      	bx	lr
 8009364:	2000084c 	.word	0x2000084c

08009368 <__ascii_mbtowc>:
 8009368:	b082      	sub	sp, #8
 800936a:	b901      	cbnz	r1, 800936e <__ascii_mbtowc+0x6>
 800936c:	a901      	add	r1, sp, #4
 800936e:	b142      	cbz	r2, 8009382 <__ascii_mbtowc+0x1a>
 8009370:	b14b      	cbz	r3, 8009386 <__ascii_mbtowc+0x1e>
 8009372:	7813      	ldrb	r3, [r2, #0]
 8009374:	600b      	str	r3, [r1, #0]
 8009376:	7812      	ldrb	r2, [r2, #0]
 8009378:	1e10      	subs	r0, r2, #0
 800937a:	bf18      	it	ne
 800937c:	2001      	movne	r0, #1
 800937e:	b002      	add	sp, #8
 8009380:	4770      	bx	lr
 8009382:	4610      	mov	r0, r2
 8009384:	e7fb      	b.n	800937e <__ascii_mbtowc+0x16>
 8009386:	f06f 0001 	mvn.w	r0, #1
 800938a:	e7f8      	b.n	800937e <__ascii_mbtowc+0x16>

0800938c <memmove>:
 800938c:	4288      	cmp	r0, r1
 800938e:	b510      	push	{r4, lr}
 8009390:	eb01 0402 	add.w	r4, r1, r2
 8009394:	d902      	bls.n	800939c <memmove+0x10>
 8009396:	4284      	cmp	r4, r0
 8009398:	4623      	mov	r3, r4
 800939a:	d807      	bhi.n	80093ac <memmove+0x20>
 800939c:	1e43      	subs	r3, r0, #1
 800939e:	42a1      	cmp	r1, r4
 80093a0:	d008      	beq.n	80093b4 <memmove+0x28>
 80093a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093aa:	e7f8      	b.n	800939e <memmove+0x12>
 80093ac:	4402      	add	r2, r0
 80093ae:	4601      	mov	r1, r0
 80093b0:	428a      	cmp	r2, r1
 80093b2:	d100      	bne.n	80093b6 <memmove+0x2a>
 80093b4:	bd10      	pop	{r4, pc}
 80093b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093be:	e7f7      	b.n	80093b0 <memmove+0x24>

080093c0 <_realloc_r>:
 80093c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c4:	4681      	mov	r9, r0
 80093c6:	460c      	mov	r4, r1
 80093c8:	b929      	cbnz	r1, 80093d6 <_realloc_r+0x16>
 80093ca:	4611      	mov	r1, r2
 80093cc:	b003      	add	sp, #12
 80093ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d2:	f7ff b8b5 	b.w	8008540 <_malloc_r>
 80093d6:	9201      	str	r2, [sp, #4]
 80093d8:	f7ff fb02 	bl	80089e0 <__malloc_lock>
 80093dc:	9a01      	ldr	r2, [sp, #4]
 80093de:	f102 080b 	add.w	r8, r2, #11
 80093e2:	f1b8 0f16 	cmp.w	r8, #22
 80093e6:	d90b      	bls.n	8009400 <_realloc_r+0x40>
 80093e8:	f038 0807 	bics.w	r8, r8, #7
 80093ec:	d50a      	bpl.n	8009404 <_realloc_r+0x44>
 80093ee:	230c      	movs	r3, #12
 80093f0:	f8c9 3000 	str.w	r3, [r9]
 80093f4:	f04f 0b00 	mov.w	fp, #0
 80093f8:	4658      	mov	r0, fp
 80093fa:	b003      	add	sp, #12
 80093fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009400:	f04f 0810 	mov.w	r8, #16
 8009404:	4590      	cmp	r8, r2
 8009406:	d3f2      	bcc.n	80093ee <_realloc_r+0x2e>
 8009408:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800940c:	f025 0603 	bic.w	r6, r5, #3
 8009410:	45b0      	cmp	r8, r6
 8009412:	f1a4 0a08 	sub.w	sl, r4, #8
 8009416:	f340 8170 	ble.w	80096fa <_realloc_r+0x33a>
 800941a:	48a9      	ldr	r0, [pc, #676]	; (80096c0 <_realloc_r+0x300>)
 800941c:	9001      	str	r0, [sp, #4]
 800941e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8009422:	eb0a 0306 	add.w	r3, sl, r6
 8009426:	459c      	cmp	ip, r3
 8009428:	6859      	ldr	r1, [r3, #4]
 800942a:	d005      	beq.n	8009438 <_realloc_r+0x78>
 800942c:	f021 0001 	bic.w	r0, r1, #1
 8009430:	4418      	add	r0, r3
 8009432:	6840      	ldr	r0, [r0, #4]
 8009434:	07c7      	lsls	r7, r0, #31
 8009436:	d427      	bmi.n	8009488 <_realloc_r+0xc8>
 8009438:	f021 0103 	bic.w	r1, r1, #3
 800943c:	459c      	cmp	ip, r3
 800943e:	eb06 0701 	add.w	r7, r6, r1
 8009442:	d119      	bne.n	8009478 <_realloc_r+0xb8>
 8009444:	f108 0010 	add.w	r0, r8, #16
 8009448:	42b8      	cmp	r0, r7
 800944a:	dc1f      	bgt.n	800948c <_realloc_r+0xcc>
 800944c:	eb0a 0308 	add.w	r3, sl, r8
 8009450:	9a01      	ldr	r2, [sp, #4]
 8009452:	eba7 0708 	sub.w	r7, r7, r8
 8009456:	f047 0701 	orr.w	r7, r7, #1
 800945a:	6093      	str	r3, [r2, #8]
 800945c:	605f      	str	r7, [r3, #4]
 800945e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	ea43 0308 	orr.w	r3, r3, r8
 800946a:	f844 3c04 	str.w	r3, [r4, #-4]
 800946e:	4648      	mov	r0, r9
 8009470:	f7ff fabc 	bl	80089ec <__malloc_unlock>
 8009474:	46a3      	mov	fp, r4
 8009476:	e7bf      	b.n	80093f8 <_realloc_r+0x38>
 8009478:	45b8      	cmp	r8, r7
 800947a:	dc07      	bgt.n	800948c <_realloc_r+0xcc>
 800947c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8009480:	60da      	str	r2, [r3, #12]
 8009482:	6093      	str	r3, [r2, #8]
 8009484:	4655      	mov	r5, sl
 8009486:	e07f      	b.n	8009588 <_realloc_r+0x1c8>
 8009488:	2100      	movs	r1, #0
 800948a:	460b      	mov	r3, r1
 800948c:	07e8      	lsls	r0, r5, #31
 800948e:	f100 80e5 	bmi.w	800965c <_realloc_r+0x29c>
 8009492:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8009496:	ebaa 0505 	sub.w	r5, sl, r5
 800949a:	6868      	ldr	r0, [r5, #4]
 800949c:	f020 0003 	bic.w	r0, r0, #3
 80094a0:	eb00 0b06 	add.w	fp, r0, r6
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 80a5 	beq.w	80095f4 <_realloc_r+0x234>
 80094aa:	459c      	cmp	ip, r3
 80094ac:	eb01 070b 	add.w	r7, r1, fp
 80094b0:	d14a      	bne.n	8009548 <_realloc_r+0x188>
 80094b2:	f108 0310 	add.w	r3, r8, #16
 80094b6:	42bb      	cmp	r3, r7
 80094b8:	f300 809c 	bgt.w	80095f4 <_realloc_r+0x234>
 80094bc:	46ab      	mov	fp, r5
 80094be:	68eb      	ldr	r3, [r5, #12]
 80094c0:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80094c4:	60d3      	str	r3, [r2, #12]
 80094c6:	609a      	str	r2, [r3, #8]
 80094c8:	1f32      	subs	r2, r6, #4
 80094ca:	2a24      	cmp	r2, #36	; 0x24
 80094cc:	d837      	bhi.n	800953e <_realloc_r+0x17e>
 80094ce:	2a13      	cmp	r2, #19
 80094d0:	d933      	bls.n	800953a <_realloc_r+0x17a>
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	60ab      	str	r3, [r5, #8]
 80094d6:	6863      	ldr	r3, [r4, #4]
 80094d8:	60eb      	str	r3, [r5, #12]
 80094da:	2a1b      	cmp	r2, #27
 80094dc:	d81b      	bhi.n	8009516 <_realloc_r+0x156>
 80094de:	3408      	adds	r4, #8
 80094e0:	f105 0310 	add.w	r3, r5, #16
 80094e4:	6822      	ldr	r2, [r4, #0]
 80094e6:	601a      	str	r2, [r3, #0]
 80094e8:	6862      	ldr	r2, [r4, #4]
 80094ea:	605a      	str	r2, [r3, #4]
 80094ec:	68a2      	ldr	r2, [r4, #8]
 80094ee:	609a      	str	r2, [r3, #8]
 80094f0:	eb05 0308 	add.w	r3, r5, r8
 80094f4:	9a01      	ldr	r2, [sp, #4]
 80094f6:	eba7 0708 	sub.w	r7, r7, r8
 80094fa:	f047 0701 	orr.w	r7, r7, #1
 80094fe:	6093      	str	r3, [r2, #8]
 8009500:	605f      	str	r7, [r3, #4]
 8009502:	686b      	ldr	r3, [r5, #4]
 8009504:	f003 0301 	and.w	r3, r3, #1
 8009508:	ea43 0308 	orr.w	r3, r3, r8
 800950c:	606b      	str	r3, [r5, #4]
 800950e:	4648      	mov	r0, r9
 8009510:	f7ff fa6c 	bl	80089ec <__malloc_unlock>
 8009514:	e770      	b.n	80093f8 <_realloc_r+0x38>
 8009516:	68a3      	ldr	r3, [r4, #8]
 8009518:	612b      	str	r3, [r5, #16]
 800951a:	68e3      	ldr	r3, [r4, #12]
 800951c:	616b      	str	r3, [r5, #20]
 800951e:	2a24      	cmp	r2, #36	; 0x24
 8009520:	bf01      	itttt	eq
 8009522:	6923      	ldreq	r3, [r4, #16]
 8009524:	61ab      	streq	r3, [r5, #24]
 8009526:	6962      	ldreq	r2, [r4, #20]
 8009528:	61ea      	streq	r2, [r5, #28]
 800952a:	bf19      	ittee	ne
 800952c:	3410      	addne	r4, #16
 800952e:	f105 0318 	addne.w	r3, r5, #24
 8009532:	f105 0320 	addeq.w	r3, r5, #32
 8009536:	3418      	addeq	r4, #24
 8009538:	e7d4      	b.n	80094e4 <_realloc_r+0x124>
 800953a:	465b      	mov	r3, fp
 800953c:	e7d2      	b.n	80094e4 <_realloc_r+0x124>
 800953e:	4621      	mov	r1, r4
 8009540:	4658      	mov	r0, fp
 8009542:	f7ff ff23 	bl	800938c <memmove>
 8009546:	e7d3      	b.n	80094f0 <_realloc_r+0x130>
 8009548:	45b8      	cmp	r8, r7
 800954a:	dc53      	bgt.n	80095f4 <_realloc_r+0x234>
 800954c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8009550:	4628      	mov	r0, r5
 8009552:	60da      	str	r2, [r3, #12]
 8009554:	6093      	str	r3, [r2, #8]
 8009556:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800955a:	68eb      	ldr	r3, [r5, #12]
 800955c:	60d3      	str	r3, [r2, #12]
 800955e:	609a      	str	r2, [r3, #8]
 8009560:	1f32      	subs	r2, r6, #4
 8009562:	2a24      	cmp	r2, #36	; 0x24
 8009564:	d842      	bhi.n	80095ec <_realloc_r+0x22c>
 8009566:	2a13      	cmp	r2, #19
 8009568:	d908      	bls.n	800957c <_realloc_r+0x1bc>
 800956a:	6823      	ldr	r3, [r4, #0]
 800956c:	60ab      	str	r3, [r5, #8]
 800956e:	6863      	ldr	r3, [r4, #4]
 8009570:	60eb      	str	r3, [r5, #12]
 8009572:	2a1b      	cmp	r2, #27
 8009574:	d828      	bhi.n	80095c8 <_realloc_r+0x208>
 8009576:	3408      	adds	r4, #8
 8009578:	f105 0010 	add.w	r0, r5, #16
 800957c:	6823      	ldr	r3, [r4, #0]
 800957e:	6003      	str	r3, [r0, #0]
 8009580:	6863      	ldr	r3, [r4, #4]
 8009582:	6043      	str	r3, [r0, #4]
 8009584:	68a3      	ldr	r3, [r4, #8]
 8009586:	6083      	str	r3, [r0, #8]
 8009588:	686a      	ldr	r2, [r5, #4]
 800958a:	eba7 0008 	sub.w	r0, r7, r8
 800958e:	280f      	cmp	r0, #15
 8009590:	f002 0201 	and.w	r2, r2, #1
 8009594:	eb05 0307 	add.w	r3, r5, r7
 8009598:	f240 80b1 	bls.w	80096fe <_realloc_r+0x33e>
 800959c:	eb05 0108 	add.w	r1, r5, r8
 80095a0:	ea48 0202 	orr.w	r2, r8, r2
 80095a4:	f040 0001 	orr.w	r0, r0, #1
 80095a8:	606a      	str	r2, [r5, #4]
 80095aa:	6048      	str	r0, [r1, #4]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	f042 0201 	orr.w	r2, r2, #1
 80095b2:	605a      	str	r2, [r3, #4]
 80095b4:	3108      	adds	r1, #8
 80095b6:	4648      	mov	r0, r9
 80095b8:	f7fe fefa 	bl	80083b0 <_free_r>
 80095bc:	4648      	mov	r0, r9
 80095be:	f7ff fa15 	bl	80089ec <__malloc_unlock>
 80095c2:	f105 0b08 	add.w	fp, r5, #8
 80095c6:	e717      	b.n	80093f8 <_realloc_r+0x38>
 80095c8:	68a3      	ldr	r3, [r4, #8]
 80095ca:	612b      	str	r3, [r5, #16]
 80095cc:	68e3      	ldr	r3, [r4, #12]
 80095ce:	616b      	str	r3, [r5, #20]
 80095d0:	2a24      	cmp	r2, #36	; 0x24
 80095d2:	bf01      	itttt	eq
 80095d4:	6923      	ldreq	r3, [r4, #16]
 80095d6:	61ab      	streq	r3, [r5, #24]
 80095d8:	6963      	ldreq	r3, [r4, #20]
 80095da:	61eb      	streq	r3, [r5, #28]
 80095dc:	bf19      	ittee	ne
 80095de:	3410      	addne	r4, #16
 80095e0:	f105 0018 	addne.w	r0, r5, #24
 80095e4:	f105 0020 	addeq.w	r0, r5, #32
 80095e8:	3418      	addeq	r4, #24
 80095ea:	e7c7      	b.n	800957c <_realloc_r+0x1bc>
 80095ec:	4621      	mov	r1, r4
 80095ee:	f7ff fecd 	bl	800938c <memmove>
 80095f2:	e7c9      	b.n	8009588 <_realloc_r+0x1c8>
 80095f4:	45d8      	cmp	r8, fp
 80095f6:	dc31      	bgt.n	800965c <_realloc_r+0x29c>
 80095f8:	4628      	mov	r0, r5
 80095fa:	68eb      	ldr	r3, [r5, #12]
 80095fc:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009600:	60d3      	str	r3, [r2, #12]
 8009602:	609a      	str	r2, [r3, #8]
 8009604:	1f32      	subs	r2, r6, #4
 8009606:	2a24      	cmp	r2, #36	; 0x24
 8009608:	d824      	bhi.n	8009654 <_realloc_r+0x294>
 800960a:	2a13      	cmp	r2, #19
 800960c:	d908      	bls.n	8009620 <_realloc_r+0x260>
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	60ab      	str	r3, [r5, #8]
 8009612:	6863      	ldr	r3, [r4, #4]
 8009614:	60eb      	str	r3, [r5, #12]
 8009616:	2a1b      	cmp	r2, #27
 8009618:	d80a      	bhi.n	8009630 <_realloc_r+0x270>
 800961a:	3408      	adds	r4, #8
 800961c:	f105 0010 	add.w	r0, r5, #16
 8009620:	6823      	ldr	r3, [r4, #0]
 8009622:	6003      	str	r3, [r0, #0]
 8009624:	6863      	ldr	r3, [r4, #4]
 8009626:	6043      	str	r3, [r0, #4]
 8009628:	68a3      	ldr	r3, [r4, #8]
 800962a:	6083      	str	r3, [r0, #8]
 800962c:	465f      	mov	r7, fp
 800962e:	e7ab      	b.n	8009588 <_realloc_r+0x1c8>
 8009630:	68a3      	ldr	r3, [r4, #8]
 8009632:	612b      	str	r3, [r5, #16]
 8009634:	68e3      	ldr	r3, [r4, #12]
 8009636:	616b      	str	r3, [r5, #20]
 8009638:	2a24      	cmp	r2, #36	; 0x24
 800963a:	bf01      	itttt	eq
 800963c:	6923      	ldreq	r3, [r4, #16]
 800963e:	61ab      	streq	r3, [r5, #24]
 8009640:	6963      	ldreq	r3, [r4, #20]
 8009642:	61eb      	streq	r3, [r5, #28]
 8009644:	bf19      	ittee	ne
 8009646:	3410      	addne	r4, #16
 8009648:	f105 0018 	addne.w	r0, r5, #24
 800964c:	f105 0020 	addeq.w	r0, r5, #32
 8009650:	3418      	addeq	r4, #24
 8009652:	e7e5      	b.n	8009620 <_realloc_r+0x260>
 8009654:	4621      	mov	r1, r4
 8009656:	f7ff fe99 	bl	800938c <memmove>
 800965a:	e7e7      	b.n	800962c <_realloc_r+0x26c>
 800965c:	4611      	mov	r1, r2
 800965e:	4648      	mov	r0, r9
 8009660:	f7fe ff6e 	bl	8008540 <_malloc_r>
 8009664:	4683      	mov	fp, r0
 8009666:	2800      	cmp	r0, #0
 8009668:	f43f af51 	beq.w	800950e <_realloc_r+0x14e>
 800966c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009670:	f023 0301 	bic.w	r3, r3, #1
 8009674:	4453      	add	r3, sl
 8009676:	f1a0 0208 	sub.w	r2, r0, #8
 800967a:	4293      	cmp	r3, r2
 800967c:	d105      	bne.n	800968a <_realloc_r+0x2ca>
 800967e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8009682:	f027 0703 	bic.w	r7, r7, #3
 8009686:	4437      	add	r7, r6
 8009688:	e6fc      	b.n	8009484 <_realloc_r+0xc4>
 800968a:	1f32      	subs	r2, r6, #4
 800968c:	2a24      	cmp	r2, #36	; 0x24
 800968e:	d830      	bhi.n	80096f2 <_realloc_r+0x332>
 8009690:	2a13      	cmp	r2, #19
 8009692:	d92b      	bls.n	80096ec <_realloc_r+0x32c>
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	6003      	str	r3, [r0, #0]
 8009698:	6863      	ldr	r3, [r4, #4]
 800969a:	6043      	str	r3, [r0, #4]
 800969c:	2a1b      	cmp	r2, #27
 800969e:	d811      	bhi.n	80096c4 <_realloc_r+0x304>
 80096a0:	f104 0208 	add.w	r2, r4, #8
 80096a4:	f100 0308 	add.w	r3, r0, #8
 80096a8:	6811      	ldr	r1, [r2, #0]
 80096aa:	6019      	str	r1, [r3, #0]
 80096ac:	6851      	ldr	r1, [r2, #4]
 80096ae:	6059      	str	r1, [r3, #4]
 80096b0:	6892      	ldr	r2, [r2, #8]
 80096b2:	609a      	str	r2, [r3, #8]
 80096b4:	4621      	mov	r1, r4
 80096b6:	4648      	mov	r0, r9
 80096b8:	f7fe fe7a 	bl	80083b0 <_free_r>
 80096bc:	e727      	b.n	800950e <_realloc_r+0x14e>
 80096be:	bf00      	nop
 80096c0:	2000043c 	.word	0x2000043c
 80096c4:	68a3      	ldr	r3, [r4, #8]
 80096c6:	6083      	str	r3, [r0, #8]
 80096c8:	68e3      	ldr	r3, [r4, #12]
 80096ca:	60c3      	str	r3, [r0, #12]
 80096cc:	2a24      	cmp	r2, #36	; 0x24
 80096ce:	bf01      	itttt	eq
 80096d0:	6923      	ldreq	r3, [r4, #16]
 80096d2:	6103      	streq	r3, [r0, #16]
 80096d4:	6961      	ldreq	r1, [r4, #20]
 80096d6:	6141      	streq	r1, [r0, #20]
 80096d8:	bf19      	ittee	ne
 80096da:	f104 0210 	addne.w	r2, r4, #16
 80096de:	f100 0310 	addne.w	r3, r0, #16
 80096e2:	f104 0218 	addeq.w	r2, r4, #24
 80096e6:	f100 0318 	addeq.w	r3, r0, #24
 80096ea:	e7dd      	b.n	80096a8 <_realloc_r+0x2e8>
 80096ec:	4603      	mov	r3, r0
 80096ee:	4622      	mov	r2, r4
 80096f0:	e7da      	b.n	80096a8 <_realloc_r+0x2e8>
 80096f2:	4621      	mov	r1, r4
 80096f4:	f7ff fe4a 	bl	800938c <memmove>
 80096f8:	e7dc      	b.n	80096b4 <_realloc_r+0x2f4>
 80096fa:	4637      	mov	r7, r6
 80096fc:	e6c2      	b.n	8009484 <_realloc_r+0xc4>
 80096fe:	4317      	orrs	r7, r2
 8009700:	606f      	str	r7, [r5, #4]
 8009702:	685a      	ldr	r2, [r3, #4]
 8009704:	f042 0201 	orr.w	r2, r2, #1
 8009708:	605a      	str	r2, [r3, #4]
 800970a:	e757      	b.n	80095bc <_realloc_r+0x1fc>

0800970c <__sprint_r>:
 800970c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009710:	6893      	ldr	r3, [r2, #8]
 8009712:	4680      	mov	r8, r0
 8009714:	460f      	mov	r7, r1
 8009716:	4614      	mov	r4, r2
 8009718:	b91b      	cbnz	r3, 8009722 <__sprint_r+0x16>
 800971a:	6053      	str	r3, [r2, #4]
 800971c:	4618      	mov	r0, r3
 800971e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009722:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009724:	049d      	lsls	r5, r3, #18
 8009726:	d520      	bpl.n	800976a <__sprint_r+0x5e>
 8009728:	6815      	ldr	r5, [r2, #0]
 800972a:	3508      	adds	r5, #8
 800972c:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8009730:	f04f 0900 	mov.w	r9, #0
 8009734:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8009738:	45ca      	cmp	sl, r9
 800973a:	dc0b      	bgt.n	8009754 <__sprint_r+0x48>
 800973c:	68a3      	ldr	r3, [r4, #8]
 800973e:	f026 0003 	bic.w	r0, r6, #3
 8009742:	1a18      	subs	r0, r3, r0
 8009744:	60a0      	str	r0, [r4, #8]
 8009746:	3508      	adds	r5, #8
 8009748:	2800      	cmp	r0, #0
 800974a:	d1ef      	bne.n	800972c <__sprint_r+0x20>
 800974c:	2300      	movs	r3, #0
 800974e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8009752:	e7e4      	b.n	800971e <__sprint_r+0x12>
 8009754:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8009758:	463a      	mov	r2, r7
 800975a:	4640      	mov	r0, r8
 800975c:	f000 fea1 	bl	800a4a2 <_fputwc_r>
 8009760:	1c43      	adds	r3, r0, #1
 8009762:	d0f3      	beq.n	800974c <__sprint_r+0x40>
 8009764:	f109 0901 	add.w	r9, r9, #1
 8009768:	e7e6      	b.n	8009738 <__sprint_r+0x2c>
 800976a:	f000 fec5 	bl	800a4f8 <__sfvwrite_r>
 800976e:	e7ed      	b.n	800974c <__sprint_r+0x40>

08009770 <_vfiprintf_r>:
 8009770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009774:	ed2d 8b02 	vpush	{d8}
 8009778:	b0b9      	sub	sp, #228	; 0xe4
 800977a:	460f      	mov	r7, r1
 800977c:	9201      	str	r2, [sp, #4]
 800977e:	461d      	mov	r5, r3
 8009780:	461c      	mov	r4, r3
 8009782:	4681      	mov	r9, r0
 8009784:	b118      	cbz	r0, 800978e <_vfiprintf_r+0x1e>
 8009786:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009788:	b90b      	cbnz	r3, 800978e <_vfiprintf_r+0x1e>
 800978a:	f000 fe21 	bl	800a3d0 <__sinit>
 800978e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009790:	07d8      	lsls	r0, r3, #31
 8009792:	d405      	bmi.n	80097a0 <_vfiprintf_r+0x30>
 8009794:	89bb      	ldrh	r3, [r7, #12]
 8009796:	0599      	lsls	r1, r3, #22
 8009798:	d402      	bmi.n	80097a0 <_vfiprintf_r+0x30>
 800979a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800979c:	f7fe fece 	bl	800853c <__retarget_lock_acquire_recursive>
 80097a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80097a4:	049a      	lsls	r2, r3, #18
 80097a6:	d406      	bmi.n	80097b6 <_vfiprintf_r+0x46>
 80097a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80097ac:	81bb      	strh	r3, [r7, #12]
 80097ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097b4:	667b      	str	r3, [r7, #100]	; 0x64
 80097b6:	89bb      	ldrh	r3, [r7, #12]
 80097b8:	071e      	lsls	r6, r3, #28
 80097ba:	d501      	bpl.n	80097c0 <_vfiprintf_r+0x50>
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	b9bb      	cbnz	r3, 80097f0 <_vfiprintf_r+0x80>
 80097c0:	4639      	mov	r1, r7
 80097c2:	4648      	mov	r0, r9
 80097c4:	f000 fcaa 	bl	800a11c <__swsetup_r>
 80097c8:	b190      	cbz	r0, 80097f0 <_vfiprintf_r+0x80>
 80097ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097cc:	07d8      	lsls	r0, r3, #31
 80097ce:	d508      	bpl.n	80097e2 <_vfiprintf_r+0x72>
 80097d0:	f04f 33ff 	mov.w	r3, #4294967295
 80097d4:	9302      	str	r3, [sp, #8]
 80097d6:	9802      	ldr	r0, [sp, #8]
 80097d8:	b039      	add	sp, #228	; 0xe4
 80097da:	ecbd 8b02 	vpop	{d8}
 80097de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e2:	89bb      	ldrh	r3, [r7, #12]
 80097e4:	0599      	lsls	r1, r3, #22
 80097e6:	d4f3      	bmi.n	80097d0 <_vfiprintf_r+0x60>
 80097e8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80097ea:	f7fe fea8 	bl	800853e <__retarget_lock_release_recursive>
 80097ee:	e7ef      	b.n	80097d0 <_vfiprintf_r+0x60>
 80097f0:	89bb      	ldrh	r3, [r7, #12]
 80097f2:	f003 021a 	and.w	r2, r3, #26
 80097f6:	2a0a      	cmp	r2, #10
 80097f8:	d113      	bne.n	8009822 <_vfiprintf_r+0xb2>
 80097fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80097fe:	2a00      	cmp	r2, #0
 8009800:	db0f      	blt.n	8009822 <_vfiprintf_r+0xb2>
 8009802:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009804:	07d2      	lsls	r2, r2, #31
 8009806:	d404      	bmi.n	8009812 <_vfiprintf_r+0xa2>
 8009808:	059e      	lsls	r6, r3, #22
 800980a:	d402      	bmi.n	8009812 <_vfiprintf_r+0xa2>
 800980c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800980e:	f7fe fe96 	bl	800853e <__retarget_lock_release_recursive>
 8009812:	9a01      	ldr	r2, [sp, #4]
 8009814:	462b      	mov	r3, r5
 8009816:	4639      	mov	r1, r7
 8009818:	4648      	mov	r0, r9
 800981a:	f000 fc31 	bl	800a080 <__sbprintf>
 800981e:	9002      	str	r0, [sp, #8]
 8009820:	e7d9      	b.n	80097d6 <_vfiprintf_r+0x66>
 8009822:	2300      	movs	r3, #0
 8009824:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8009828:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800982c:	ae0f      	add	r6, sp, #60	; 0x3c
 800982e:	ee08 3a10 	vmov	s16, r3
 8009832:	960c      	str	r6, [sp, #48]	; 0x30
 8009834:	9307      	str	r3, [sp, #28]
 8009836:	9302      	str	r3, [sp, #8]
 8009838:	9b01      	ldr	r3, [sp, #4]
 800983a:	461d      	mov	r5, r3
 800983c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009840:	b10a      	cbz	r2, 8009846 <_vfiprintf_r+0xd6>
 8009842:	2a25      	cmp	r2, #37	; 0x25
 8009844:	d1f9      	bne.n	800983a <_vfiprintf_r+0xca>
 8009846:	9b01      	ldr	r3, [sp, #4]
 8009848:	ebb5 0803 	subs.w	r8, r5, r3
 800984c:	d00d      	beq.n	800986a <_vfiprintf_r+0xfa>
 800984e:	e9c6 3800 	strd	r3, r8, [r6]
 8009852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009854:	4443      	add	r3, r8
 8009856:	930e      	str	r3, [sp, #56]	; 0x38
 8009858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800985a:	3301      	adds	r3, #1
 800985c:	2b07      	cmp	r3, #7
 800985e:	930d      	str	r3, [sp, #52]	; 0x34
 8009860:	dc75      	bgt.n	800994e <_vfiprintf_r+0x1de>
 8009862:	3608      	adds	r6, #8
 8009864:	9b02      	ldr	r3, [sp, #8]
 8009866:	4443      	add	r3, r8
 8009868:	9302      	str	r3, [sp, #8]
 800986a:	782b      	ldrb	r3, [r5, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 83c8 	beq.w	800a002 <_vfiprintf_r+0x892>
 8009872:	2300      	movs	r3, #0
 8009874:	f04f 31ff 	mov.w	r1, #4294967295
 8009878:	1c6a      	adds	r2, r5, #1
 800987a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800987e:	9100      	str	r1, [sp, #0]
 8009880:	9303      	str	r3, [sp, #12]
 8009882:	469a      	mov	sl, r3
 8009884:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009888:	9201      	str	r2, [sp, #4]
 800988a:	f1a3 0220 	sub.w	r2, r3, #32
 800988e:	2a5a      	cmp	r2, #90	; 0x5a
 8009890:	f200 8310 	bhi.w	8009eb4 <_vfiprintf_r+0x744>
 8009894:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009898:	030e0099 	.word	0x030e0099
 800989c:	00a1030e 	.word	0x00a1030e
 80098a0:	030e030e 	.word	0x030e030e
 80098a4:	0080030e 	.word	0x0080030e
 80098a8:	030e030e 	.word	0x030e030e
 80098ac:	00ae00a4 	.word	0x00ae00a4
 80098b0:	00ab030e 	.word	0x00ab030e
 80098b4:	030e00b0 	.word	0x030e00b0
 80098b8:	00ce00cb 	.word	0x00ce00cb
 80098bc:	00ce00ce 	.word	0x00ce00ce
 80098c0:	00ce00ce 	.word	0x00ce00ce
 80098c4:	00ce00ce 	.word	0x00ce00ce
 80098c8:	00ce00ce 	.word	0x00ce00ce
 80098cc:	030e030e 	.word	0x030e030e
 80098d0:	030e030e 	.word	0x030e030e
 80098d4:	030e030e 	.word	0x030e030e
 80098d8:	030e030e 	.word	0x030e030e
 80098dc:	00f8030e 	.word	0x00f8030e
 80098e0:	030e0106 	.word	0x030e0106
 80098e4:	030e030e 	.word	0x030e030e
 80098e8:	030e030e 	.word	0x030e030e
 80098ec:	030e030e 	.word	0x030e030e
 80098f0:	030e030e 	.word	0x030e030e
 80098f4:	014d030e 	.word	0x014d030e
 80098f8:	030e030e 	.word	0x030e030e
 80098fc:	0192030e 	.word	0x0192030e
 8009900:	0270030e 	.word	0x0270030e
 8009904:	030e030e 	.word	0x030e030e
 8009908:	030e028e 	.word	0x030e028e
 800990c:	030e030e 	.word	0x030e030e
 8009910:	030e030e 	.word	0x030e030e
 8009914:	030e030e 	.word	0x030e030e
 8009918:	030e030e 	.word	0x030e030e
 800991c:	00f8030e 	.word	0x00f8030e
 8009920:	030e0108 	.word	0x030e0108
 8009924:	030e030e 	.word	0x030e030e
 8009928:	010800de 	.word	0x010800de
 800992c:	030e00f2 	.word	0x030e00f2
 8009930:	030e00eb 	.word	0x030e00eb
 8009934:	014f0130 	.word	0x014f0130
 8009938:	00f20182 	.word	0x00f20182
 800993c:	0192030e 	.word	0x0192030e
 8009940:	02720097 	.word	0x02720097
 8009944:	030e030e 	.word	0x030e030e
 8009948:	030e0065 	.word	0x030e0065
 800994c:	0097      	.short	0x0097
 800994e:	aa0c      	add	r2, sp, #48	; 0x30
 8009950:	4639      	mov	r1, r7
 8009952:	4648      	mov	r0, r9
 8009954:	f7ff feda 	bl	800970c <__sprint_r>
 8009958:	2800      	cmp	r0, #0
 800995a:	f040 8331 	bne.w	8009fc0 <_vfiprintf_r+0x850>
 800995e:	ae0f      	add	r6, sp, #60	; 0x3c
 8009960:	e780      	b.n	8009864 <_vfiprintf_r+0xf4>
 8009962:	4a95      	ldr	r2, [pc, #596]	; (8009bb8 <_vfiprintf_r+0x448>)
 8009964:	9205      	str	r2, [sp, #20]
 8009966:	f01a 0f20 	tst.w	sl, #32
 800996a:	f000 8225 	beq.w	8009db8 <_vfiprintf_r+0x648>
 800996e:	3407      	adds	r4, #7
 8009970:	f024 0b07 	bic.w	fp, r4, #7
 8009974:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8009978:	f01a 0f01 	tst.w	sl, #1
 800997c:	d009      	beq.n	8009992 <_vfiprintf_r+0x222>
 800997e:	ea54 0205 	orrs.w	r2, r4, r5
 8009982:	bf1f      	itttt	ne
 8009984:	2230      	movne	r2, #48	; 0x30
 8009986:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800998a:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800998e:	f04a 0a02 	orrne.w	sl, sl, #2
 8009992:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009996:	e10d      	b.n	8009bb4 <_vfiprintf_r+0x444>
 8009998:	4648      	mov	r0, r9
 800999a:	f7fe fdc9 	bl	8008530 <_localeconv_r>
 800999e:	6843      	ldr	r3, [r0, #4]
 80099a0:	4618      	mov	r0, r3
 80099a2:	ee08 3a10 	vmov	s16, r3
 80099a6:	f7f6 fc63 	bl	8000270 <strlen>
 80099aa:	9007      	str	r0, [sp, #28]
 80099ac:	4648      	mov	r0, r9
 80099ae:	f7fe fdbf 	bl	8008530 <_localeconv_r>
 80099b2:	6883      	ldr	r3, [r0, #8]
 80099b4:	9306      	str	r3, [sp, #24]
 80099b6:	9b07      	ldr	r3, [sp, #28]
 80099b8:	b12b      	cbz	r3, 80099c6 <_vfiprintf_r+0x256>
 80099ba:	9b06      	ldr	r3, [sp, #24]
 80099bc:	b11b      	cbz	r3, 80099c6 <_vfiprintf_r+0x256>
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	b10b      	cbz	r3, 80099c6 <_vfiprintf_r+0x256>
 80099c2:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80099c6:	9a01      	ldr	r2, [sp, #4]
 80099c8:	e75c      	b.n	8009884 <_vfiprintf_r+0x114>
 80099ca:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1f9      	bne.n	80099c6 <_vfiprintf_r+0x256>
 80099d2:	2320      	movs	r3, #32
 80099d4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80099d8:	e7f5      	b.n	80099c6 <_vfiprintf_r+0x256>
 80099da:	f04a 0a01 	orr.w	sl, sl, #1
 80099de:	e7f2      	b.n	80099c6 <_vfiprintf_r+0x256>
 80099e0:	f854 3b04 	ldr.w	r3, [r4], #4
 80099e4:	9303      	str	r3, [sp, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	daed      	bge.n	80099c6 <_vfiprintf_r+0x256>
 80099ea:	425b      	negs	r3, r3
 80099ec:	9303      	str	r3, [sp, #12]
 80099ee:	f04a 0a04 	orr.w	sl, sl, #4
 80099f2:	e7e8      	b.n	80099c6 <_vfiprintf_r+0x256>
 80099f4:	232b      	movs	r3, #43	; 0x2b
 80099f6:	e7ed      	b.n	80099d4 <_vfiprintf_r+0x264>
 80099f8:	9a01      	ldr	r2, [sp, #4]
 80099fa:	f812 3b01 	ldrb.w	r3, [r2], #1
 80099fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009a00:	d112      	bne.n	8009a28 <_vfiprintf_r+0x2b8>
 8009a02:	f854 0b04 	ldr.w	r0, [r4], #4
 8009a06:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8009a0a:	e9cd 3200 	strd	r3, r2, [sp]
 8009a0e:	e7da      	b.n	80099c6 <_vfiprintf_r+0x256>
 8009a10:	9b00      	ldr	r3, [sp, #0]
 8009a12:	200a      	movs	r0, #10
 8009a14:	fb00 1303 	mla	r3, r0, r3, r1
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009a1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009a22:	2909      	cmp	r1, #9
 8009a24:	d9f4      	bls.n	8009a10 <_vfiprintf_r+0x2a0>
 8009a26:	e72f      	b.n	8009888 <_vfiprintf_r+0x118>
 8009a28:	2100      	movs	r1, #0
 8009a2a:	9100      	str	r1, [sp, #0]
 8009a2c:	e7f7      	b.n	8009a1e <_vfiprintf_r+0x2ae>
 8009a2e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8009a32:	e7c8      	b.n	80099c6 <_vfiprintf_r+0x256>
 8009a34:	2100      	movs	r1, #0
 8009a36:	9a01      	ldr	r2, [sp, #4]
 8009a38:	9103      	str	r1, [sp, #12]
 8009a3a:	9903      	ldr	r1, [sp, #12]
 8009a3c:	3b30      	subs	r3, #48	; 0x30
 8009a3e:	200a      	movs	r0, #10
 8009a40:	fb00 3301 	mla	r3, r0, r1, r3
 8009a44:	9303      	str	r3, [sp, #12]
 8009a46:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009a4a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009a4e:	2909      	cmp	r1, #9
 8009a50:	d9f3      	bls.n	8009a3a <_vfiprintf_r+0x2ca>
 8009a52:	e719      	b.n	8009888 <_vfiprintf_r+0x118>
 8009a54:	9b01      	ldr	r3, [sp, #4]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	2b68      	cmp	r3, #104	; 0x68
 8009a5a:	bf01      	itttt	eq
 8009a5c:	9b01      	ldreq	r3, [sp, #4]
 8009a5e:	3301      	addeq	r3, #1
 8009a60:	9301      	streq	r3, [sp, #4]
 8009a62:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8009a66:	bf18      	it	ne
 8009a68:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8009a6c:	e7ab      	b.n	80099c6 <_vfiprintf_r+0x256>
 8009a6e:	9b01      	ldr	r3, [sp, #4]
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	2b6c      	cmp	r3, #108	; 0x6c
 8009a74:	d105      	bne.n	8009a82 <_vfiprintf_r+0x312>
 8009a76:	9b01      	ldr	r3, [sp, #4]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	f04a 0a20 	orr.w	sl, sl, #32
 8009a80:	e7a1      	b.n	80099c6 <_vfiprintf_r+0x256>
 8009a82:	f04a 0a10 	orr.w	sl, sl, #16
 8009a86:	e79e      	b.n	80099c6 <_vfiprintf_r+0x256>
 8009a88:	46a3      	mov	fp, r4
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	f85b 3b04 	ldr.w	r3, [fp], #4
 8009a90:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8009a94:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8009a98:	2301      	movs	r3, #1
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	460d      	mov	r5, r1
 8009a9e:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 8009aa2:	e0a0      	b.n	8009be6 <_vfiprintf_r+0x476>
 8009aa4:	f04a 0a10 	orr.w	sl, sl, #16
 8009aa8:	f01a 0f20 	tst.w	sl, #32
 8009aac:	d011      	beq.n	8009ad2 <_vfiprintf_r+0x362>
 8009aae:	3407      	adds	r4, #7
 8009ab0:	f024 0b07 	bic.w	fp, r4, #7
 8009ab4:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8009ab8:	2c00      	cmp	r4, #0
 8009aba:	f175 0300 	sbcs.w	r3, r5, #0
 8009abe:	da06      	bge.n	8009ace <_vfiprintf_r+0x35e>
 8009ac0:	4264      	negs	r4, r4
 8009ac2:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8009ac6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8009aca:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e03f      	b.n	8009b52 <_vfiprintf_r+0x3e2>
 8009ad2:	f01a 0f10 	tst.w	sl, #16
 8009ad6:	f104 0b04 	add.w	fp, r4, #4
 8009ada:	d002      	beq.n	8009ae2 <_vfiprintf_r+0x372>
 8009adc:	6824      	ldr	r4, [r4, #0]
 8009ade:	17e5      	asrs	r5, r4, #31
 8009ae0:	e7ea      	b.n	8009ab8 <_vfiprintf_r+0x348>
 8009ae2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009ae6:	6824      	ldr	r4, [r4, #0]
 8009ae8:	d001      	beq.n	8009aee <_vfiprintf_r+0x37e>
 8009aea:	b224      	sxth	r4, r4
 8009aec:	e7f7      	b.n	8009ade <_vfiprintf_r+0x36e>
 8009aee:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009af2:	bf18      	it	ne
 8009af4:	b264      	sxtbne	r4, r4
 8009af6:	e7f2      	b.n	8009ade <_vfiprintf_r+0x36e>
 8009af8:	f01a 0f20 	tst.w	sl, #32
 8009afc:	f854 3b04 	ldr.w	r3, [r4], #4
 8009b00:	d005      	beq.n	8009b0e <_vfiprintf_r+0x39e>
 8009b02:	9a02      	ldr	r2, [sp, #8]
 8009b04:	4610      	mov	r0, r2
 8009b06:	17d1      	asrs	r1, r2, #31
 8009b08:	e9c3 0100 	strd	r0, r1, [r3]
 8009b0c:	e694      	b.n	8009838 <_vfiprintf_r+0xc8>
 8009b0e:	f01a 0f10 	tst.w	sl, #16
 8009b12:	d002      	beq.n	8009b1a <_vfiprintf_r+0x3aa>
 8009b14:	9a02      	ldr	r2, [sp, #8]
 8009b16:	601a      	str	r2, [r3, #0]
 8009b18:	e68e      	b.n	8009838 <_vfiprintf_r+0xc8>
 8009b1a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009b1e:	d002      	beq.n	8009b26 <_vfiprintf_r+0x3b6>
 8009b20:	9a02      	ldr	r2, [sp, #8]
 8009b22:	801a      	strh	r2, [r3, #0]
 8009b24:	e688      	b.n	8009838 <_vfiprintf_r+0xc8>
 8009b26:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009b2a:	d0f3      	beq.n	8009b14 <_vfiprintf_r+0x3a4>
 8009b2c:	9a02      	ldr	r2, [sp, #8]
 8009b2e:	701a      	strb	r2, [r3, #0]
 8009b30:	e682      	b.n	8009838 <_vfiprintf_r+0xc8>
 8009b32:	f04a 0a10 	orr.w	sl, sl, #16
 8009b36:	f01a 0f20 	tst.w	sl, #32
 8009b3a:	d01d      	beq.n	8009b78 <_vfiprintf_r+0x408>
 8009b3c:	3407      	adds	r4, #7
 8009b3e:	f024 0b07 	bic.w	fp, r4, #7
 8009b42:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8009b46:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 8009b52:	9a00      	ldr	r2, [sp, #0]
 8009b54:	3201      	adds	r2, #1
 8009b56:	f000 8261 	beq.w	800a01c <_vfiprintf_r+0x8ac>
 8009b5a:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8009b5e:	9204      	str	r2, [sp, #16]
 8009b60:	ea54 0205 	orrs.w	r2, r4, r5
 8009b64:	f040 8260 	bne.w	800a028 <_vfiprintf_r+0x8b8>
 8009b68:	9a00      	ldr	r2, [sp, #0]
 8009b6a:	2a00      	cmp	r2, #0
 8009b6c:	f000 8197 	beq.w	8009e9e <_vfiprintf_r+0x72e>
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	f040 825c 	bne.w	800a02e <_vfiprintf_r+0x8be>
 8009b76:	e135      	b.n	8009de4 <_vfiprintf_r+0x674>
 8009b78:	f01a 0f10 	tst.w	sl, #16
 8009b7c:	f104 0b04 	add.w	fp, r4, #4
 8009b80:	d001      	beq.n	8009b86 <_vfiprintf_r+0x416>
 8009b82:	6824      	ldr	r4, [r4, #0]
 8009b84:	e003      	b.n	8009b8e <_vfiprintf_r+0x41e>
 8009b86:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009b8a:	d002      	beq.n	8009b92 <_vfiprintf_r+0x422>
 8009b8c:	8824      	ldrh	r4, [r4, #0]
 8009b8e:	2500      	movs	r5, #0
 8009b90:	e7d9      	b.n	8009b46 <_vfiprintf_r+0x3d6>
 8009b92:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009b96:	d0f4      	beq.n	8009b82 <_vfiprintf_r+0x412>
 8009b98:	7824      	ldrb	r4, [r4, #0]
 8009b9a:	e7f8      	b.n	8009b8e <_vfiprintf_r+0x41e>
 8009b9c:	46a3      	mov	fp, r4
 8009b9e:	f647 0330 	movw	r3, #30768	; 0x7830
 8009ba2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8009ba6:	f85b 4b04 	ldr.w	r4, [fp], #4
 8009baa:	4b03      	ldr	r3, [pc, #12]	; (8009bb8 <_vfiprintf_r+0x448>)
 8009bac:	9305      	str	r3, [sp, #20]
 8009bae:	2500      	movs	r5, #0
 8009bb0:	f04a 0a02 	orr.w	sl, sl, #2
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e7c9      	b.n	8009b4c <_vfiprintf_r+0x3dc>
 8009bb8:	0800ac88 	.word	0x0800ac88
 8009bbc:	9b00      	ldr	r3, [sp, #0]
 8009bbe:	46a3      	mov	fp, r4
 8009bc0:	2500      	movs	r5, #0
 8009bc2:	1c5c      	adds	r4, r3, #1
 8009bc4:	f85b 8b04 	ldr.w	r8, [fp], #4
 8009bc8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8009bcc:	f000 80cf 	beq.w	8009d6e <_vfiprintf_r+0x5fe>
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	4629      	mov	r1, r5
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	f7f6 fafb 	bl	80001d0 <memchr>
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	f000 8174 	beq.w	8009ec8 <_vfiprintf_r+0x758>
 8009be0:	eba0 0308 	sub.w	r3, r0, r8
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	9b00      	ldr	r3, [sp, #0]
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	bfb8      	it	lt
 8009bec:	462b      	movlt	r3, r5
 8009bee:	9304      	str	r3, [sp, #16]
 8009bf0:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009bf4:	b113      	cbz	r3, 8009bfc <_vfiprintf_r+0x48c>
 8009bf6:	9b04      	ldr	r3, [sp, #16]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	9304      	str	r3, [sp, #16]
 8009bfc:	f01a 0302 	ands.w	r3, sl, #2
 8009c00:	9308      	str	r3, [sp, #32]
 8009c02:	bf1e      	ittt	ne
 8009c04:	9b04      	ldrne	r3, [sp, #16]
 8009c06:	3302      	addne	r3, #2
 8009c08:	9304      	strne	r3, [sp, #16]
 8009c0a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8009c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c10:	d11f      	bne.n	8009c52 <_vfiprintf_r+0x4e2>
 8009c12:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009c16:	1a9c      	subs	r4, r3, r2
 8009c18:	2c00      	cmp	r4, #0
 8009c1a:	dd1a      	ble.n	8009c52 <_vfiprintf_r+0x4e2>
 8009c1c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009c20:	48b9      	ldr	r0, [pc, #740]	; (8009f08 <_vfiprintf_r+0x798>)
 8009c22:	6030      	str	r0, [r6, #0]
 8009c24:	2c10      	cmp	r4, #16
 8009c26:	f103 0301 	add.w	r3, r3, #1
 8009c2a:	f106 0108 	add.w	r1, r6, #8
 8009c2e:	f300 814d 	bgt.w	8009ecc <_vfiprintf_r+0x75c>
 8009c32:	6074      	str	r4, [r6, #4]
 8009c34:	2b07      	cmp	r3, #7
 8009c36:	4414      	add	r4, r2
 8009c38:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009c3c:	f340 8158 	ble.w	8009ef0 <_vfiprintf_r+0x780>
 8009c40:	aa0c      	add	r2, sp, #48	; 0x30
 8009c42:	4639      	mov	r1, r7
 8009c44:	4648      	mov	r0, r9
 8009c46:	f7ff fd61 	bl	800970c <__sprint_r>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	f040 81b8 	bne.w	8009fc0 <_vfiprintf_r+0x850>
 8009c50:	ae0f      	add	r6, sp, #60	; 0x3c
 8009c52:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8009c56:	b173      	cbz	r3, 8009c76 <_vfiprintf_r+0x506>
 8009c58:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 8009c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c5e:	6032      	str	r2, [r6, #0]
 8009c60:	2201      	movs	r2, #1
 8009c62:	6072      	str	r2, [r6, #4]
 8009c64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c66:	3301      	adds	r3, #1
 8009c68:	3201      	adds	r2, #1
 8009c6a:	2b07      	cmp	r3, #7
 8009c6c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009c70:	f300 8140 	bgt.w	8009ef4 <_vfiprintf_r+0x784>
 8009c74:	3608      	adds	r6, #8
 8009c76:	9b08      	ldr	r3, [sp, #32]
 8009c78:	b16b      	cbz	r3, 8009c96 <_vfiprintf_r+0x526>
 8009c7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c7e:	6032      	str	r2, [r6, #0]
 8009c80:	2202      	movs	r2, #2
 8009c82:	6072      	str	r2, [r6, #4]
 8009c84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c86:	3301      	adds	r3, #1
 8009c88:	3202      	adds	r2, #2
 8009c8a:	2b07      	cmp	r3, #7
 8009c8c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009c90:	f300 8140 	bgt.w	8009f14 <_vfiprintf_r+0x7a4>
 8009c94:	3608      	adds	r6, #8
 8009c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c98:	2b80      	cmp	r3, #128	; 0x80
 8009c9a:	d11f      	bne.n	8009cdc <_vfiprintf_r+0x56c>
 8009c9c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009ca0:	1a9c      	subs	r4, r3, r2
 8009ca2:	2c00      	cmp	r4, #0
 8009ca4:	dd1a      	ble.n	8009cdc <_vfiprintf_r+0x56c>
 8009ca6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009caa:	4898      	ldr	r0, [pc, #608]	; (8009f0c <_vfiprintf_r+0x79c>)
 8009cac:	6030      	str	r0, [r6, #0]
 8009cae:	2c10      	cmp	r4, #16
 8009cb0:	f103 0301 	add.w	r3, r3, #1
 8009cb4:	f106 0108 	add.w	r1, r6, #8
 8009cb8:	f300 8135 	bgt.w	8009f26 <_vfiprintf_r+0x7b6>
 8009cbc:	6074      	str	r4, [r6, #4]
 8009cbe:	2b07      	cmp	r3, #7
 8009cc0:	4414      	add	r4, r2
 8009cc2:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009cc6:	f340 8140 	ble.w	8009f4a <_vfiprintf_r+0x7da>
 8009cca:	aa0c      	add	r2, sp, #48	; 0x30
 8009ccc:	4639      	mov	r1, r7
 8009cce:	4648      	mov	r0, r9
 8009cd0:	f7ff fd1c 	bl	800970c <__sprint_r>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	f040 8173 	bne.w	8009fc0 <_vfiprintf_r+0x850>
 8009cda:	ae0f      	add	r6, sp, #60	; 0x3c
 8009cdc:	9b00      	ldr	r3, [sp, #0]
 8009cde:	1aec      	subs	r4, r5, r3
 8009ce0:	2c00      	cmp	r4, #0
 8009ce2:	dd1a      	ble.n	8009d1a <_vfiprintf_r+0x5aa>
 8009ce4:	4d89      	ldr	r5, [pc, #548]	; (8009f0c <_vfiprintf_r+0x79c>)
 8009ce6:	6035      	str	r5, [r6, #0]
 8009ce8:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 8009cec:	2c10      	cmp	r4, #16
 8009cee:	f103 0301 	add.w	r3, r3, #1
 8009cf2:	f106 0208 	add.w	r2, r6, #8
 8009cf6:	f300 812a 	bgt.w	8009f4e <_vfiprintf_r+0x7de>
 8009cfa:	6074      	str	r4, [r6, #4]
 8009cfc:	2b07      	cmp	r3, #7
 8009cfe:	440c      	add	r4, r1
 8009d00:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 8009d04:	f340 8134 	ble.w	8009f70 <_vfiprintf_r+0x800>
 8009d08:	aa0c      	add	r2, sp, #48	; 0x30
 8009d0a:	4639      	mov	r1, r7
 8009d0c:	4648      	mov	r0, r9
 8009d0e:	f7ff fcfd 	bl	800970c <__sprint_r>
 8009d12:	2800      	cmp	r0, #0
 8009d14:	f040 8154 	bne.w	8009fc0 <_vfiprintf_r+0x850>
 8009d18:	ae0f      	add	r6, sp, #60	; 0x3c
 8009d1a:	9b00      	ldr	r3, [sp, #0]
 8009d1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009d1e:	6073      	str	r3, [r6, #4]
 8009d20:	4418      	add	r0, r3
 8009d22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d24:	f8c6 8000 	str.w	r8, [r6]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	2b07      	cmp	r3, #7
 8009d2c:	900e      	str	r0, [sp, #56]	; 0x38
 8009d2e:	930d      	str	r3, [sp, #52]	; 0x34
 8009d30:	f300 8120 	bgt.w	8009f74 <_vfiprintf_r+0x804>
 8009d34:	f106 0308 	add.w	r3, r6, #8
 8009d38:	f01a 0f04 	tst.w	sl, #4
 8009d3c:	f040 8122 	bne.w	8009f84 <_vfiprintf_r+0x814>
 8009d40:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009d44:	9904      	ldr	r1, [sp, #16]
 8009d46:	428a      	cmp	r2, r1
 8009d48:	bfac      	ite	ge
 8009d4a:	189b      	addge	r3, r3, r2
 8009d4c:	185b      	addlt	r3, r3, r1
 8009d4e:	9302      	str	r3, [sp, #8]
 8009d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d52:	b13b      	cbz	r3, 8009d64 <_vfiprintf_r+0x5f4>
 8009d54:	aa0c      	add	r2, sp, #48	; 0x30
 8009d56:	4639      	mov	r1, r7
 8009d58:	4648      	mov	r0, r9
 8009d5a:	f7ff fcd7 	bl	800970c <__sprint_r>
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	f040 812e 	bne.w	8009fc0 <_vfiprintf_r+0x850>
 8009d64:	2300      	movs	r3, #0
 8009d66:	930d      	str	r3, [sp, #52]	; 0x34
 8009d68:	465c      	mov	r4, fp
 8009d6a:	ae0f      	add	r6, sp, #60	; 0x3c
 8009d6c:	e564      	b.n	8009838 <_vfiprintf_r+0xc8>
 8009d6e:	4640      	mov	r0, r8
 8009d70:	f7f6 fa7e 	bl	8000270 <strlen>
 8009d74:	9000      	str	r0, [sp, #0]
 8009d76:	e736      	b.n	8009be6 <_vfiprintf_r+0x476>
 8009d78:	f04a 0a10 	orr.w	sl, sl, #16
 8009d7c:	f01a 0f20 	tst.w	sl, #32
 8009d80:	d006      	beq.n	8009d90 <_vfiprintf_r+0x620>
 8009d82:	3407      	adds	r4, #7
 8009d84:	f024 0b07 	bic.w	fp, r4, #7
 8009d88:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e6dd      	b.n	8009b4c <_vfiprintf_r+0x3dc>
 8009d90:	f01a 0f10 	tst.w	sl, #16
 8009d94:	f104 0b04 	add.w	fp, r4, #4
 8009d98:	d001      	beq.n	8009d9e <_vfiprintf_r+0x62e>
 8009d9a:	6824      	ldr	r4, [r4, #0]
 8009d9c:	e003      	b.n	8009da6 <_vfiprintf_r+0x636>
 8009d9e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009da2:	d002      	beq.n	8009daa <_vfiprintf_r+0x63a>
 8009da4:	8824      	ldrh	r4, [r4, #0]
 8009da6:	2500      	movs	r5, #0
 8009da8:	e7f0      	b.n	8009d8c <_vfiprintf_r+0x61c>
 8009daa:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009dae:	d0f4      	beq.n	8009d9a <_vfiprintf_r+0x62a>
 8009db0:	7824      	ldrb	r4, [r4, #0]
 8009db2:	e7f8      	b.n	8009da6 <_vfiprintf_r+0x636>
 8009db4:	4a56      	ldr	r2, [pc, #344]	; (8009f10 <_vfiprintf_r+0x7a0>)
 8009db6:	e5d5      	b.n	8009964 <_vfiprintf_r+0x1f4>
 8009db8:	f01a 0f10 	tst.w	sl, #16
 8009dbc:	f104 0b04 	add.w	fp, r4, #4
 8009dc0:	d001      	beq.n	8009dc6 <_vfiprintf_r+0x656>
 8009dc2:	6824      	ldr	r4, [r4, #0]
 8009dc4:	e003      	b.n	8009dce <_vfiprintf_r+0x65e>
 8009dc6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8009dca:	d002      	beq.n	8009dd2 <_vfiprintf_r+0x662>
 8009dcc:	8824      	ldrh	r4, [r4, #0]
 8009dce:	2500      	movs	r5, #0
 8009dd0:	e5d2      	b.n	8009978 <_vfiprintf_r+0x208>
 8009dd2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8009dd6:	d0f4      	beq.n	8009dc2 <_vfiprintf_r+0x652>
 8009dd8:	7824      	ldrb	r4, [r4, #0]
 8009dda:	e7f8      	b.n	8009dce <_vfiprintf_r+0x65e>
 8009ddc:	2d00      	cmp	r5, #0
 8009dde:	bf08      	it	eq
 8009de0:	2c0a      	cmpeq	r4, #10
 8009de2:	d205      	bcs.n	8009df0 <_vfiprintf_r+0x680>
 8009de4:	3430      	adds	r4, #48	; 0x30
 8009de6:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 8009dea:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 8009dee:	e13c      	b.n	800a06a <_vfiprintf_r+0x8fa>
 8009df0:	ab38      	add	r3, sp, #224	; 0xe0
 8009df2:	9308      	str	r3, [sp, #32]
 8009df4:	9b04      	ldr	r3, [sp, #16]
 8009df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dfa:	f04f 0a00 	mov.w	sl, #0
 8009dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8009e00:	9b08      	ldr	r3, [sp, #32]
 8009e02:	220a      	movs	r2, #10
 8009e04:	f103 38ff 	add.w	r8, r3, #4294967295
 8009e08:	4620      	mov	r0, r4
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	f7f6 fecb 	bl	8000ba8 <__aeabi_uldivmod>
 8009e12:	9b08      	ldr	r3, [sp, #32]
 8009e14:	3230      	adds	r2, #48	; 0x30
 8009e16:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1c:	f10a 0a01 	add.w	sl, sl, #1
 8009e20:	b1db      	cbz	r3, 8009e5a <_vfiprintf_r+0x6ea>
 8009e22:	9b06      	ldr	r3, [sp, #24]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	4553      	cmp	r3, sl
 8009e28:	d117      	bne.n	8009e5a <_vfiprintf_r+0x6ea>
 8009e2a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8009e2e:	d014      	beq.n	8009e5a <_vfiprintf_r+0x6ea>
 8009e30:	2d00      	cmp	r5, #0
 8009e32:	bf08      	it	eq
 8009e34:	2c0a      	cmpeq	r4, #10
 8009e36:	d310      	bcc.n	8009e5a <_vfiprintf_r+0x6ea>
 8009e38:	9b07      	ldr	r3, [sp, #28]
 8009e3a:	eba8 0803 	sub.w	r8, r8, r3
 8009e3e:	461a      	mov	r2, r3
 8009e40:	ee18 1a10 	vmov	r1, s16
 8009e44:	4640      	mov	r0, r8
 8009e46:	f7ff f94f 	bl	80090e8 <strncpy>
 8009e4a:	9b06      	ldr	r3, [sp, #24]
 8009e4c:	785b      	ldrb	r3, [r3, #1]
 8009e4e:	b1a3      	cbz	r3, 8009e7a <_vfiprintf_r+0x70a>
 8009e50:	9b06      	ldr	r3, [sp, #24]
 8009e52:	3301      	adds	r3, #1
 8009e54:	9306      	str	r3, [sp, #24]
 8009e56:	f04f 0a00 	mov.w	sl, #0
 8009e5a:	220a      	movs	r2, #10
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	4620      	mov	r0, r4
 8009e60:	4629      	mov	r1, r5
 8009e62:	f7f6 fea1 	bl	8000ba8 <__aeabi_uldivmod>
 8009e66:	2d00      	cmp	r5, #0
 8009e68:	bf08      	it	eq
 8009e6a:	2c0a      	cmpeq	r4, #10
 8009e6c:	f0c0 80fd 	bcc.w	800a06a <_vfiprintf_r+0x8fa>
 8009e70:	4604      	mov	r4, r0
 8009e72:	460d      	mov	r5, r1
 8009e74:	f8cd 8020 	str.w	r8, [sp, #32]
 8009e78:	e7c2      	b.n	8009e00 <_vfiprintf_r+0x690>
 8009e7a:	469a      	mov	sl, r3
 8009e7c:	e7ed      	b.n	8009e5a <_vfiprintf_r+0x6ea>
 8009e7e:	9a05      	ldr	r2, [sp, #20]
 8009e80:	f004 030f 	and.w	r3, r4, #15
 8009e84:	5cd3      	ldrb	r3, [r2, r3]
 8009e86:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8009e8a:	0923      	lsrs	r3, r4, #4
 8009e8c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8009e90:	092a      	lsrs	r2, r5, #4
 8009e92:	461c      	mov	r4, r3
 8009e94:	4615      	mov	r5, r2
 8009e96:	ea54 0305 	orrs.w	r3, r4, r5
 8009e9a:	d1f0      	bne.n	8009e7e <_vfiprintf_r+0x70e>
 8009e9c:	e0e5      	b.n	800a06a <_vfiprintf_r+0x8fa>
 8009e9e:	b933      	cbnz	r3, 8009eae <_vfiprintf_r+0x73e>
 8009ea0:	f01a 0f01 	tst.w	sl, #1
 8009ea4:	d003      	beq.n	8009eae <_vfiprintf_r+0x73e>
 8009ea6:	2330      	movs	r3, #48	; 0x30
 8009ea8:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 8009eac:	e79d      	b.n	8009dea <_vfiprintf_r+0x67a>
 8009eae:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 8009eb2:	e0da      	b.n	800a06a <_vfiprintf_r+0x8fa>
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 80a4 	beq.w	800a002 <_vfiprintf_r+0x892>
 8009eba:	2100      	movs	r1, #0
 8009ebc:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8009ec0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 8009ec4:	46a3      	mov	fp, r4
 8009ec6:	e5e7      	b.n	8009a98 <_vfiprintf_r+0x328>
 8009ec8:	4605      	mov	r5, r0
 8009eca:	e68c      	b.n	8009be6 <_vfiprintf_r+0x476>
 8009ecc:	2010      	movs	r0, #16
 8009ece:	4402      	add	r2, r0
 8009ed0:	2b07      	cmp	r3, #7
 8009ed2:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009ed6:	6070      	str	r0, [r6, #4]
 8009ed8:	dd07      	ble.n	8009eea <_vfiprintf_r+0x77a>
 8009eda:	aa0c      	add	r2, sp, #48	; 0x30
 8009edc:	4639      	mov	r1, r7
 8009ede:	4648      	mov	r0, r9
 8009ee0:	f7ff fc14 	bl	800970c <__sprint_r>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d16b      	bne.n	8009fc0 <_vfiprintf_r+0x850>
 8009ee8:	a90f      	add	r1, sp, #60	; 0x3c
 8009eea:	3c10      	subs	r4, #16
 8009eec:	460e      	mov	r6, r1
 8009eee:	e695      	b.n	8009c1c <_vfiprintf_r+0x4ac>
 8009ef0:	460e      	mov	r6, r1
 8009ef2:	e6ae      	b.n	8009c52 <_vfiprintf_r+0x4e2>
 8009ef4:	aa0c      	add	r2, sp, #48	; 0x30
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	4648      	mov	r0, r9
 8009efa:	f7ff fc07 	bl	800970c <__sprint_r>
 8009efe:	2800      	cmp	r0, #0
 8009f00:	d15e      	bne.n	8009fc0 <_vfiprintf_r+0x850>
 8009f02:	ae0f      	add	r6, sp, #60	; 0x3c
 8009f04:	e6b7      	b.n	8009c76 <_vfiprintf_r+0x506>
 8009f06:	bf00      	nop
 8009f08:	0800aef2 	.word	0x0800aef2
 8009f0c:	0800af02 	.word	0x0800af02
 8009f10:	0800ac99 	.word	0x0800ac99
 8009f14:	aa0c      	add	r2, sp, #48	; 0x30
 8009f16:	4639      	mov	r1, r7
 8009f18:	4648      	mov	r0, r9
 8009f1a:	f7ff fbf7 	bl	800970c <__sprint_r>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d14e      	bne.n	8009fc0 <_vfiprintf_r+0x850>
 8009f22:	ae0f      	add	r6, sp, #60	; 0x3c
 8009f24:	e6b7      	b.n	8009c96 <_vfiprintf_r+0x526>
 8009f26:	2010      	movs	r0, #16
 8009f28:	4402      	add	r2, r0
 8009f2a:	2b07      	cmp	r3, #7
 8009f2c:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 8009f30:	6070      	str	r0, [r6, #4]
 8009f32:	dd07      	ble.n	8009f44 <_vfiprintf_r+0x7d4>
 8009f34:	aa0c      	add	r2, sp, #48	; 0x30
 8009f36:	4639      	mov	r1, r7
 8009f38:	4648      	mov	r0, r9
 8009f3a:	f7ff fbe7 	bl	800970c <__sprint_r>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d13e      	bne.n	8009fc0 <_vfiprintf_r+0x850>
 8009f42:	a90f      	add	r1, sp, #60	; 0x3c
 8009f44:	3c10      	subs	r4, #16
 8009f46:	460e      	mov	r6, r1
 8009f48:	e6ad      	b.n	8009ca6 <_vfiprintf_r+0x536>
 8009f4a:	460e      	mov	r6, r1
 8009f4c:	e6c6      	b.n	8009cdc <_vfiprintf_r+0x56c>
 8009f4e:	2010      	movs	r0, #16
 8009f50:	4401      	add	r1, r0
 8009f52:	2b07      	cmp	r3, #7
 8009f54:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009f58:	6070      	str	r0, [r6, #4]
 8009f5a:	dd06      	ble.n	8009f6a <_vfiprintf_r+0x7fa>
 8009f5c:	aa0c      	add	r2, sp, #48	; 0x30
 8009f5e:	4639      	mov	r1, r7
 8009f60:	4648      	mov	r0, r9
 8009f62:	f7ff fbd3 	bl	800970c <__sprint_r>
 8009f66:	bb58      	cbnz	r0, 8009fc0 <_vfiprintf_r+0x850>
 8009f68:	aa0f      	add	r2, sp, #60	; 0x3c
 8009f6a:	3c10      	subs	r4, #16
 8009f6c:	4616      	mov	r6, r2
 8009f6e:	e6ba      	b.n	8009ce6 <_vfiprintf_r+0x576>
 8009f70:	4616      	mov	r6, r2
 8009f72:	e6d2      	b.n	8009d1a <_vfiprintf_r+0x5aa>
 8009f74:	aa0c      	add	r2, sp, #48	; 0x30
 8009f76:	4639      	mov	r1, r7
 8009f78:	4648      	mov	r0, r9
 8009f7a:	f7ff fbc7 	bl	800970c <__sprint_r>
 8009f7e:	b9f8      	cbnz	r0, 8009fc0 <_vfiprintf_r+0x850>
 8009f80:	ab0f      	add	r3, sp, #60	; 0x3c
 8009f82:	e6d9      	b.n	8009d38 <_vfiprintf_r+0x5c8>
 8009f84:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8009f88:	1a54      	subs	r4, r2, r1
 8009f8a:	2c00      	cmp	r4, #0
 8009f8c:	f77f aed8 	ble.w	8009d40 <_vfiprintf_r+0x5d0>
 8009f90:	4d3a      	ldr	r5, [pc, #232]	; (800a07c <_vfiprintf_r+0x90c>)
 8009f92:	2610      	movs	r6, #16
 8009f94:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8009f98:	2c10      	cmp	r4, #16
 8009f9a:	f102 0201 	add.w	r2, r2, #1
 8009f9e:	601d      	str	r5, [r3, #0]
 8009fa0:	dc1d      	bgt.n	8009fde <_vfiprintf_r+0x86e>
 8009fa2:	605c      	str	r4, [r3, #4]
 8009fa4:	2a07      	cmp	r2, #7
 8009fa6:	440c      	add	r4, r1
 8009fa8:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8009fac:	f77f aec8 	ble.w	8009d40 <_vfiprintf_r+0x5d0>
 8009fb0:	aa0c      	add	r2, sp, #48	; 0x30
 8009fb2:	4639      	mov	r1, r7
 8009fb4:	4648      	mov	r0, r9
 8009fb6:	f7ff fba9 	bl	800970c <__sprint_r>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	f43f aec0 	beq.w	8009d40 <_vfiprintf_r+0x5d0>
 8009fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fc2:	07d9      	lsls	r1, r3, #31
 8009fc4:	d405      	bmi.n	8009fd2 <_vfiprintf_r+0x862>
 8009fc6:	89bb      	ldrh	r3, [r7, #12]
 8009fc8:	059a      	lsls	r2, r3, #22
 8009fca:	d402      	bmi.n	8009fd2 <_vfiprintf_r+0x862>
 8009fcc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009fce:	f7fe fab6 	bl	800853e <__retarget_lock_release_recursive>
 8009fd2:	89bb      	ldrh	r3, [r7, #12]
 8009fd4:	065b      	lsls	r3, r3, #25
 8009fd6:	f57f abfe 	bpl.w	80097d6 <_vfiprintf_r+0x66>
 8009fda:	f7ff bbf9 	b.w	80097d0 <_vfiprintf_r+0x60>
 8009fde:	3110      	adds	r1, #16
 8009fe0:	2a07      	cmp	r2, #7
 8009fe2:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 8009fe6:	605e      	str	r6, [r3, #4]
 8009fe8:	dc02      	bgt.n	8009ff0 <_vfiprintf_r+0x880>
 8009fea:	3308      	adds	r3, #8
 8009fec:	3c10      	subs	r4, #16
 8009fee:	e7d1      	b.n	8009f94 <_vfiprintf_r+0x824>
 8009ff0:	aa0c      	add	r2, sp, #48	; 0x30
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	4648      	mov	r0, r9
 8009ff6:	f7ff fb89 	bl	800970c <__sprint_r>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d1e0      	bne.n	8009fc0 <_vfiprintf_r+0x850>
 8009ffe:	ab0f      	add	r3, sp, #60	; 0x3c
 800a000:	e7f4      	b.n	8009fec <_vfiprintf_r+0x87c>
 800a002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a004:	b913      	cbnz	r3, 800a00c <_vfiprintf_r+0x89c>
 800a006:	2300      	movs	r3, #0
 800a008:	930d      	str	r3, [sp, #52]	; 0x34
 800a00a:	e7d9      	b.n	8009fc0 <_vfiprintf_r+0x850>
 800a00c:	aa0c      	add	r2, sp, #48	; 0x30
 800a00e:	4639      	mov	r1, r7
 800a010:	4648      	mov	r0, r9
 800a012:	f7ff fb7b 	bl	800970c <__sprint_r>
 800a016:	2800      	cmp	r0, #0
 800a018:	d0f5      	beq.n	800a006 <_vfiprintf_r+0x896>
 800a01a:	e7d1      	b.n	8009fc0 <_vfiprintf_r+0x850>
 800a01c:	ea54 0205 	orrs.w	r2, r4, r5
 800a020:	f8cd a010 	str.w	sl, [sp, #16]
 800a024:	f43f ada4 	beq.w	8009b70 <_vfiprintf_r+0x400>
 800a028:	2b01      	cmp	r3, #1
 800a02a:	f43f aed7 	beq.w	8009ddc <_vfiprintf_r+0x66c>
 800a02e:	2b02      	cmp	r3, #2
 800a030:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800a034:	f43f af23 	beq.w	8009e7e <_vfiprintf_r+0x70e>
 800a038:	08e2      	lsrs	r2, r4, #3
 800a03a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800a03e:	08e8      	lsrs	r0, r5, #3
 800a040:	f004 0307 	and.w	r3, r4, #7
 800a044:	4605      	mov	r5, r0
 800a046:	4614      	mov	r4, r2
 800a048:	3330      	adds	r3, #48	; 0x30
 800a04a:	ea54 0205 	orrs.w	r2, r4, r5
 800a04e:	4641      	mov	r1, r8
 800a050:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800a054:	d1f0      	bne.n	800a038 <_vfiprintf_r+0x8c8>
 800a056:	9a04      	ldr	r2, [sp, #16]
 800a058:	07d0      	lsls	r0, r2, #31
 800a05a:	d506      	bpl.n	800a06a <_vfiprintf_r+0x8fa>
 800a05c:	2b30      	cmp	r3, #48	; 0x30
 800a05e:	d004      	beq.n	800a06a <_vfiprintf_r+0x8fa>
 800a060:	2330      	movs	r3, #48	; 0x30
 800a062:	f808 3c01 	strb.w	r3, [r8, #-1]
 800a066:	f1a1 0802 	sub.w	r8, r1, #2
 800a06a:	ab38      	add	r3, sp, #224	; 0xe0
 800a06c:	eba3 0308 	sub.w	r3, r3, r8
 800a070:	9d00      	ldr	r5, [sp, #0]
 800a072:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	e5b5      	b.n	8009be6 <_vfiprintf_r+0x476>
 800a07a:	bf00      	nop
 800a07c:	0800aef2 	.word	0x0800aef2

0800a080 <__sbprintf>:
 800a080:	b570      	push	{r4, r5, r6, lr}
 800a082:	460c      	mov	r4, r1
 800a084:	8989      	ldrh	r1, [r1, #12]
 800a086:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800a08a:	f021 0102 	bic.w	r1, r1, #2
 800a08e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800a092:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a094:	911b      	str	r1, [sp, #108]	; 0x6c
 800a096:	89e1      	ldrh	r1, [r4, #14]
 800a098:	f8ad 1016 	strh.w	r1, [sp, #22]
 800a09c:	69e1      	ldr	r1, [r4, #28]
 800a09e:	9109      	str	r1, [sp, #36]	; 0x24
 800a0a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a0a2:	910b      	str	r1, [sp, #44]	; 0x2c
 800a0a4:	a91c      	add	r1, sp, #112	; 0x70
 800a0a6:	9102      	str	r1, [sp, #8]
 800a0a8:	9106      	str	r1, [sp, #24]
 800a0aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	9104      	str	r1, [sp, #16]
 800a0b2:	9107      	str	r1, [sp, #28]
 800a0b4:	a818      	add	r0, sp, #96	; 0x60
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	e9cd 3200 	strd	r3, r2, [sp]
 800a0bc:	9108      	str	r1, [sp, #32]
 800a0be:	f7fe fa3b 	bl	8008538 <__retarget_lock_init_recursive>
 800a0c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a0c6:	a902      	add	r1, sp, #8
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	f7ff fb51 	bl	8009770 <_vfiprintf_r>
 800a0ce:	1e05      	subs	r5, r0, #0
 800a0d0:	db07      	blt.n	800a0e2 <__sbprintf+0x62>
 800a0d2:	a902      	add	r1, sp, #8
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f000 f90f 	bl	800a2f8 <_fflush_r>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	bf18      	it	ne
 800a0de:	f04f 35ff 	movne.w	r5, #4294967295
 800a0e2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800a0e6:	9818      	ldr	r0, [sp, #96]	; 0x60
 800a0e8:	065b      	lsls	r3, r3, #25
 800a0ea:	bf42      	ittt	mi
 800a0ec:	89a3      	ldrhmi	r3, [r4, #12]
 800a0ee:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800a0f2:	81a3      	strhmi	r3, [r4, #12]
 800a0f4:	f7fe fa21 	bl	800853a <__retarget_lock_close_recursive>
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800a0fe:	bd70      	pop	{r4, r5, r6, pc}

0800a100 <__ascii_wctomb>:
 800a100:	b149      	cbz	r1, 800a116 <__ascii_wctomb+0x16>
 800a102:	2aff      	cmp	r2, #255	; 0xff
 800a104:	bf85      	ittet	hi
 800a106:	238a      	movhi	r3, #138	; 0x8a
 800a108:	6003      	strhi	r3, [r0, #0]
 800a10a:	700a      	strbls	r2, [r1, #0]
 800a10c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a110:	bf98      	it	ls
 800a112:	2001      	movls	r0, #1
 800a114:	4770      	bx	lr
 800a116:	4608      	mov	r0, r1
 800a118:	4770      	bx	lr
	...

0800a11c <__swsetup_r>:
 800a11c:	b538      	push	{r3, r4, r5, lr}
 800a11e:	4b2a      	ldr	r3, [pc, #168]	; (800a1c8 <__swsetup_r+0xac>)
 800a120:	4605      	mov	r5, r0
 800a122:	6818      	ldr	r0, [r3, #0]
 800a124:	460c      	mov	r4, r1
 800a126:	b118      	cbz	r0, 800a130 <__swsetup_r+0x14>
 800a128:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a12a:	b90b      	cbnz	r3, 800a130 <__swsetup_r+0x14>
 800a12c:	f000 f950 	bl	800a3d0 <__sinit>
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a136:	0718      	lsls	r0, r3, #28
 800a138:	d422      	bmi.n	800a180 <__swsetup_r+0x64>
 800a13a:	06d9      	lsls	r1, r3, #27
 800a13c:	d407      	bmi.n	800a14e <__swsetup_r+0x32>
 800a13e:	2309      	movs	r3, #9
 800a140:	602b      	str	r3, [r5, #0]
 800a142:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a146:	81a3      	strh	r3, [r4, #12]
 800a148:	f04f 30ff 	mov.w	r0, #4294967295
 800a14c:	e034      	b.n	800a1b8 <__swsetup_r+0x9c>
 800a14e:	0758      	lsls	r0, r3, #29
 800a150:	d512      	bpl.n	800a178 <__swsetup_r+0x5c>
 800a152:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a154:	b141      	cbz	r1, 800a168 <__swsetup_r+0x4c>
 800a156:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a15a:	4299      	cmp	r1, r3
 800a15c:	d002      	beq.n	800a164 <__swsetup_r+0x48>
 800a15e:	4628      	mov	r0, r5
 800a160:	f7fe f926 	bl	80083b0 <_free_r>
 800a164:	2300      	movs	r3, #0
 800a166:	6323      	str	r3, [r4, #48]	; 0x30
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a16e:	81a3      	strh	r3, [r4, #12]
 800a170:	2300      	movs	r3, #0
 800a172:	6063      	str	r3, [r4, #4]
 800a174:	6923      	ldr	r3, [r4, #16]
 800a176:	6023      	str	r3, [r4, #0]
 800a178:	89a3      	ldrh	r3, [r4, #12]
 800a17a:	f043 0308 	orr.w	r3, r3, #8
 800a17e:	81a3      	strh	r3, [r4, #12]
 800a180:	6923      	ldr	r3, [r4, #16]
 800a182:	b94b      	cbnz	r3, 800a198 <__swsetup_r+0x7c>
 800a184:	89a3      	ldrh	r3, [r4, #12]
 800a186:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a18a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a18e:	d003      	beq.n	800a198 <__swsetup_r+0x7c>
 800a190:	4621      	mov	r1, r4
 800a192:	4628      	mov	r0, r5
 800a194:	f000 fb44 	bl	800a820 <__smakebuf_r>
 800a198:	89a0      	ldrh	r0, [r4, #12]
 800a19a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a19e:	f010 0301 	ands.w	r3, r0, #1
 800a1a2:	d00a      	beq.n	800a1ba <__swsetup_r+0x9e>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	60a3      	str	r3, [r4, #8]
 800a1a8:	6963      	ldr	r3, [r4, #20]
 800a1aa:	425b      	negs	r3, r3
 800a1ac:	61a3      	str	r3, [r4, #24]
 800a1ae:	6923      	ldr	r3, [r4, #16]
 800a1b0:	b943      	cbnz	r3, 800a1c4 <__swsetup_r+0xa8>
 800a1b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1b6:	d1c4      	bne.n	800a142 <__swsetup_r+0x26>
 800a1b8:	bd38      	pop	{r3, r4, r5, pc}
 800a1ba:	0781      	lsls	r1, r0, #30
 800a1bc:	bf58      	it	pl
 800a1be:	6963      	ldrpl	r3, [r4, #20]
 800a1c0:	60a3      	str	r3, [r4, #8]
 800a1c2:	e7f4      	b.n	800a1ae <__swsetup_r+0x92>
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	e7f7      	b.n	800a1b8 <__swsetup_r+0x9c>
 800a1c8:	2000000c 	.word	0x2000000c

0800a1cc <abort>:
 800a1cc:	b508      	push	{r3, lr}
 800a1ce:	2006      	movs	r0, #6
 800a1d0:	f000 fb90 	bl	800a8f4 <raise>
 800a1d4:	2001      	movs	r0, #1
 800a1d6:	f7f7 ffd1 	bl	800217c <_exit>
	...

0800a1dc <__sflush_r>:
 800a1dc:	898b      	ldrh	r3, [r1, #12]
 800a1de:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e6:	4605      	mov	r5, r0
 800a1e8:	0718      	lsls	r0, r3, #28
 800a1ea:	460c      	mov	r4, r1
 800a1ec:	d45f      	bmi.n	800a2ae <__sflush_r+0xd2>
 800a1ee:	684b      	ldr	r3, [r1, #4]
 800a1f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	818a      	strh	r2, [r1, #12]
 800a1f8:	dc05      	bgt.n	800a206 <__sflush_r+0x2a>
 800a1fa:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	dc02      	bgt.n	800a206 <__sflush_r+0x2a>
 800a200:	2000      	movs	r0, #0
 800a202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a208:	2e00      	cmp	r6, #0
 800a20a:	d0f9      	beq.n	800a200 <__sflush_r+0x24>
 800a20c:	2300      	movs	r3, #0
 800a20e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a212:	682f      	ldr	r7, [r5, #0]
 800a214:	602b      	str	r3, [r5, #0]
 800a216:	d036      	beq.n	800a286 <__sflush_r+0xaa>
 800a218:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a21a:	89a3      	ldrh	r3, [r4, #12]
 800a21c:	075a      	lsls	r2, r3, #29
 800a21e:	d505      	bpl.n	800a22c <__sflush_r+0x50>
 800a220:	6863      	ldr	r3, [r4, #4]
 800a222:	1ac0      	subs	r0, r0, r3
 800a224:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a226:	b10b      	cbz	r3, 800a22c <__sflush_r+0x50>
 800a228:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a22a:	1ac0      	subs	r0, r0, r3
 800a22c:	2300      	movs	r3, #0
 800a22e:	4602      	mov	r2, r0
 800a230:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a232:	69e1      	ldr	r1, [r4, #28]
 800a234:	4628      	mov	r0, r5
 800a236:	47b0      	blx	r6
 800a238:	1c43      	adds	r3, r0, #1
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	d106      	bne.n	800a24c <__sflush_r+0x70>
 800a23e:	6829      	ldr	r1, [r5, #0]
 800a240:	291d      	cmp	r1, #29
 800a242:	d830      	bhi.n	800a2a6 <__sflush_r+0xca>
 800a244:	4a2b      	ldr	r2, [pc, #172]	; (800a2f4 <__sflush_r+0x118>)
 800a246:	40ca      	lsrs	r2, r1
 800a248:	07d6      	lsls	r6, r2, #31
 800a24a:	d52c      	bpl.n	800a2a6 <__sflush_r+0xca>
 800a24c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a250:	b21b      	sxth	r3, r3
 800a252:	2200      	movs	r2, #0
 800a254:	6062      	str	r2, [r4, #4]
 800a256:	04d9      	lsls	r1, r3, #19
 800a258:	6922      	ldr	r2, [r4, #16]
 800a25a:	81a3      	strh	r3, [r4, #12]
 800a25c:	6022      	str	r2, [r4, #0]
 800a25e:	d504      	bpl.n	800a26a <__sflush_r+0x8e>
 800a260:	1c42      	adds	r2, r0, #1
 800a262:	d101      	bne.n	800a268 <__sflush_r+0x8c>
 800a264:	682b      	ldr	r3, [r5, #0]
 800a266:	b903      	cbnz	r3, 800a26a <__sflush_r+0x8e>
 800a268:	6520      	str	r0, [r4, #80]	; 0x50
 800a26a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a26c:	602f      	str	r7, [r5, #0]
 800a26e:	2900      	cmp	r1, #0
 800a270:	d0c6      	beq.n	800a200 <__sflush_r+0x24>
 800a272:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a276:	4299      	cmp	r1, r3
 800a278:	d002      	beq.n	800a280 <__sflush_r+0xa4>
 800a27a:	4628      	mov	r0, r5
 800a27c:	f7fe f898 	bl	80083b0 <_free_r>
 800a280:	2000      	movs	r0, #0
 800a282:	6320      	str	r0, [r4, #48]	; 0x30
 800a284:	e7bd      	b.n	800a202 <__sflush_r+0x26>
 800a286:	69e1      	ldr	r1, [r4, #28]
 800a288:	2301      	movs	r3, #1
 800a28a:	4628      	mov	r0, r5
 800a28c:	47b0      	blx	r6
 800a28e:	1c41      	adds	r1, r0, #1
 800a290:	d1c3      	bne.n	800a21a <__sflush_r+0x3e>
 800a292:	682b      	ldr	r3, [r5, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d0c0      	beq.n	800a21a <__sflush_r+0x3e>
 800a298:	2b1d      	cmp	r3, #29
 800a29a:	d001      	beq.n	800a2a0 <__sflush_r+0xc4>
 800a29c:	2b16      	cmp	r3, #22
 800a29e:	d101      	bne.n	800a2a4 <__sflush_r+0xc8>
 800a2a0:	602f      	str	r7, [r5, #0]
 800a2a2:	e7ad      	b.n	800a200 <__sflush_r+0x24>
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2aa:	81a3      	strh	r3, [r4, #12]
 800a2ac:	e7a9      	b.n	800a202 <__sflush_r+0x26>
 800a2ae:	690f      	ldr	r7, [r1, #16]
 800a2b0:	2f00      	cmp	r7, #0
 800a2b2:	d0a5      	beq.n	800a200 <__sflush_r+0x24>
 800a2b4:	079b      	lsls	r3, r3, #30
 800a2b6:	680e      	ldr	r6, [r1, #0]
 800a2b8:	bf08      	it	eq
 800a2ba:	694b      	ldreq	r3, [r1, #20]
 800a2bc:	600f      	str	r7, [r1, #0]
 800a2be:	bf18      	it	ne
 800a2c0:	2300      	movne	r3, #0
 800a2c2:	eba6 0807 	sub.w	r8, r6, r7
 800a2c6:	608b      	str	r3, [r1, #8]
 800a2c8:	f1b8 0f00 	cmp.w	r8, #0
 800a2cc:	dd98      	ble.n	800a200 <__sflush_r+0x24>
 800a2ce:	69e1      	ldr	r1, [r4, #28]
 800a2d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2d2:	4643      	mov	r3, r8
 800a2d4:	463a      	mov	r2, r7
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	47b0      	blx	r6
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	dc06      	bgt.n	800a2ec <__sflush_r+0x110>
 800a2de:	89a3      	ldrh	r3, [r4, #12]
 800a2e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2e4:	81a3      	strh	r3, [r4, #12]
 800a2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ea:	e78a      	b.n	800a202 <__sflush_r+0x26>
 800a2ec:	4407      	add	r7, r0
 800a2ee:	eba8 0800 	sub.w	r8, r8, r0
 800a2f2:	e7e9      	b.n	800a2c8 <__sflush_r+0xec>
 800a2f4:	20400001 	.word	0x20400001

0800a2f8 <_fflush_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	460c      	mov	r4, r1
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	b118      	cbz	r0, 800a308 <_fflush_r+0x10>
 800a300:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a302:	b90b      	cbnz	r3, 800a308 <_fflush_r+0x10>
 800a304:	f000 f864 	bl	800a3d0 <__sinit>
 800a308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a30c:	b1bb      	cbz	r3, 800a33e <_fflush_r+0x46>
 800a30e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a310:	07d0      	lsls	r0, r2, #31
 800a312:	d404      	bmi.n	800a31e <_fflush_r+0x26>
 800a314:	0599      	lsls	r1, r3, #22
 800a316:	d402      	bmi.n	800a31e <_fflush_r+0x26>
 800a318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a31a:	f7fe f90f 	bl	800853c <__retarget_lock_acquire_recursive>
 800a31e:	4628      	mov	r0, r5
 800a320:	4621      	mov	r1, r4
 800a322:	f7ff ff5b 	bl	800a1dc <__sflush_r>
 800a326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a328:	07da      	lsls	r2, r3, #31
 800a32a:	4605      	mov	r5, r0
 800a32c:	d405      	bmi.n	800a33a <_fflush_r+0x42>
 800a32e:	89a3      	ldrh	r3, [r4, #12]
 800a330:	059b      	lsls	r3, r3, #22
 800a332:	d402      	bmi.n	800a33a <_fflush_r+0x42>
 800a334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a336:	f7fe f902 	bl	800853e <__retarget_lock_release_recursive>
 800a33a:	4628      	mov	r0, r5
 800a33c:	bd38      	pop	{r3, r4, r5, pc}
 800a33e:	461d      	mov	r5, r3
 800a340:	e7fb      	b.n	800a33a <_fflush_r+0x42>
	...

0800a344 <std>:
 800a344:	2300      	movs	r3, #0
 800a346:	b510      	push	{r4, lr}
 800a348:	4604      	mov	r4, r0
 800a34a:	e9c0 3300 	strd	r3, r3, [r0]
 800a34e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a352:	6083      	str	r3, [r0, #8]
 800a354:	8181      	strh	r1, [r0, #12]
 800a356:	6643      	str	r3, [r0, #100]	; 0x64
 800a358:	81c2      	strh	r2, [r0, #14]
 800a35a:	6183      	str	r3, [r0, #24]
 800a35c:	4619      	mov	r1, r3
 800a35e:	2208      	movs	r2, #8
 800a360:	305c      	adds	r0, #92	; 0x5c
 800a362:	f7fb ff2f 	bl	80061c4 <memset>
 800a366:	4b07      	ldr	r3, [pc, #28]	; (800a384 <std+0x40>)
 800a368:	6223      	str	r3, [r4, #32]
 800a36a:	4b07      	ldr	r3, [pc, #28]	; (800a388 <std+0x44>)
 800a36c:	6263      	str	r3, [r4, #36]	; 0x24
 800a36e:	4b07      	ldr	r3, [pc, #28]	; (800a38c <std+0x48>)
 800a370:	62a3      	str	r3, [r4, #40]	; 0x28
 800a372:	4b07      	ldr	r3, [pc, #28]	; (800a390 <std+0x4c>)
 800a374:	61e4      	str	r4, [r4, #28]
 800a376:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a378:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a380:	f7fe b8da 	b.w	8008538 <__retarget_lock_init_recursive>
 800a384:	0800a92d 	.word	0x0800a92d
 800a388:	0800a94f 	.word	0x0800a94f
 800a38c:	0800a987 	.word	0x0800a987
 800a390:	0800a9ab 	.word	0x0800a9ab

0800a394 <_cleanup_r>:
 800a394:	4901      	ldr	r1, [pc, #4]	; (800a39c <_cleanup_r+0x8>)
 800a396:	f000 b9f9 	b.w	800a78c <_fwalk_reent>
 800a39a:	bf00      	nop
 800a39c:	0800aab5 	.word	0x0800aab5

0800a3a0 <__sfp_lock_acquire>:
 800a3a0:	4801      	ldr	r0, [pc, #4]	; (800a3a8 <__sfp_lock_acquire+0x8>)
 800a3a2:	f7fe b8cb 	b.w	800853c <__retarget_lock_acquire_recursive>
 800a3a6:	bf00      	nop
 800a3a8:	20000bd0 	.word	0x20000bd0

0800a3ac <__sfp_lock_release>:
 800a3ac:	4801      	ldr	r0, [pc, #4]	; (800a3b4 <__sfp_lock_release+0x8>)
 800a3ae:	f7fe b8c6 	b.w	800853e <__retarget_lock_release_recursive>
 800a3b2:	bf00      	nop
 800a3b4:	20000bd0 	.word	0x20000bd0

0800a3b8 <__sinit_lock_acquire>:
 800a3b8:	4801      	ldr	r0, [pc, #4]	; (800a3c0 <__sinit_lock_acquire+0x8>)
 800a3ba:	f7fe b8bf 	b.w	800853c <__retarget_lock_acquire_recursive>
 800a3be:	bf00      	nop
 800a3c0:	20000bcb 	.word	0x20000bcb

0800a3c4 <__sinit_lock_release>:
 800a3c4:	4801      	ldr	r0, [pc, #4]	; (800a3cc <__sinit_lock_release+0x8>)
 800a3c6:	f7fe b8ba 	b.w	800853e <__retarget_lock_release_recursive>
 800a3ca:	bf00      	nop
 800a3cc:	20000bcb 	.word	0x20000bcb

0800a3d0 <__sinit>:
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	f7ff fff0 	bl	800a3b8 <__sinit_lock_acquire>
 800a3d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a3da:	b11a      	cbz	r2, 800a3e4 <__sinit+0x14>
 800a3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3e0:	f7ff bff0 	b.w	800a3c4 <__sinit_lock_release>
 800a3e4:	4b0d      	ldr	r3, [pc, #52]	; (800a41c <__sinit+0x4c>)
 800a3e6:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800a3ee:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800a3f2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800a3f6:	6860      	ldr	r0, [r4, #4]
 800a3f8:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800a3fc:	2104      	movs	r1, #4
 800a3fe:	f7ff ffa1 	bl	800a344 <std>
 800a402:	68a0      	ldr	r0, [r4, #8]
 800a404:	2201      	movs	r2, #1
 800a406:	2109      	movs	r1, #9
 800a408:	f7ff ff9c 	bl	800a344 <std>
 800a40c:	68e0      	ldr	r0, [r4, #12]
 800a40e:	2202      	movs	r2, #2
 800a410:	2112      	movs	r1, #18
 800a412:	f7ff ff97 	bl	800a344 <std>
 800a416:	2301      	movs	r3, #1
 800a418:	63a3      	str	r3, [r4, #56]	; 0x38
 800a41a:	e7df      	b.n	800a3dc <__sinit+0xc>
 800a41c:	0800a395 	.word	0x0800a395

0800a420 <__fputwc>:
 800a420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a424:	4680      	mov	r8, r0
 800a426:	460e      	mov	r6, r1
 800a428:	4615      	mov	r5, r2
 800a42a:	f7fe ff97 	bl	800935c <__locale_mb_cur_max>
 800a42e:	2801      	cmp	r0, #1
 800a430:	d11c      	bne.n	800a46c <__fputwc+0x4c>
 800a432:	1e73      	subs	r3, r6, #1
 800a434:	2bfe      	cmp	r3, #254	; 0xfe
 800a436:	d819      	bhi.n	800a46c <__fputwc+0x4c>
 800a438:	f88d 6004 	strb.w	r6, [sp, #4]
 800a43c:	4604      	mov	r4, r0
 800a43e:	2700      	movs	r7, #0
 800a440:	f10d 0904 	add.w	r9, sp, #4
 800a444:	42a7      	cmp	r7, r4
 800a446:	d020      	beq.n	800a48a <__fputwc+0x6a>
 800a448:	68ab      	ldr	r3, [r5, #8]
 800a44a:	f817 1009 	ldrb.w	r1, [r7, r9]
 800a44e:	3b01      	subs	r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	60ab      	str	r3, [r5, #8]
 800a454:	da04      	bge.n	800a460 <__fputwc+0x40>
 800a456:	69aa      	ldr	r2, [r5, #24]
 800a458:	4293      	cmp	r3, r2
 800a45a:	db1a      	blt.n	800a492 <__fputwc+0x72>
 800a45c:	290a      	cmp	r1, #10
 800a45e:	d018      	beq.n	800a492 <__fputwc+0x72>
 800a460:	682b      	ldr	r3, [r5, #0]
 800a462:	1c5a      	adds	r2, r3, #1
 800a464:	602a      	str	r2, [r5, #0]
 800a466:	7019      	strb	r1, [r3, #0]
 800a468:	3701      	adds	r7, #1
 800a46a:	e7eb      	b.n	800a444 <__fputwc+0x24>
 800a46c:	4632      	mov	r2, r6
 800a46e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800a472:	a901      	add	r1, sp, #4
 800a474:	4640      	mov	r0, r8
 800a476:	f000 fae5 	bl	800aa44 <_wcrtomb_r>
 800a47a:	1c42      	adds	r2, r0, #1
 800a47c:	4604      	mov	r4, r0
 800a47e:	d1de      	bne.n	800a43e <__fputwc+0x1e>
 800a480:	89ab      	ldrh	r3, [r5, #12]
 800a482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a486:	81ab      	strh	r3, [r5, #12]
 800a488:	4606      	mov	r6, r0
 800a48a:	4630      	mov	r0, r6
 800a48c:	b003      	add	sp, #12
 800a48e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a492:	462a      	mov	r2, r5
 800a494:	4640      	mov	r0, r8
 800a496:	f000 fa8c 	bl	800a9b2 <__swbuf_r>
 800a49a:	1c43      	adds	r3, r0, #1
 800a49c:	d1e4      	bne.n	800a468 <__fputwc+0x48>
 800a49e:	4606      	mov	r6, r0
 800a4a0:	e7f3      	b.n	800a48a <__fputwc+0x6a>

0800a4a2 <_fputwc_r>:
 800a4a2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800a4a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4a6:	4614      	mov	r4, r2
 800a4a8:	07da      	lsls	r2, r3, #31
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	d407      	bmi.n	800a4be <_fputwc_r+0x1c>
 800a4ae:	89a3      	ldrh	r3, [r4, #12]
 800a4b0:	059b      	lsls	r3, r3, #22
 800a4b2:	d404      	bmi.n	800a4be <_fputwc_r+0x1c>
 800a4b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4b6:	9101      	str	r1, [sp, #4]
 800a4b8:	f7fe f840 	bl	800853c <__retarget_lock_acquire_recursive>
 800a4bc:	9901      	ldr	r1, [sp, #4]
 800a4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4c2:	0498      	lsls	r0, r3, #18
 800a4c4:	d406      	bmi.n	800a4d4 <_fputwc_r+0x32>
 800a4c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a4ca:	81a3      	strh	r3, [r4, #12]
 800a4cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a4d2:	6663      	str	r3, [r4, #100]	; 0x64
 800a4d4:	4622      	mov	r2, r4
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f7ff ffa2 	bl	800a420 <__fputwc>
 800a4dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4de:	07da      	lsls	r2, r3, #31
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	d405      	bmi.n	800a4f0 <_fputwc_r+0x4e>
 800a4e4:	89a3      	ldrh	r3, [r4, #12]
 800a4e6:	059b      	lsls	r3, r3, #22
 800a4e8:	d402      	bmi.n	800a4f0 <_fputwc_r+0x4e>
 800a4ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ec:	f7fe f827 	bl	800853e <__retarget_lock_release_recursive>
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	b003      	add	sp, #12
 800a4f4:	bd30      	pop	{r4, r5, pc}
	...

0800a4f8 <__sfvwrite_r>:
 800a4f8:	6893      	ldr	r3, [r2, #8]
 800a4fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fe:	4606      	mov	r6, r0
 800a500:	460c      	mov	r4, r1
 800a502:	4690      	mov	r8, r2
 800a504:	b91b      	cbnz	r3, 800a50e <__sfvwrite_r+0x16>
 800a506:	2000      	movs	r0, #0
 800a508:	b003      	add	sp, #12
 800a50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50e:	898b      	ldrh	r3, [r1, #12]
 800a510:	0718      	lsls	r0, r3, #28
 800a512:	d550      	bpl.n	800a5b6 <__sfvwrite_r+0xbe>
 800a514:	690b      	ldr	r3, [r1, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d04d      	beq.n	800a5b6 <__sfvwrite_r+0xbe>
 800a51a:	89a3      	ldrh	r3, [r4, #12]
 800a51c:	f8d8 7000 	ldr.w	r7, [r8]
 800a520:	f013 0902 	ands.w	r9, r3, #2
 800a524:	d16c      	bne.n	800a600 <__sfvwrite_r+0x108>
 800a526:	f013 0301 	ands.w	r3, r3, #1
 800a52a:	f000 809c 	beq.w	800a666 <__sfvwrite_r+0x16e>
 800a52e:	4648      	mov	r0, r9
 800a530:	46ca      	mov	sl, r9
 800a532:	46cb      	mov	fp, r9
 800a534:	f1bb 0f00 	cmp.w	fp, #0
 800a538:	f000 8103 	beq.w	800a742 <__sfvwrite_r+0x24a>
 800a53c:	b950      	cbnz	r0, 800a554 <__sfvwrite_r+0x5c>
 800a53e:	465a      	mov	r2, fp
 800a540:	210a      	movs	r1, #10
 800a542:	4650      	mov	r0, sl
 800a544:	f7f5 fe44 	bl	80001d0 <memchr>
 800a548:	2800      	cmp	r0, #0
 800a54a:	f000 80ff 	beq.w	800a74c <__sfvwrite_r+0x254>
 800a54e:	3001      	adds	r0, #1
 800a550:	eba0 090a 	sub.w	r9, r0, sl
 800a554:	6820      	ldr	r0, [r4, #0]
 800a556:	6921      	ldr	r1, [r4, #16]
 800a558:	6963      	ldr	r3, [r4, #20]
 800a55a:	45d9      	cmp	r9, fp
 800a55c:	464a      	mov	r2, r9
 800a55e:	bf28      	it	cs
 800a560:	465a      	movcs	r2, fp
 800a562:	4288      	cmp	r0, r1
 800a564:	f240 80f5 	bls.w	800a752 <__sfvwrite_r+0x25a>
 800a568:	68a5      	ldr	r5, [r4, #8]
 800a56a:	441d      	add	r5, r3
 800a56c:	42aa      	cmp	r2, r5
 800a56e:	f340 80f0 	ble.w	800a752 <__sfvwrite_r+0x25a>
 800a572:	4651      	mov	r1, sl
 800a574:	462a      	mov	r2, r5
 800a576:	f7fe ff09 	bl	800938c <memmove>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	442b      	add	r3, r5
 800a57e:	6023      	str	r3, [r4, #0]
 800a580:	4621      	mov	r1, r4
 800a582:	4630      	mov	r0, r6
 800a584:	f7ff feb8 	bl	800a2f8 <_fflush_r>
 800a588:	2800      	cmp	r0, #0
 800a58a:	d167      	bne.n	800a65c <__sfvwrite_r+0x164>
 800a58c:	ebb9 0905 	subs.w	r9, r9, r5
 800a590:	f040 80f7 	bne.w	800a782 <__sfvwrite_r+0x28a>
 800a594:	4621      	mov	r1, r4
 800a596:	4630      	mov	r0, r6
 800a598:	f7ff feae 	bl	800a2f8 <_fflush_r>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d15d      	bne.n	800a65c <__sfvwrite_r+0x164>
 800a5a0:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800a5a4:	44aa      	add	sl, r5
 800a5a6:	ebab 0b05 	sub.w	fp, fp, r5
 800a5aa:	1b55      	subs	r5, r2, r5
 800a5ac:	f8c8 5008 	str.w	r5, [r8, #8]
 800a5b0:	2d00      	cmp	r5, #0
 800a5b2:	d1bf      	bne.n	800a534 <__sfvwrite_r+0x3c>
 800a5b4:	e7a7      	b.n	800a506 <__sfvwrite_r+0xe>
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	f7ff fdaf 	bl	800a11c <__swsetup_r>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d0ab      	beq.n	800a51a <__sfvwrite_r+0x22>
 800a5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c6:	e79f      	b.n	800a508 <__sfvwrite_r+0x10>
 800a5c8:	e9d7 b900 	ldrd	fp, r9, [r7]
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	f1b9 0f00 	cmp.w	r9, #0
 800a5d2:	d0f9      	beq.n	800a5c8 <__sfvwrite_r+0xd0>
 800a5d4:	45d1      	cmp	r9, sl
 800a5d6:	464b      	mov	r3, r9
 800a5d8:	69e1      	ldr	r1, [r4, #28]
 800a5da:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a5dc:	bf28      	it	cs
 800a5de:	4653      	movcs	r3, sl
 800a5e0:	465a      	mov	r2, fp
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	47a8      	blx	r5
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	dd38      	ble.n	800a65c <__sfvwrite_r+0x164>
 800a5ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5ee:	4483      	add	fp, r0
 800a5f0:	eba9 0900 	sub.w	r9, r9, r0
 800a5f4:	1a18      	subs	r0, r3, r0
 800a5f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d1e7      	bne.n	800a5ce <__sfvwrite_r+0xd6>
 800a5fe:	e782      	b.n	800a506 <__sfvwrite_r+0xe>
 800a600:	f04f 0b00 	mov.w	fp, #0
 800a604:	f8df a180 	ldr.w	sl, [pc, #384]	; 800a788 <__sfvwrite_r+0x290>
 800a608:	46d9      	mov	r9, fp
 800a60a:	e7e0      	b.n	800a5ce <__sfvwrite_r+0xd6>
 800a60c:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800a610:	3708      	adds	r7, #8
 800a612:	f1ba 0f00 	cmp.w	sl, #0
 800a616:	d0f9      	beq.n	800a60c <__sfvwrite_r+0x114>
 800a618:	89a3      	ldrh	r3, [r4, #12]
 800a61a:	68a2      	ldr	r2, [r4, #8]
 800a61c:	6820      	ldr	r0, [r4, #0]
 800a61e:	0599      	lsls	r1, r3, #22
 800a620:	d563      	bpl.n	800a6ea <__sfvwrite_r+0x1f2>
 800a622:	4552      	cmp	r2, sl
 800a624:	d836      	bhi.n	800a694 <__sfvwrite_r+0x19c>
 800a626:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800a62a:	d033      	beq.n	800a694 <__sfvwrite_r+0x19c>
 800a62c:	6921      	ldr	r1, [r4, #16]
 800a62e:	6965      	ldr	r5, [r4, #20]
 800a630:	eba0 0b01 	sub.w	fp, r0, r1
 800a634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a63c:	f10b 0201 	add.w	r2, fp, #1
 800a640:	106d      	asrs	r5, r5, #1
 800a642:	4452      	add	r2, sl
 800a644:	4295      	cmp	r5, r2
 800a646:	bf38      	it	cc
 800a648:	4615      	movcc	r5, r2
 800a64a:	055b      	lsls	r3, r3, #21
 800a64c:	d53d      	bpl.n	800a6ca <__sfvwrite_r+0x1d2>
 800a64e:	4629      	mov	r1, r5
 800a650:	4630      	mov	r0, r6
 800a652:	f7fd ff75 	bl	8008540 <_malloc_r>
 800a656:	b948      	cbnz	r0, 800a66c <__sfvwrite_r+0x174>
 800a658:	230c      	movs	r3, #12
 800a65a:	6033      	str	r3, [r6, #0]
 800a65c:	89a3      	ldrh	r3, [r4, #12]
 800a65e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a662:	81a3      	strh	r3, [r4, #12]
 800a664:	e7ad      	b.n	800a5c2 <__sfvwrite_r+0xca>
 800a666:	4699      	mov	r9, r3
 800a668:	469a      	mov	sl, r3
 800a66a:	e7d2      	b.n	800a612 <__sfvwrite_r+0x11a>
 800a66c:	465a      	mov	r2, fp
 800a66e:	6921      	ldr	r1, [r4, #16]
 800a670:	9001      	str	r0, [sp, #4]
 800a672:	f7fe f9a7 	bl	80089c4 <memcpy>
 800a676:	89a2      	ldrh	r2, [r4, #12]
 800a678:	9b01      	ldr	r3, [sp, #4]
 800a67a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a67e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a682:	81a2      	strh	r2, [r4, #12]
 800a684:	6123      	str	r3, [r4, #16]
 800a686:	6165      	str	r5, [r4, #20]
 800a688:	445b      	add	r3, fp
 800a68a:	eba5 050b 	sub.w	r5, r5, fp
 800a68e:	6023      	str	r3, [r4, #0]
 800a690:	4652      	mov	r2, sl
 800a692:	60a5      	str	r5, [r4, #8]
 800a694:	4552      	cmp	r2, sl
 800a696:	bf28      	it	cs
 800a698:	4652      	movcs	r2, sl
 800a69a:	6820      	ldr	r0, [r4, #0]
 800a69c:	9201      	str	r2, [sp, #4]
 800a69e:	4649      	mov	r1, r9
 800a6a0:	f7fe fe74 	bl	800938c <memmove>
 800a6a4:	68a3      	ldr	r3, [r4, #8]
 800a6a6:	9a01      	ldr	r2, [sp, #4]
 800a6a8:	1a9b      	subs	r3, r3, r2
 800a6aa:	60a3      	str	r3, [r4, #8]
 800a6ac:	6823      	ldr	r3, [r4, #0]
 800a6ae:	441a      	add	r2, r3
 800a6b0:	4655      	mov	r5, sl
 800a6b2:	6022      	str	r2, [r4, #0]
 800a6b4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800a6b8:	44a9      	add	r9, r5
 800a6ba:	ebaa 0a05 	sub.w	sl, sl, r5
 800a6be:	1b45      	subs	r5, r0, r5
 800a6c0:	f8c8 5008 	str.w	r5, [r8, #8]
 800a6c4:	2d00      	cmp	r5, #0
 800a6c6:	d1a4      	bne.n	800a612 <__sfvwrite_r+0x11a>
 800a6c8:	e71d      	b.n	800a506 <__sfvwrite_r+0xe>
 800a6ca:	462a      	mov	r2, r5
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f7fe fe77 	bl	80093c0 <_realloc_r>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d1d5      	bne.n	800a684 <__sfvwrite_r+0x18c>
 800a6d8:	6921      	ldr	r1, [r4, #16]
 800a6da:	4630      	mov	r0, r6
 800a6dc:	f7fd fe68 	bl	80083b0 <_free_r>
 800a6e0:	89a3      	ldrh	r3, [r4, #12]
 800a6e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6e6:	81a3      	strh	r3, [r4, #12]
 800a6e8:	e7b6      	b.n	800a658 <__sfvwrite_r+0x160>
 800a6ea:	6923      	ldr	r3, [r4, #16]
 800a6ec:	4283      	cmp	r3, r0
 800a6ee:	d302      	bcc.n	800a6f6 <__sfvwrite_r+0x1fe>
 800a6f0:	6961      	ldr	r1, [r4, #20]
 800a6f2:	4551      	cmp	r1, sl
 800a6f4:	d915      	bls.n	800a722 <__sfvwrite_r+0x22a>
 800a6f6:	4552      	cmp	r2, sl
 800a6f8:	bf28      	it	cs
 800a6fa:	4652      	movcs	r2, sl
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	4615      	mov	r5, r2
 800a700:	f7fe fe44 	bl	800938c <memmove>
 800a704:	68a3      	ldr	r3, [r4, #8]
 800a706:	6822      	ldr	r2, [r4, #0]
 800a708:	1b5b      	subs	r3, r3, r5
 800a70a:	442a      	add	r2, r5
 800a70c:	60a3      	str	r3, [r4, #8]
 800a70e:	6022      	str	r2, [r4, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1cf      	bne.n	800a6b4 <__sfvwrite_r+0x1bc>
 800a714:	4621      	mov	r1, r4
 800a716:	4630      	mov	r0, r6
 800a718:	f7ff fdee 	bl	800a2f8 <_fflush_r>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d0c9      	beq.n	800a6b4 <__sfvwrite_r+0x1bc>
 800a720:	e79c      	b.n	800a65c <__sfvwrite_r+0x164>
 800a722:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a726:	459a      	cmp	sl, r3
 800a728:	bf38      	it	cc
 800a72a:	4653      	movcc	r3, sl
 800a72c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a72e:	fb93 f3f1 	sdiv	r3, r3, r1
 800a732:	464a      	mov	r2, r9
 800a734:	434b      	muls	r3, r1
 800a736:	4630      	mov	r0, r6
 800a738:	69e1      	ldr	r1, [r4, #28]
 800a73a:	47a8      	blx	r5
 800a73c:	1e05      	subs	r5, r0, #0
 800a73e:	dcb9      	bgt.n	800a6b4 <__sfvwrite_r+0x1bc>
 800a740:	e78c      	b.n	800a65c <__sfvwrite_r+0x164>
 800a742:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a746:	2000      	movs	r0, #0
 800a748:	3708      	adds	r7, #8
 800a74a:	e6f3      	b.n	800a534 <__sfvwrite_r+0x3c>
 800a74c:	f10b 0901 	add.w	r9, fp, #1
 800a750:	e700      	b.n	800a554 <__sfvwrite_r+0x5c>
 800a752:	4293      	cmp	r3, r2
 800a754:	dc08      	bgt.n	800a768 <__sfvwrite_r+0x270>
 800a756:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a758:	69e1      	ldr	r1, [r4, #28]
 800a75a:	4652      	mov	r2, sl
 800a75c:	4630      	mov	r0, r6
 800a75e:	47a8      	blx	r5
 800a760:	1e05      	subs	r5, r0, #0
 800a762:	f73f af13 	bgt.w	800a58c <__sfvwrite_r+0x94>
 800a766:	e779      	b.n	800a65c <__sfvwrite_r+0x164>
 800a768:	4651      	mov	r1, sl
 800a76a:	9201      	str	r2, [sp, #4]
 800a76c:	f7fe fe0e 	bl	800938c <memmove>
 800a770:	9a01      	ldr	r2, [sp, #4]
 800a772:	68a3      	ldr	r3, [r4, #8]
 800a774:	1a9b      	subs	r3, r3, r2
 800a776:	60a3      	str	r3, [r4, #8]
 800a778:	6823      	ldr	r3, [r4, #0]
 800a77a:	4413      	add	r3, r2
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	4615      	mov	r5, r2
 800a780:	e704      	b.n	800a58c <__sfvwrite_r+0x94>
 800a782:	2001      	movs	r0, #1
 800a784:	e70c      	b.n	800a5a0 <__sfvwrite_r+0xa8>
 800a786:	bf00      	nop
 800a788:	7ffffc00 	.word	0x7ffffc00

0800a78c <_fwalk_reent>:
 800a78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a790:	4606      	mov	r6, r0
 800a792:	4688      	mov	r8, r1
 800a794:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800a798:	2700      	movs	r7, #0
 800a79a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a79e:	f1b9 0901 	subs.w	r9, r9, #1
 800a7a2:	d505      	bpl.n	800a7b0 <_fwalk_reent+0x24>
 800a7a4:	6824      	ldr	r4, [r4, #0]
 800a7a6:	2c00      	cmp	r4, #0
 800a7a8:	d1f7      	bne.n	800a79a <_fwalk_reent+0xe>
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7b0:	89ab      	ldrh	r3, [r5, #12]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d907      	bls.n	800a7c6 <_fwalk_reent+0x3a>
 800a7b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	d003      	beq.n	800a7c6 <_fwalk_reent+0x3a>
 800a7be:	4629      	mov	r1, r5
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	47c0      	blx	r8
 800a7c4:	4307      	orrs	r7, r0
 800a7c6:	3568      	adds	r5, #104	; 0x68
 800a7c8:	e7e9      	b.n	800a79e <_fwalk_reent+0x12>

0800a7ca <__swhatbuf_r>:
 800a7ca:	b570      	push	{r4, r5, r6, lr}
 800a7cc:	460e      	mov	r6, r1
 800a7ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7d2:	2900      	cmp	r1, #0
 800a7d4:	b096      	sub	sp, #88	; 0x58
 800a7d6:	4614      	mov	r4, r2
 800a7d8:	461d      	mov	r5, r3
 800a7da:	da09      	bge.n	800a7f0 <__swhatbuf_r+0x26>
 800a7dc:	89b3      	ldrh	r3, [r6, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a7e4:	602a      	str	r2, [r5, #0]
 800a7e6:	d116      	bne.n	800a816 <__swhatbuf_r+0x4c>
 800a7e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7ec:	6023      	str	r3, [r4, #0]
 800a7ee:	e015      	b.n	800a81c <__swhatbuf_r+0x52>
 800a7f0:	466a      	mov	r2, sp
 800a7f2:	f000 f9b7 	bl	800ab64 <_fstat_r>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	dbf0      	blt.n	800a7dc <__swhatbuf_r+0x12>
 800a7fa:	9a01      	ldr	r2, [sp, #4]
 800a7fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a800:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a804:	425a      	negs	r2, r3
 800a806:	415a      	adcs	r2, r3
 800a808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a80c:	602a      	str	r2, [r5, #0]
 800a80e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a812:	6023      	str	r3, [r4, #0]
 800a814:	e002      	b.n	800a81c <__swhatbuf_r+0x52>
 800a816:	2340      	movs	r3, #64	; 0x40
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	4610      	mov	r0, r2
 800a81c:	b016      	add	sp, #88	; 0x58
 800a81e:	bd70      	pop	{r4, r5, r6, pc}

0800a820 <__smakebuf_r>:
 800a820:	898b      	ldrh	r3, [r1, #12]
 800a822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a824:	079d      	lsls	r5, r3, #30
 800a826:	4606      	mov	r6, r0
 800a828:	460c      	mov	r4, r1
 800a82a:	d507      	bpl.n	800a83c <__smakebuf_r+0x1c>
 800a82c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	6123      	str	r3, [r4, #16]
 800a834:	2301      	movs	r3, #1
 800a836:	6163      	str	r3, [r4, #20]
 800a838:	b002      	add	sp, #8
 800a83a:	bd70      	pop	{r4, r5, r6, pc}
 800a83c:	ab01      	add	r3, sp, #4
 800a83e:	466a      	mov	r2, sp
 800a840:	f7ff ffc3 	bl	800a7ca <__swhatbuf_r>
 800a844:	9900      	ldr	r1, [sp, #0]
 800a846:	4605      	mov	r5, r0
 800a848:	4630      	mov	r0, r6
 800a84a:	f7fd fe79 	bl	8008540 <_malloc_r>
 800a84e:	b948      	cbnz	r0, 800a864 <__smakebuf_r+0x44>
 800a850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a854:	059a      	lsls	r2, r3, #22
 800a856:	d4ef      	bmi.n	800a838 <__smakebuf_r+0x18>
 800a858:	f023 0303 	bic.w	r3, r3, #3
 800a85c:	f043 0302 	orr.w	r3, r3, #2
 800a860:	81a3      	strh	r3, [r4, #12]
 800a862:	e7e3      	b.n	800a82c <__smakebuf_r+0xc>
 800a864:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <__smakebuf_r+0x7c>)
 800a866:	63f3      	str	r3, [r6, #60]	; 0x3c
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	6020      	str	r0, [r4, #0]
 800a86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a870:	81a3      	strh	r3, [r4, #12]
 800a872:	9b00      	ldr	r3, [sp, #0]
 800a874:	6163      	str	r3, [r4, #20]
 800a876:	9b01      	ldr	r3, [sp, #4]
 800a878:	6120      	str	r0, [r4, #16]
 800a87a:	b15b      	cbz	r3, 800a894 <__smakebuf_r+0x74>
 800a87c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a880:	4630      	mov	r0, r6
 800a882:	f000 f981 	bl	800ab88 <_isatty_r>
 800a886:	b128      	cbz	r0, 800a894 <__smakebuf_r+0x74>
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	f023 0303 	bic.w	r3, r3, #3
 800a88e:	f043 0301 	orr.w	r3, r3, #1
 800a892:	81a3      	strh	r3, [r4, #12]
 800a894:	89a0      	ldrh	r0, [r4, #12]
 800a896:	4305      	orrs	r5, r0
 800a898:	81a5      	strh	r5, [r4, #12]
 800a89a:	e7cd      	b.n	800a838 <__smakebuf_r+0x18>
 800a89c:	0800a395 	.word	0x0800a395

0800a8a0 <_raise_r>:
 800a8a0:	291f      	cmp	r1, #31
 800a8a2:	b538      	push	{r3, r4, r5, lr}
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	460d      	mov	r5, r1
 800a8a8:	d904      	bls.n	800a8b4 <_raise_r+0x14>
 800a8aa:	2316      	movs	r3, #22
 800a8ac:	6003      	str	r3, [r0, #0]
 800a8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b2:	bd38      	pop	{r3, r4, r5, pc}
 800a8b4:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800a8b8:	b112      	cbz	r2, 800a8c0 <_raise_r+0x20>
 800a8ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8be:	b94b      	cbnz	r3, 800a8d4 <_raise_r+0x34>
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f000 f831 	bl	800a928 <_getpid_r>
 800a8c6:	462a      	mov	r2, r5
 800a8c8:	4601      	mov	r1, r0
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8d0:	f000 b818 	b.w	800a904 <_kill_r>
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d00a      	beq.n	800a8ee <_raise_r+0x4e>
 800a8d8:	1c59      	adds	r1, r3, #1
 800a8da:	d103      	bne.n	800a8e4 <_raise_r+0x44>
 800a8dc:	2316      	movs	r3, #22
 800a8de:	6003      	str	r3, [r0, #0]
 800a8e0:	2001      	movs	r0, #1
 800a8e2:	e7e6      	b.n	800a8b2 <_raise_r+0x12>
 800a8e4:	2400      	movs	r4, #0
 800a8e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	4798      	blx	r3
 800a8ee:	2000      	movs	r0, #0
 800a8f0:	e7df      	b.n	800a8b2 <_raise_r+0x12>
	...

0800a8f4 <raise>:
 800a8f4:	4b02      	ldr	r3, [pc, #8]	; (800a900 <raise+0xc>)
 800a8f6:	4601      	mov	r1, r0
 800a8f8:	6818      	ldr	r0, [r3, #0]
 800a8fa:	f7ff bfd1 	b.w	800a8a0 <_raise_r>
 800a8fe:	bf00      	nop
 800a900:	2000000c 	.word	0x2000000c

0800a904 <_kill_r>:
 800a904:	b538      	push	{r3, r4, r5, lr}
 800a906:	4d07      	ldr	r5, [pc, #28]	; (800a924 <_kill_r+0x20>)
 800a908:	2300      	movs	r3, #0
 800a90a:	4604      	mov	r4, r0
 800a90c:	4608      	mov	r0, r1
 800a90e:	4611      	mov	r1, r2
 800a910:	602b      	str	r3, [r5, #0]
 800a912:	f7f7 fc23 	bl	800215c <_kill>
 800a916:	1c43      	adds	r3, r0, #1
 800a918:	d102      	bne.n	800a920 <_kill_r+0x1c>
 800a91a:	682b      	ldr	r3, [r5, #0]
 800a91c:	b103      	cbz	r3, 800a920 <_kill_r+0x1c>
 800a91e:	6023      	str	r3, [r4, #0]
 800a920:	bd38      	pop	{r3, r4, r5, pc}
 800a922:	bf00      	nop
 800a924:	20000bd4 	.word	0x20000bd4

0800a928 <_getpid_r>:
 800a928:	f7f7 bc10 	b.w	800214c <_getpid>

0800a92c <__sread>:
 800a92c:	b510      	push	{r4, lr}
 800a92e:	460c      	mov	r4, r1
 800a930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a934:	f000 f94a 	bl	800abcc <_read_r>
 800a938:	2800      	cmp	r0, #0
 800a93a:	bfab      	itete	ge
 800a93c:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800a93e:	89a3      	ldrhlt	r3, [r4, #12]
 800a940:	181b      	addge	r3, r3, r0
 800a942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a946:	bfac      	ite	ge
 800a948:	6523      	strge	r3, [r4, #80]	; 0x50
 800a94a:	81a3      	strhlt	r3, [r4, #12]
 800a94c:	bd10      	pop	{r4, pc}

0800a94e <__swrite>:
 800a94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a952:	461f      	mov	r7, r3
 800a954:	898b      	ldrh	r3, [r1, #12]
 800a956:	05db      	lsls	r3, r3, #23
 800a958:	4605      	mov	r5, r0
 800a95a:	460c      	mov	r4, r1
 800a95c:	4616      	mov	r6, r2
 800a95e:	d505      	bpl.n	800a96c <__swrite+0x1e>
 800a960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a964:	2302      	movs	r3, #2
 800a966:	2200      	movs	r2, #0
 800a968:	f000 f91e 	bl	800aba8 <_lseek_r>
 800a96c:	89a3      	ldrh	r3, [r4, #12]
 800a96e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a976:	81a3      	strh	r3, [r4, #12]
 800a978:	4632      	mov	r2, r6
 800a97a:	463b      	mov	r3, r7
 800a97c:	4628      	mov	r0, r5
 800a97e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a982:	f000 b875 	b.w	800aa70 <_write_r>

0800a986 <__sseek>:
 800a986:	b510      	push	{r4, lr}
 800a988:	460c      	mov	r4, r1
 800a98a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a98e:	f000 f90b 	bl	800aba8 <_lseek_r>
 800a992:	1c43      	adds	r3, r0, #1
 800a994:	89a3      	ldrh	r3, [r4, #12]
 800a996:	bf15      	itete	ne
 800a998:	6520      	strne	r0, [r4, #80]	; 0x50
 800a99a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a99e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9a2:	81a3      	strheq	r3, [r4, #12]
 800a9a4:	bf18      	it	ne
 800a9a6:	81a3      	strhne	r3, [r4, #12]
 800a9a8:	bd10      	pop	{r4, pc}

0800a9aa <__sclose>:
 800a9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ae:	f000 b871 	b.w	800aa94 <_close_r>

0800a9b2 <__swbuf_r>:
 800a9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b4:	460e      	mov	r6, r1
 800a9b6:	4614      	mov	r4, r2
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	b118      	cbz	r0, 800a9c4 <__swbuf_r+0x12>
 800a9bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a9be:	b90b      	cbnz	r3, 800a9c4 <__swbuf_r+0x12>
 800a9c0:	f7ff fd06 	bl	800a3d0 <__sinit>
 800a9c4:	69a3      	ldr	r3, [r4, #24]
 800a9c6:	60a3      	str	r3, [r4, #8]
 800a9c8:	89a3      	ldrh	r3, [r4, #12]
 800a9ca:	0719      	lsls	r1, r3, #28
 800a9cc:	d529      	bpl.n	800aa22 <__swbuf_r+0x70>
 800a9ce:	6923      	ldr	r3, [r4, #16]
 800a9d0:	b33b      	cbz	r3, 800aa22 <__swbuf_r+0x70>
 800a9d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9d6:	b2f6      	uxtb	r6, r6
 800a9d8:	049a      	lsls	r2, r3, #18
 800a9da:	4637      	mov	r7, r6
 800a9dc:	d52a      	bpl.n	800aa34 <__swbuf_r+0x82>
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	6920      	ldr	r0, [r4, #16]
 800a9e2:	1a18      	subs	r0, r3, r0
 800a9e4:	6963      	ldr	r3, [r4, #20]
 800a9e6:	4283      	cmp	r3, r0
 800a9e8:	dc04      	bgt.n	800a9f4 <__swbuf_r+0x42>
 800a9ea:	4621      	mov	r1, r4
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	f7ff fc83 	bl	800a2f8 <_fflush_r>
 800a9f2:	b9e0      	cbnz	r0, 800aa2e <__swbuf_r+0x7c>
 800a9f4:	68a3      	ldr	r3, [r4, #8]
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	60a3      	str	r3, [r4, #8]
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	1c5a      	adds	r2, r3, #1
 800a9fe:	6022      	str	r2, [r4, #0]
 800aa00:	701e      	strb	r6, [r3, #0]
 800aa02:	6962      	ldr	r2, [r4, #20]
 800aa04:	1c43      	adds	r3, r0, #1
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d004      	beq.n	800aa14 <__swbuf_r+0x62>
 800aa0a:	89a3      	ldrh	r3, [r4, #12]
 800aa0c:	07db      	lsls	r3, r3, #31
 800aa0e:	d506      	bpl.n	800aa1e <__swbuf_r+0x6c>
 800aa10:	2e0a      	cmp	r6, #10
 800aa12:	d104      	bne.n	800aa1e <__swbuf_r+0x6c>
 800aa14:	4621      	mov	r1, r4
 800aa16:	4628      	mov	r0, r5
 800aa18:	f7ff fc6e 	bl	800a2f8 <_fflush_r>
 800aa1c:	b938      	cbnz	r0, 800aa2e <__swbuf_r+0x7c>
 800aa1e:	4638      	mov	r0, r7
 800aa20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa22:	4621      	mov	r1, r4
 800aa24:	4628      	mov	r0, r5
 800aa26:	f7ff fb79 	bl	800a11c <__swsetup_r>
 800aa2a:	2800      	cmp	r0, #0
 800aa2c:	d0d1      	beq.n	800a9d2 <__swbuf_r+0x20>
 800aa2e:	f04f 37ff 	mov.w	r7, #4294967295
 800aa32:	e7f4      	b.n	800aa1e <__swbuf_r+0x6c>
 800aa34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800aa38:	81a3      	strh	r3, [r4, #12]
 800aa3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa40:	6663      	str	r3, [r4, #100]	; 0x64
 800aa42:	e7cc      	b.n	800a9de <__swbuf_r+0x2c>

0800aa44 <_wcrtomb_r>:
 800aa44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa46:	4c09      	ldr	r4, [pc, #36]	; (800aa6c <_wcrtomb_r+0x28>)
 800aa48:	b085      	sub	sp, #20
 800aa4a:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800aa4e:	4605      	mov	r5, r0
 800aa50:	461e      	mov	r6, r3
 800aa52:	b909      	cbnz	r1, 800aa58 <_wcrtomb_r+0x14>
 800aa54:	460a      	mov	r2, r1
 800aa56:	a901      	add	r1, sp, #4
 800aa58:	47b8      	blx	r7
 800aa5a:	1c43      	adds	r3, r0, #1
 800aa5c:	bf01      	itttt	eq
 800aa5e:	2300      	moveq	r3, #0
 800aa60:	6033      	streq	r3, [r6, #0]
 800aa62:	238a      	moveq	r3, #138	; 0x8a
 800aa64:	602b      	streq	r3, [r5, #0]
 800aa66:	b005      	add	sp, #20
 800aa68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	2000084c 	.word	0x2000084c

0800aa70 <_write_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4d07      	ldr	r5, [pc, #28]	; (800aa90 <_write_r+0x20>)
 800aa74:	4604      	mov	r4, r0
 800aa76:	4608      	mov	r0, r1
 800aa78:	4611      	mov	r1, r2
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	602a      	str	r2, [r5, #0]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f7f7 fba3 	bl	80021ca <_write>
 800aa84:	1c43      	adds	r3, r0, #1
 800aa86:	d102      	bne.n	800aa8e <_write_r+0x1e>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	b103      	cbz	r3, 800aa8e <_write_r+0x1e>
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	bd38      	pop	{r3, r4, r5, pc}
 800aa90:	20000bd4 	.word	0x20000bd4

0800aa94 <_close_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d06      	ldr	r5, [pc, #24]	; (800aab0 <_close_r+0x1c>)
 800aa98:	2300      	movs	r3, #0
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	602b      	str	r3, [r5, #0]
 800aaa0:	f7f7 fbaf 	bl	8002202 <_close>
 800aaa4:	1c43      	adds	r3, r0, #1
 800aaa6:	d102      	bne.n	800aaae <_close_r+0x1a>
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	b103      	cbz	r3, 800aaae <_close_r+0x1a>
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	bd38      	pop	{r3, r4, r5, pc}
 800aab0:	20000bd4 	.word	0x20000bd4

0800aab4 <_fclose_r>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	4606      	mov	r6, r0
 800aab8:	460c      	mov	r4, r1
 800aaba:	b911      	cbnz	r1, 800aac2 <_fclose_r+0xe>
 800aabc:	2500      	movs	r5, #0
 800aabe:	4628      	mov	r0, r5
 800aac0:	bd70      	pop	{r4, r5, r6, pc}
 800aac2:	b118      	cbz	r0, 800aacc <_fclose_r+0x18>
 800aac4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800aac6:	b90b      	cbnz	r3, 800aacc <_fclose_r+0x18>
 800aac8:	f7ff fc82 	bl	800a3d0 <__sinit>
 800aacc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aace:	07d8      	lsls	r0, r3, #31
 800aad0:	d405      	bmi.n	800aade <_fclose_r+0x2a>
 800aad2:	89a3      	ldrh	r3, [r4, #12]
 800aad4:	0599      	lsls	r1, r3, #22
 800aad6:	d402      	bmi.n	800aade <_fclose_r+0x2a>
 800aad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aada:	f7fd fd2f 	bl	800853c <__retarget_lock_acquire_recursive>
 800aade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aae2:	b93b      	cbnz	r3, 800aaf4 <_fclose_r+0x40>
 800aae4:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800aae6:	f015 0501 	ands.w	r5, r5, #1
 800aaea:	d1e7      	bne.n	800aabc <_fclose_r+0x8>
 800aaec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaee:	f7fd fd26 	bl	800853e <__retarget_lock_release_recursive>
 800aaf2:	e7e4      	b.n	800aabe <_fclose_r+0xa>
 800aaf4:	4621      	mov	r1, r4
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	f7ff fb70 	bl	800a1dc <__sflush_r>
 800aafc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aafe:	4605      	mov	r5, r0
 800ab00:	b133      	cbz	r3, 800ab10 <_fclose_r+0x5c>
 800ab02:	69e1      	ldr	r1, [r4, #28]
 800ab04:	4630      	mov	r0, r6
 800ab06:	4798      	blx	r3
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	bfb8      	it	lt
 800ab0c:	f04f 35ff 	movlt.w	r5, #4294967295
 800ab10:	89a3      	ldrh	r3, [r4, #12]
 800ab12:	061a      	lsls	r2, r3, #24
 800ab14:	d503      	bpl.n	800ab1e <_fclose_r+0x6a>
 800ab16:	6921      	ldr	r1, [r4, #16]
 800ab18:	4630      	mov	r0, r6
 800ab1a:	f7fd fc49 	bl	80083b0 <_free_r>
 800ab1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ab20:	b141      	cbz	r1, 800ab34 <_fclose_r+0x80>
 800ab22:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800ab26:	4299      	cmp	r1, r3
 800ab28:	d002      	beq.n	800ab30 <_fclose_r+0x7c>
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	f7fd fc40 	bl	80083b0 <_free_r>
 800ab30:	2300      	movs	r3, #0
 800ab32:	6323      	str	r3, [r4, #48]	; 0x30
 800ab34:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ab36:	b121      	cbz	r1, 800ab42 <_fclose_r+0x8e>
 800ab38:	4630      	mov	r0, r6
 800ab3a:	f7fd fc39 	bl	80083b0 <_free_r>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	6463      	str	r3, [r4, #68]	; 0x44
 800ab42:	f7ff fc2d 	bl	800a3a0 <__sfp_lock_acquire>
 800ab46:	2300      	movs	r3, #0
 800ab48:	81a3      	strh	r3, [r4, #12]
 800ab4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab4c:	07db      	lsls	r3, r3, #31
 800ab4e:	d402      	bmi.n	800ab56 <_fclose_r+0xa2>
 800ab50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab52:	f7fd fcf4 	bl	800853e <__retarget_lock_release_recursive>
 800ab56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab58:	f7fd fcef 	bl	800853a <__retarget_lock_close_recursive>
 800ab5c:	f7ff fc26 	bl	800a3ac <__sfp_lock_release>
 800ab60:	e7ad      	b.n	800aabe <_fclose_r+0xa>
	...

0800ab64 <_fstat_r>:
 800ab64:	b538      	push	{r3, r4, r5, lr}
 800ab66:	4d07      	ldr	r5, [pc, #28]	; (800ab84 <_fstat_r+0x20>)
 800ab68:	2300      	movs	r3, #0
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	4608      	mov	r0, r1
 800ab6e:	4611      	mov	r1, r2
 800ab70:	602b      	str	r3, [r5, #0]
 800ab72:	f7f7 fb52 	bl	800221a <_fstat>
 800ab76:	1c43      	adds	r3, r0, #1
 800ab78:	d102      	bne.n	800ab80 <_fstat_r+0x1c>
 800ab7a:	682b      	ldr	r3, [r5, #0]
 800ab7c:	b103      	cbz	r3, 800ab80 <_fstat_r+0x1c>
 800ab7e:	6023      	str	r3, [r4, #0]
 800ab80:	bd38      	pop	{r3, r4, r5, pc}
 800ab82:	bf00      	nop
 800ab84:	20000bd4 	.word	0x20000bd4

0800ab88 <_isatty_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4d06      	ldr	r5, [pc, #24]	; (800aba4 <_isatty_r+0x1c>)
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	4604      	mov	r4, r0
 800ab90:	4608      	mov	r0, r1
 800ab92:	602b      	str	r3, [r5, #0]
 800ab94:	f7f7 fb51 	bl	800223a <_isatty>
 800ab98:	1c43      	adds	r3, r0, #1
 800ab9a:	d102      	bne.n	800aba2 <_isatty_r+0x1a>
 800ab9c:	682b      	ldr	r3, [r5, #0]
 800ab9e:	b103      	cbz	r3, 800aba2 <_isatty_r+0x1a>
 800aba0:	6023      	str	r3, [r4, #0]
 800aba2:	bd38      	pop	{r3, r4, r5, pc}
 800aba4:	20000bd4 	.word	0x20000bd4

0800aba8 <_lseek_r>:
 800aba8:	b538      	push	{r3, r4, r5, lr}
 800abaa:	4d07      	ldr	r5, [pc, #28]	; (800abc8 <_lseek_r+0x20>)
 800abac:	4604      	mov	r4, r0
 800abae:	4608      	mov	r0, r1
 800abb0:	4611      	mov	r1, r2
 800abb2:	2200      	movs	r2, #0
 800abb4:	602a      	str	r2, [r5, #0]
 800abb6:	461a      	mov	r2, r3
 800abb8:	f7f7 fb4a 	bl	8002250 <_lseek>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	d102      	bne.n	800abc6 <_lseek_r+0x1e>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	b103      	cbz	r3, 800abc6 <_lseek_r+0x1e>
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	20000bd4 	.word	0x20000bd4

0800abcc <_read_r>:
 800abcc:	b538      	push	{r3, r4, r5, lr}
 800abce:	4d07      	ldr	r5, [pc, #28]	; (800abec <_read_r+0x20>)
 800abd0:	4604      	mov	r4, r0
 800abd2:	4608      	mov	r0, r1
 800abd4:	4611      	mov	r1, r2
 800abd6:	2200      	movs	r2, #0
 800abd8:	602a      	str	r2, [r5, #0]
 800abda:	461a      	mov	r2, r3
 800abdc:	f7f7 fad8 	bl	8002190 <_read>
 800abe0:	1c43      	adds	r3, r0, #1
 800abe2:	d102      	bne.n	800abea <_read_r+0x1e>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	b103      	cbz	r3, 800abea <_read_r+0x1e>
 800abe8:	6023      	str	r3, [r4, #0]
 800abea:	bd38      	pop	{r3, r4, r5, pc}
 800abec:	20000bd4 	.word	0x20000bd4

0800abf0 <_init>:
 800abf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf2:	bf00      	nop
 800abf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf6:	bc08      	pop	{r3}
 800abf8:	469e      	mov	lr, r3
 800abfa:	4770      	bx	lr

0800abfc <_fini>:
 800abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfe:	bf00      	nop
 800ac00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac02:	bc08      	pop	{r3}
 800ac04:	469e      	mov	lr, r3
 800ac06:	4770      	bx	lr
